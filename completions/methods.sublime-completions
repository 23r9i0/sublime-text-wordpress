{
    "scope": "source.php - variable.other.php",
    "comment": "3486 WordPress - Methods",
    "completions": [
        {
            "trigger": "_WP_Dependency-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new _WP_Dependency( ${3:\\$args} );"
        },
        {
            "trigger": "_WP_Dependency-add_data\tWP Class Method",
            "contents": "${1:_WP_Dependency}->add_data( ${2:\\$name}, ${3:\\$data} );"
        },
        {
            "trigger": "_WP_Dependency-set_translations\tWP Class Method",
            "contents": "${1:_WP_Dependency}->set_translations( ${2:\\$domain}, ${3:\\$path} );"
        },
        {
            "trigger": "_WP_Editors-editor\tWP Class Method",
            "contents": "${1:_WP_Editors}::editor( ${2:\\$content}, ${3:\\$editor_id}, ${4:\\$settings} );"
        },
        {
            "trigger": "_WP_Editors-editor_js\tWP Class Method",
            "contents": "${1:_WP_Editors}::editor_js();"
        },
        {
            "trigger": "_WP_Editors-editor_settings\tWP Class Method",
            "contents": "${1:_WP_Editors}::editor_settings( ${2:\\$editor_id}, ${3:\\$set} );"
        },
        {
            "trigger": "_WP_Editors-enqueue_default_editor\tWP Class Method",
            "contents": "${1:_WP_Editors}::enqueue_default_editor();"
        },
        {
            "trigger": "_WP_Editors-enqueue_scripts\tWP Class Method",
            "contents": "${1:_WP_Editors}::enqueue_scripts( ${2:\\$default_scripts} );"
        },
        {
            "trigger": "_WP_Editors-force_uncompressed_tinymce\tWP Class Method",
            "contents": "${1:_WP_Editors}::force_uncompressed_tinymce();"
        },
        {
            "trigger": "_WP_Editors-get_baseurl\tWP Class Method",
            "contents": "${1:_WP_Editors}::get_baseurl();"
        },
        {
            "trigger": "_WP_Editors-get_mce_locale\tWP Class Method",
            "contents": "${1:_WP_Editors}::get_mce_locale();"
        },
        {
            "trigger": "_WP_Editors-parse_settings\tWP Class Method",
            "contents": "${1:_WP_Editors}::parse_settings( ${2:\\$editor_id}, ${3:\\$settings} );"
        },
        {
            "trigger": "_WP_Editors-print_default_editor_scripts\tWP Class Method",
            "contents": "${1:_WP_Editors}::print_default_editor_scripts();"
        },
        {
            "trigger": "_WP_Editors-print_tinymce_scripts\tWP Class Method",
            "contents": "${1:_WP_Editors}::print_tinymce_scripts();"
        },
        {
            "trigger": "_WP_Editors-wp_link_dialog\tWP Class Method",
            "contents": "${1:_WP_Editors}::wp_link_dialog();"
        },
        {
            "trigger": "_WP_Editors-wp_link_query\tWP Class Method",
            "contents": "${1:_WP_Editors}::wp_link_query( ${2:\\$args} );"
        },
        {
            "trigger": "_WP_Editors-wp_mce_translation\tWP Class Method",
            "contents": "${1:_WP_Editors}::wp_mce_translation( ${2:\\$mce_locale}, ${3:\\$json_only} );"
        },
        {
            "trigger": "_WP_List_Table_Compat-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new _WP_List_Table_Compat( ${3:\\$screen}, ${4:\\$columns} );"
        },
        {
            "trigger": "_WP_List_Table_Compat-get_columns\tWP Class Method",
            "contents": "${1:_WP_List_Table_Compat}->get_columns();"
        },
        {
            "trigger": "AMFReader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new AMFReader( ${3:\\$stream} );"
        },
        {
            "trigger": "AMFReader-readArray\tWP Class Method",
            "contents": "${1:AMFReader}->readArray();"
        },
        {
            "trigger": "AMFReader-readBoolean\tWP Class Method",
            "contents": "${1:AMFReader}->readBoolean();"
        },
        {
            "trigger": "AMFReader-readData\tWP Class Method",
            "contents": "${1:AMFReader}->readData();"
        },
        {
            "trigger": "AMFReader-readDate\tWP Class Method",
            "contents": "${1:AMFReader}->readDate();"
        },
        {
            "trigger": "AMFReader-readDouble\tWP Class Method",
            "contents": "${1:AMFReader}->readDouble();"
        },
        {
            "trigger": "AMFReader-readLongString\tWP Class Method",
            "contents": "${1:AMFReader}->readLongString();"
        },
        {
            "trigger": "AMFReader-readMixedArray\tWP Class Method",
            "contents": "${1:AMFReader}->readMixedArray();"
        },
        {
            "trigger": "AMFReader-readObject\tWP Class Method",
            "contents": "${1:AMFReader}->readObject();"
        },
        {
            "trigger": "AMFReader-readString\tWP Class Method",
            "contents": "${1:AMFReader}->readString();"
        },
        {
            "trigger": "AMFReader-readTypedObject\tWP Class Method",
            "contents": "${1:AMFReader}->readTypedObject();"
        },
        {
            "trigger": "AMFReader-readXML\tWP Class Method",
            "contents": "${1:AMFReader}->readXML();"
        },
        {
            "trigger": "AMFStream-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new AMFStream( ${3:\\$bytes} );"
        },
        {
            "trigger": "AMFStream-peekByte\tWP Class Method",
            "contents": "${1:AMFStream}->peekByte();"
        },
        {
            "trigger": "AMFStream-peekDouble\tWP Class Method",
            "contents": "${1:AMFStream}->peekDouble();"
        },
        {
            "trigger": "AMFStream-peekInt\tWP Class Method",
            "contents": "${1:AMFStream}->peekInt();"
        },
        {
            "trigger": "AMFStream-peekLong\tWP Class Method",
            "contents": "${1:AMFStream}->peekLong();"
        },
        {
            "trigger": "AMFStream-peekLongUTF\tWP Class Method",
            "contents": "${1:AMFStream}->peekLongUTF();"
        },
        {
            "trigger": "AMFStream-peekUTF\tWP Class Method",
            "contents": "${1:AMFStream}->peekUTF();"
        },
        {
            "trigger": "AMFStream-read\tWP Class Method",
            "contents": "${1:AMFStream}->read( ${2:\\$length} );"
        },
        {
            "trigger": "AMFStream-readByte\tWP Class Method",
            "contents": "${1:AMFStream}->readByte();"
        },
        {
            "trigger": "AMFStream-readDouble\tWP Class Method",
            "contents": "${1:AMFStream}->readDouble();"
        },
        {
            "trigger": "AMFStream-readInt\tWP Class Method",
            "contents": "${1:AMFStream}->readInt();"
        },
        {
            "trigger": "AMFStream-readLong\tWP Class Method",
            "contents": "${1:AMFStream}->readLong();"
        },
        {
            "trigger": "AMFStream-readLongUTF\tWP Class Method",
            "contents": "${1:AMFStream}->readLongUTF();"
        },
        {
            "trigger": "AMFStream-readUTF\tWP Class Method",
            "contents": "${1:AMFStream}->readUTF();"
        },
        {
            "trigger": "AtomParser-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new AtomParser();"
        },
        {
            "trigger": "AtomParser-_default\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:AtomParser}->_default( ${2:\\$parser}, ${3:\\$data} );"
        },
        {
            "trigger": "AtomParser-_p\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:AtomParser}->_p( ${2:\\$msg} );"
        },
        {
            "trigger": "AtomParser-AtomParser\tWP Class Method",
            "contents": "${1:AtomParser}->AtomParser();"
        },
        {
            "trigger": "AtomParser-cdata\tWP Class Method",
            "contents": "${1:AtomParser}->cdata( ${2:\\$parser}, ${3:\\$data} );"
        },
        {
            "trigger": "AtomParser-end_element\tWP Class Method",
            "contents": "${1:AtomParser}->end_element( ${2:\\$parser}, ${3:\\$name} );"
        },
        {
            "trigger": "AtomParser-end_ns\tWP Class Method",
            "contents": "${1:AtomParser}->end_ns( ${2:\\$parser}, ${3:\\$prefix} );"
        },
        {
            "trigger": "AtomParser-error_handler\tWP Class Method",
            "contents": "${1:AtomParser}->error_handler( ${2:\\$log_level}, ${3:\\$log_text}, ${4:\\$error_file}, ${5:\\$error_line} );"
        },
        {
            "trigger": "AtomParser-is_declared_content_ns\tWP Class Method",
            "contents": "${1:AtomParser}->is_declared_content_ns( ${2:\\$new_mapping} );"
        },
        {
            "trigger": "AtomParser-map_attrs\tWP Class Method",
            "contents": "${1:AtomParser}::map_attrs( ${2:\\$k}, ${3:\\$v} );"
        },
        {
            "trigger": "AtomParser-map_xmlns\tWP Class Method",
            "contents": "${1:AtomParser}::map_xmlns( ${2:\\$p}, ${3:\\$n} );"
        },
        {
            "trigger": "AtomParser-ns_to_prefix\tWP Class Method",
            "contents": "${1:AtomParser}->ns_to_prefix( ${2:\\$qname}, ${3:\\$attr} );"
        },
        {
            "trigger": "AtomParser-parse\tWP Class Method",
            "contents": "${1:AtomParser}->parse();"
        },
        {
            "trigger": "AtomParser-start_element\tWP Class Method",
            "contents": "${1:AtomParser}->start_element( ${2:\\$parser}, ${3:\\$name}, ${4:\\$attrs} );"
        },
        {
            "trigger": "AtomParser-start_ns\tWP Class Method",
            "contents": "${1:AtomParser}->start_ns( ${2:\\$parser}, ${3:\\$prefix}, ${4:\\$uri} );"
        },
        {
            "trigger": "AtomParser-xml_escape\tWP Class Method",
            "contents": "${1:AtomParser}->xml_escape( ${2:\\$string} );"
        },
        {
            "trigger": "Automatic_Upgrader_Skin-feedback\tWP Class Method",
            "contents": "${1:Automatic_Upgrader_Skin}->feedback( ${2:\\$data}, ${3:\\$args} );"
        },
        {
            "trigger": "Automatic_Upgrader_Skin-footer\tWP Class Method",
            "contents": "${1:Automatic_Upgrader_Skin}->footer();"
        },
        {
            "trigger": "Automatic_Upgrader_Skin-get_upgrade_messages\tWP Class Method",
            "contents": "${1:Automatic_Upgrader_Skin}->get_upgrade_messages();"
        },
        {
            "trigger": "Automatic_Upgrader_Skin-header\tWP Class Method",
            "contents": "${1:Automatic_Upgrader_Skin}->header();"
        },
        {
            "trigger": "Automatic_Upgrader_Skin-request_filesystem_credentials\tWP Class Method",
            "contents": "${1:Automatic_Upgrader_Skin}->request_filesystem_credentials( ${2:\\$error}, ${3:\\$context}, ${4:\\$allow_relaxed_file_ownership} );"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new AVCSequenceParameterSetReader( ${3:\\$sps} );"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-expGolombSe\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->expGolombSe();"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-expGolombUe\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->expGolombUe();"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-getBit\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->getBit();"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-getBits\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->getBits( ${2:\\$bits} );"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-getHeight\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->getHeight();"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-getWidth\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->getWidth();"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-readData\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->readData();"
        },
        {
            "trigger": "AVCSequenceParameterSetReader-skipBits\tWP Class Method",
            "contents": "${1:AVCSequenceParameterSetReader}->skipBits( ${2:\\$bits} );"
        },
        {
            "trigger": "Bulk_Plugin_Upgrader_Skin-add_strings\tWP Class Method",
            "contents": "${1:Bulk_Plugin_Upgrader_Skin}->add_strings();"
        },
        {
            "trigger": "Bulk_Plugin_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:Bulk_Plugin_Upgrader_Skin}->after( ${2:\\$title} );"
        },
        {
            "trigger": "Bulk_Plugin_Upgrader_Skin-before\tWP Class Method",
            "contents": "${1:Bulk_Plugin_Upgrader_Skin}->before( ${2:\\$title} );"
        },
        {
            "trigger": "Bulk_Plugin_Upgrader_Skin-bulk_footer\tWP Class Method",
            "contents": "${1:Bulk_Plugin_Upgrader_Skin}->bulk_footer();"
        },
        {
            "trigger": "Bulk_Theme_Upgrader_Skin-add_strings\tWP Class Method",
            "contents": "${1:Bulk_Theme_Upgrader_Skin}->add_strings();"
        },
        {
            "trigger": "Bulk_Theme_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:Bulk_Theme_Upgrader_Skin}->after( ${2:\\$title} );"
        },
        {
            "trigger": "Bulk_Theme_Upgrader_Skin-before\tWP Class Method",
            "contents": "${1:Bulk_Theme_Upgrader_Skin}->before( ${2:\\$title} );"
        },
        {
            "trigger": "Bulk_Theme_Upgrader_Skin-bulk_footer\tWP Class Method",
            "contents": "${1:Bulk_Theme_Upgrader_Skin}->bulk_footer();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Bulk_Upgrader_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-add_strings\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->add_strings();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->after( ${2:\\$title} );"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-before\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->before( ${2:\\$title} );"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-bulk_footer\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->bulk_footer();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-bulk_header\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->bulk_header();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-error\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->error( ${2:\\$error} );"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-feedback\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->feedback( ${2:\\$string}, ${3:\\$args} );"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-flush_output\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->flush_output();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-footer\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->footer();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-header\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->header();"
        },
        {
            "trigger": "Bulk_Upgrader_Skin-reset\tWP Class Method",
            "contents": "${1:Bulk_Upgrader_Skin}->reset();"
        },
        {
            "trigger": "Core_Upgrader-check_files\tWP Class Method",
            "contents": "${1:Core_Upgrader}->check_files();"
        },
        {
            "trigger": "Core_Upgrader-should_update_to_version\tWP Class Method",
            "contents": "${1:Core_Upgrader}::should_update_to_version( ${2:\\$offered_ver} );"
        },
        {
            "trigger": "Core_Upgrader-upgrade\tWP Class Method",
            "contents": "${1:Core_Upgrader}->upgrade( ${2:\\$current}, ${3:\\$args} );"
        },
        {
            "trigger": "Core_Upgrader-upgrade_strings\tWP Class Method",
            "contents": "${1:Core_Upgrader}->upgrade_strings();"
        },
        {
            "trigger": "Custom_Background-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Custom_Background( ${3:\\$admin_header_callback}, ${4:\\$admin_image_div_callback} );"
        },
        {
            "trigger": "Custom_Background-admin_load\tWP Class Method",
            "contents": "${1:Custom_Background}->admin_load();"
        },
        {
            "trigger": "Custom_Background-admin_page\tWP Class Method",
            "contents": "${1:Custom_Background}->admin_page();"
        },
        {
            "trigger": "Custom_Background-ajax_background_add\tWP Class Method",
            "contents": "${1:Custom_Background}->ajax_background_add();"
        },
        {
            "trigger": "Custom_Background-handle_upload\tWP Class Method",
            "contents": "${1:Custom_Background}->handle_upload();"
        },
        {
            "trigger": "Custom_Background-init\tWP Class Method",
            "contents": "${1:Custom_Background}->init();"
        },
        {
            "trigger": "Custom_Background-take_action\tWP Class Method",
            "contents": "${1:Custom_Background}->take_action();"
        },
        {
            "trigger": "Custom_Image_Header-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Custom_Image_Header( ${3:\\$admin_header_callback}, ${4:\\$admin_image_div_callback} );"
        },
        {
            "trigger": "Custom_Image_Header-admin_page\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->admin_page();"
        },
        {
            "trigger": "Custom_Image_Header-ajax_header_add\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->ajax_header_add();"
        },
        {
            "trigger": "Custom_Image_Header-ajax_header_crop\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->ajax_header_crop();"
        },
        {
            "trigger": "Custom_Image_Header-ajax_header_remove\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->ajax_header_remove();"
        },
        {
            "trigger": "Custom_Image_Header-attachment_fields_to_edit\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->attachment_fields_to_edit( ${2:\\$form_fields} );"
        },
        {
            "trigger": "Custom_Image_Header-create_attachment_object\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->create_attachment_object( ${2:\\$cropped}, ${3:\\$parent_attachment_id} );"
        },
        {
            "trigger": "Custom_Image_Header-css_includes\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->css_includes();"
        },
        {
            "trigger": "Custom_Image_Header-customize_set_last_used\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->customize_set_last_used( ${2:\\$wp_customize} );"
        },
        {
            "trigger": "Custom_Image_Header-filter_upload_tabs\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->filter_upload_tabs( ${2:\\$tabs} );"
        },
        {
            "trigger": "Custom_Image_Header-finished\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->finished();"
        },
        {
            "trigger": "Custom_Image_Header-get_default_header_images\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->get_default_header_images();"
        },
        {
            "trigger": "Custom_Image_Header-get_header_dimensions\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->get_header_dimensions( ${2:\\$dimensions} );"
        },
        {
            "trigger": "Custom_Image_Header-get_previous_crop\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->get_previous_crop( ${2:\\$object} );"
        },
        {
            "trigger": "Custom_Image_Header-get_uploaded_header_images\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->get_uploaded_header_images();"
        },
        {
            "trigger": "Custom_Image_Header-help\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->help();"
        },
        {
            "trigger": "Custom_Image_Header-init\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->init();"
        },
        {
            "trigger": "Custom_Image_Header-insert_attachment\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->insert_attachment( ${2:\\$object}, ${3:\\$cropped} );"
        },
        {
            "trigger": "Custom_Image_Header-js\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->js();"
        },
        {
            "trigger": "Custom_Image_Header-js_1\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->js_1();"
        },
        {
            "trigger": "Custom_Image_Header-js_2\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->js_2();"
        },
        {
            "trigger": "Custom_Image_Header-js_includes\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->js_includes();"
        },
        {
            "trigger": "Custom_Image_Header-process_default_headers\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->process_default_headers();"
        },
        {
            "trigger": "Custom_Image_Header-remove_header_image\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->remove_header_image();"
        },
        {
            "trigger": "Custom_Image_Header-reset_header_image\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->reset_header_image();"
        },
        {
            "trigger": "Custom_Image_Header-set_header_image\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->set_header_image( ${2:\\$choice} );"
        },
        {
            "trigger": "Custom_Image_Header-show_header_selector\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->show_header_selector( ${2:\\$type} );"
        },
        {
            "trigger": "Custom_Image_Header-step\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->step();"
        },
        {
            "trigger": "Custom_Image_Header-step_1\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->step_1();"
        },
        {
            "trigger": "Custom_Image_Header-step_2\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->step_2();"
        },
        {
            "trigger": "Custom_Image_Header-step_2_manage_upload\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->step_2_manage_upload();"
        },
        {
            "trigger": "Custom_Image_Header-step_3\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->step_3();"
        },
        {
            "trigger": "Custom_Image_Header-take_action\tWP Class Method",
            "contents": "${1:Custom_Image_Header}->take_action();"
        },
        {
            "trigger": "File_Upload_Upgrader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new File_Upload_Upgrader( ${3:\\$form}, ${4:\\$urlholder} );"
        },
        {
            "trigger": "File_Upload_Upgrader-cleanup\tWP Class Method",
            "contents": "${1:File_Upload_Upgrader}->cleanup();"
        },
        {
            "trigger": "ftp_base-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new ftp_base( ${3:\\$port_mode}, ${4:\\$verb}, ${5:\\$le} );"
        },
        {
            "trigger": "ftp_base-_checkCode\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_base}->_checkCode();"
        },
        {
            "trigger": "ftp_base-_list\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_base}->_list( ${2:\\$arg}, ${3:\\$cmd}, ${4:\\$fnction} );"
        },
        {
            "trigger": "ftp_base-_settype\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_base}->_settype( ${2:\\$mode} );"
        },
        {
            "trigger": "ftp_base-abort\tWP Class Method",
            "contents": "${1:ftp_base}->abort();"
        },
        {
            "trigger": "ftp_base-cdup\tWP Class Method",
            "contents": "${1:ftp_base}->cdup();"
        },
        {
            "trigger": "ftp_base-chdir\tWP Class Method",
            "contents": "${1:ftp_base}->chdir( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-chmod\tWP Class Method",
            "contents": "${1:ftp_base}->chmod( ${2:\\$pathname}, ${3:\\$mode} );"
        },
        {
            "trigger": "ftp_base-connect\tWP Class Method",
            "contents": "${1:ftp_base}->connect( ${2:\\$server} );"
        },
        {
            "trigger": "ftp_base-delete\tWP Class Method",
            "contents": "${1:ftp_base}->delete( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-dirlist\tWP Class Method",
            "contents": "${1:ftp_base}->dirlist( ${2:\\$remote} );"
        },
        {
            "trigger": "ftp_base-features\tWP Class Method",
            "contents": "${1:ftp_base}->features();"
        },
        {
            "trigger": "ftp_base-fget\tWP Class Method",
            "contents": "${1:ftp_base}->fget( ${2:\\$fp}, ${3:\\$remotefile}, ${4:\\$rest} );"
        },
        {
            "trigger": "ftp_base-file_exists\tWP Class Method",
            "contents": "${1:ftp_base}->file_exists( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-filesize\tWP Class Method",
            "contents": "${1:ftp_base}->filesize( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-fput\tWP Class Method",
            "contents": "${1:ftp_base}->fput( ${2:\\$remotefile}, ${3:\\$fp}, ${4:\\$rest} );"
        },
        {
            "trigger": "ftp_base-ftp_base\tWP Class Method",
            "contents": "${1:ftp_base}->ftp_base( ${2:\\$port_mode} );"
        },
        {
            "trigger": "ftp_base-get\tWP Class Method",
            "contents": "${1:ftp_base}->get( ${2:\\$remotefile}, ${3:\\$localfile}, ${4:\\$rest} );"
        },
        {
            "trigger": "ftp_base-glob\tWP Class Method",
            "contents": "${1:ftp_base}->glob( ${2:\\$pattern}, ${3:\\$handle} );"
        },
        {
            "trigger": "ftp_base-glob_pattern_match\tWP Class Method",
            "contents": "${1:ftp_base}->glob_pattern_match( ${2:\\$pattern}, ${3:\\$string} );"
        },
        {
            "trigger": "ftp_base-glob_regexp\tWP Class Method",
            "contents": "${1:ftp_base}->glob_regexp( ${2:\\$pattern}, ${3:\\$probe} );"
        },
        {
            "trigger": "ftp_base-is_exists\tWP Class Method",
            "contents": "${1:ftp_base}->is_exists( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-login\tWP Class Method",
            "contents": "${1:ftp_base}->login( ${2:\\$user}, ${3:\\$pass} );"
        },
        {
            "trigger": "ftp_base-mdel\tWP Class Method",
            "contents": "${1:ftp_base}->mdel( ${2:\\$remote}, ${3:\\$continious} );"
        },
        {
            "trigger": "ftp_base-mdtm\tWP Class Method",
            "contents": "${1:ftp_base}->mdtm( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-mget\tWP Class Method",
            "contents": "${1:ftp_base}->mget( ${2:\\$remote}, ${3:\\$local}, ${4:\\$continious} );"
        },
        {
            "trigger": "ftp_base-mkdir\tWP Class Method",
            "contents": "${1:ftp_base}->mkdir( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-mmkdir\tWP Class Method",
            "contents": "${1:ftp_base}->mmkdir( ${2:\\$dir}, ${3:\\$mode} );"
        },
        {
            "trigger": "ftp_base-mput\tWP Class Method",
            "contents": "${1:ftp_base}->mput( ${2:\\$local}, ${3:\\$remote}, ${4:\\$continious} );"
        },
        {
            "trigger": "ftp_base-nlist\tWP Class Method",
            "contents": "${1:ftp_base}->nlist( ${2:\\$pathname}, ${3:\\$arg} );"
        },
        {
            "trigger": "ftp_base-parselisting\tWP Class Method",
            "contents": "${1:ftp_base}->parselisting( ${2:\\$line} );"
        },
        {
            "trigger": "ftp_base-Passive\tWP Class Method",
            "contents": "${1:ftp_base}->Passive( ${2:\\$pasv} );"
        },
        {
            "trigger": "ftp_base-PopError\tWP Class Method",
            "contents": "${1:ftp_base}->PopError();"
        },
        {
            "trigger": "ftp_base-PushError\tWP Class Method",
            "contents": "${1:ftp_base}->PushError( ${2:\\$fctname}, ${3:\\$msg}, ${4:\\$desc} );"
        },
        {
            "trigger": "ftp_base-put\tWP Class Method",
            "contents": "${1:ftp_base}->put( ${2:\\$localfile}, ${3:\\$remotefile}, ${4:\\$rest} );"
        },
        {
            "trigger": "ftp_base-pwd\tWP Class Method",
            "contents": "${1:ftp_base}->pwd();"
        },
        {
            "trigger": "ftp_base-quit\tWP Class Method",
            "contents": "${1:ftp_base}->quit( ${2:\\$force} );"
        },
        {
            "trigger": "ftp_base-rawlist\tWP Class Method",
            "contents": "${1:ftp_base}->rawlist( ${2:\\$pathname}, ${3:\\$arg} );"
        },
        {
            "trigger": "ftp_base-rename\tWP Class Method",
            "contents": "${1:ftp_base}->rename( ${2:\\$from}, ${3:\\$to} );"
        },
        {
            "trigger": "ftp_base-restore\tWP Class Method",
            "contents": "${1:ftp_base}->restore( ${2:\\$from} );"
        },
        {
            "trigger": "ftp_base-rmdir\tWP Class Method",
            "contents": "${1:ftp_base}->rmdir( ${2:\\$pathname} );"
        },
        {
            "trigger": "ftp_base-SendMSG\tWP Class Method",
            "contents": "${1:ftp_base}->SendMSG( ${2:\\$message}, ${3:\\$crlf} );"
        },
        {
            "trigger": "ftp_base-SetServer\tWP Class Method",
            "contents": "${1:ftp_base}->SetServer( ${2:\\$host}, ${3:\\$port}, ${4:\\$reconnect} );"
        },
        {
            "trigger": "ftp_base-SetTimeout\tWP Class Method",
            "contents": "${1:ftp_base}->SetTimeout( ${2:\\$timeout} );"
        },
        {
            "trigger": "ftp_base-SetType\tWP Class Method",
            "contents": "${1:ftp_base}->SetType( ${2:\\$mode} );"
        },
        {
            "trigger": "ftp_base-SetUmask\tWP Class Method",
            "contents": "${1:ftp_base}->SetUmask( ${2:\\$umask} );"
        },
        {
            "trigger": "ftp_base-site\tWP Class Method",
            "contents": "${1:ftp_base}->site( ${2:\\$command}, ${3:\\$fnction} );"
        },
        {
            "trigger": "ftp_base-systype\tWP Class Method",
            "contents": "${1:ftp_base}->systype();"
        },
        {
            "trigger": "ftp_pure-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new ftp_pure( ${3:\\$verb}, ${4:\\$le} );"
        },
        {
            "trigger": "ftp_pure-_connect\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_connect( ${2:\\$host}, ${3:\\$port} );"
        },
        {
            "trigger": "ftp_pure-_data_close\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_data_close();"
        },
        {
            "trigger": "ftp_pure-_data_prepare\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_data_prepare( ${2:\\$mode} );"
        },
        {
            "trigger": "ftp_pure-_data_read\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_data_read( ${2:\\$mode}, ${3:\\$fp} );"
        },
        {
            "trigger": "ftp_pure-_data_write\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_data_write( ${2:\\$mode}, ${3:\\$fp} );"
        },
        {
            "trigger": "ftp_pure-_data_write_block\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_data_write_block( ${2:\\$mode}, ${3:\\$block} );"
        },
        {
            "trigger": "ftp_pure-_exec\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_exec( ${2:\\$cmd}, ${3:\\$fnction} );"
        },
        {
            "trigger": "ftp_pure-_quit\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_quit( ${2:\\$force} );"
        },
        {
            "trigger": "ftp_pure-_readmsg\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_readmsg( ${2:\\$fnction} );"
        },
        {
            "trigger": "ftp_pure-_settimeout\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_pure}->_settimeout( ${2:\\$sock} );"
        },
        {
            "trigger": "ftp_sockets-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new ftp_sockets( ${3:\\$verb}, ${4:\\$le} );"
        },
        {
            "trigger": "ftp_sockets-_connect\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_connect( ${2:\\$host}, ${3:\\$port} );"
        },
        {
            "trigger": "ftp_sockets-_data_close\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_data_close();"
        },
        {
            "trigger": "ftp_sockets-_data_prepare\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_data_prepare( ${2:\\$mode} );"
        },
        {
            "trigger": "ftp_sockets-_data_read\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_data_read( ${2:\\$mode}, ${3:\\$fp} );"
        },
        {
            "trigger": "ftp_sockets-_data_write\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_data_write( ${2:\\$mode}, ${3:\\$fp} );"
        },
        {
            "trigger": "ftp_sockets-_data_write_block\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_data_write_block( ${2:\\$mode}, ${3:\\$block} );"
        },
        {
            "trigger": "ftp_sockets-_exec\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_exec( ${2:\\$cmd}, ${3:\\$fnction} );"
        },
        {
            "trigger": "ftp_sockets-_quit\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_quit();"
        },
        {
            "trigger": "ftp_sockets-_readmsg\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_readmsg( ${2:\\$fnction} );"
        },
        {
            "trigger": "ftp_sockets-_settimeout\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:ftp_sockets}->_settimeout( ${2:\\$sock} );"
        },
        {
            "trigger": "getid3_ac3-Analyze\tWP Class Method",
            "contents": "${1:getid3_ac3}->Analyze();"
        },
        {
            "trigger": "getid3_ac3-audioCodingModeLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::audioCodingModeLookup( ${2:\\$acmod} );"
        },
        {
            "trigger": "getid3_ac3-bitrateLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::bitrateLookup( ${2:\\$frmsizecod} );"
        },
        {
            "trigger": "getid3_ac3-blocksPerSyncFrame\tWP Class Method",
            "contents": "${1:getid3_ac3}::blocksPerSyncFrame( ${2:\\$numblkscod} );"
        },
        {
            "trigger": "getid3_ac3-centerMixLevelLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::centerMixLevelLookup( ${2:\\$cmixlev} );"
        },
        {
            "trigger": "getid3_ac3-channelsEnabledLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::channelsEnabledLookup( ${2:\\$acmod}, ${3:\\$lfeon} );"
        },
        {
            "trigger": "getid3_ac3-dolbySurroundModeLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::dolbySurroundModeLookup( ${2:\\$dsurmod} );"
        },
        {
            "trigger": "getid3_ac3-frameSizeLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::frameSizeLookup( ${2:\\$frmsizecod}, ${3:\\$fscod} );"
        },
        {
            "trigger": "getid3_ac3-heavyCompression\tWP Class Method",
            "contents": "${1:getid3_ac3}::heavyCompression( ${2:\\$compre} );"
        },
        {
            "trigger": "getid3_ac3-roomTypeLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::roomTypeLookup( ${2:\\$roomtyp} );"
        },
        {
            "trigger": "getid3_ac3-sampleRateCodeLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::sampleRateCodeLookup( ${2:\\$fscod} );"
        },
        {
            "trigger": "getid3_ac3-sampleRateCodeLookup2\tWP Class Method",
            "contents": "${1:getid3_ac3}::sampleRateCodeLookup2( ${2:\\$fscod2} );"
        },
        {
            "trigger": "getid3_ac3-serviceTypeLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::serviceTypeLookup( ${2:\\$bsmod}, ${3:\\$acmod} );"
        },
        {
            "trigger": "getid3_ac3-surroundMixLevelLookup\tWP Class Method",
            "contents": "${1:getid3_ac3}::surroundMixLevelLookup( ${2:\\$surmixlev} );"
        },
        {
            "trigger": "getid3_apetag-Analyze\tWP Class Method",
            "contents": "${1:getid3_apetag}->Analyze();"
        },
        {
            "trigger": "getid3_apetag-APEcontentTypeFlagLookup\tWP Class Method",
            "contents": "${1:getid3_apetag}->APEcontentTypeFlagLookup( ${2:\\$contenttypeid} );"
        },
        {
            "trigger": "getid3_apetag-APEtagItemIsUTF8Lookup\tWP Class Method",
            "contents": "${1:getid3_apetag}->APEtagItemIsUTF8Lookup( ${2:\\$itemkey} );"
        },
        {
            "trigger": "getid3_apetag-parseAPEheaderFooter\tWP Class Method",
            "contents": "${1:getid3_apetag}->parseAPEheaderFooter( ${2:\\$APEheaderFooterData} );"
        },
        {
            "trigger": "getid3_apetag-parseAPEtagFlags\tWP Class Method",
            "contents": "${1:getid3_apetag}->parseAPEtagFlags( ${2:\\$rawflagint} );"
        },
        {
            "trigger": "getid3_asf-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new getid3_asf( ${3:\\$getid3} );"
        },
        {
            "trigger": "getid3_asf-Analyze\tWP Class Method",
            "contents": "${1:getid3_asf}->Analyze();"
        },
        {
            "trigger": "getid3_asf-ASF_WMpicture\tWP Class Method",
            "contents": "${1:getid3_asf}->ASF_WMpicture( ${2:\\$data} );"
        },
        {
            "trigger": "getid3_asf-ASFIndexObjectIndexTypeLookup\tWP Class Method",
            "contents": "${1:getid3_asf}::ASFIndexObjectIndexTypeLookup( ${2:\\$id} );"
        },
        {
            "trigger": "getid3_asf-BytestringToGUID\tWP Class Method",
            "contents": "${1:getid3_asf}::BytestringToGUID( ${2:\\$Bytestring} );"
        },
        {
            "trigger": "getid3_asf-codecListObjectTypeLookup\tWP Class Method",
            "contents": "${1:getid3_asf}::codecListObjectTypeLookup( ${2:\\$CodecListType} );"
        },
        {
            "trigger": "getid3_asf-FILETIMEtoUNIXtime\tWP Class Method",
            "contents": "${1:getid3_asf}::FILETIMEtoUNIXtime( ${2:\\$FILETIME}, ${3:\\$round} );"
        },
        {
            "trigger": "getid3_asf-GUIDname\tWP Class Method",
            "contents": "${1:getid3_asf}::GUIDname( ${2:\\$GUIDstring} );"
        },
        {
            "trigger": "getid3_asf-GUIDtoBytestring\tWP Class Method",
            "contents": "${1:getid3_asf}::GUIDtoBytestring( ${2:\\$GUIDstring} );"
        },
        {
            "trigger": "getid3_asf-HeaderExtensionObjectDataParse\tWP Class Method",
            "contents": "${1:getid3_asf}->HeaderExtensionObjectDataParse( ${2:\\$asf_header_extension_object_data}, ${3:\\$unhandled_sections} );"
        },
        {
            "trigger": "getid3_asf-KnownGUIDs\tWP Class Method",
            "contents": "${1:getid3_asf}::KnownGUIDs();"
        },
        {
            "trigger": "getid3_asf-metadataLibraryObjectDataTypeLookup\tWP Class Method",
            "contents": "${1:getid3_asf}::metadataLibraryObjectDataTypeLookup( ${2:\\$id} );"
        },
        {
            "trigger": "getid3_asf-TrimConvert\tWP Class Method",
            "contents": "${1:getid3_asf}::TrimConvert( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_asf-TrimTerm\tWP Class Method",
            "contents": "${1:getid3_asf}::TrimTerm( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_asf-WMpictureTypeLookup\tWP Class Method",
            "contents": "${1:getid3_asf}::WMpictureTypeLookup( ${2:\\$WMpictureType} );"
        },
        {
            "trigger": "getid3_dts-Analyze\tWP Class Method",
            "contents": "${1:getid3_dts}->Analyze();"
        },
        {
            "trigger": "getid3_dts-bitPerSampleLookup\tWP Class Method",
            "contents": "${1:getid3_dts}::bitPerSampleLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_dts-bitrateLookup\tWP Class Method",
            "contents": "${1:getid3_dts}::bitrateLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_dts-channelArrangementLookup\tWP Class Method",
            "contents": "${1:getid3_dts}::channelArrangementLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_dts-dialogNormalization\tWP Class Method",
            "contents": "${1:getid3_dts}::dialogNormalization( ${2:\\$index}, ${3:\\$version} );"
        },
        {
            "trigger": "getid3_dts-numChannelsLookup\tWP Class Method",
            "contents": "${1:getid3_dts}::numChannelsLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_dts-sampleRateLookup\tWP Class Method",
            "contents": "${1:getid3_dts}::sampleRateLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_flac-Analyze\tWP Class Method",
            "contents": "${1:getid3_flac}->Analyze();"
        },
        {
            "trigger": "getid3_flac-applicationIDLookup\tWP Class Method",
            "contents": "${1:getid3_flac}::applicationIDLookup( ${2:\\$applicationid} );"
        },
        {
            "trigger": "getid3_flac-metaBlockTypeLookup\tWP Class Method",
            "contents": "${1:getid3_flac}::metaBlockTypeLookup( ${2:\\$blocktype} );"
        },
        {
            "trigger": "getid3_flac-parseMETAdata\tWP Class Method",
            "contents": "${1:getid3_flac}->parseMETAdata();"
        },
        {
            "trigger": "getid3_flac-parsePICTURE\tWP Class Method",
            "contents": "${1:getid3_flac}->parsePICTURE();"
        },
        {
            "trigger": "getid3_flac-parseSTREAMINFOdata\tWP Class Method",
            "contents": "${1:getid3_flac}::parseSTREAMINFOdata( ${2:\\$BlockData} );"
        },
        {
            "trigger": "getid3_flac-pictureTypeLookup\tWP Class Method",
            "contents": "${1:getid3_flac}::pictureTypeLookup( ${2:\\$type_id} );"
        },
        {
            "trigger": "getid3_flv-Analyze\tWP Class Method",
            "contents": "${1:getid3_flv}->Analyze();"
        },
        {
            "trigger": "getid3_flv-audioBitDepthLookup\tWP Class Method",
            "contents": "${1:getid3_flv}::audioBitDepthLookup( ${2:\\$id} );"
        },
        {
            "trigger": "getid3_flv-audioFormatLookup\tWP Class Method",
            "contents": "${1:getid3_flv}::audioFormatLookup( ${2:\\$id} );"
        },
        {
            "trigger": "getid3_flv-audioRateLookup\tWP Class Method",
            "contents": "${1:getid3_flv}::audioRateLookup( ${2:\\$id} );"
        },
        {
            "trigger": "getid3_flv-videoCodecLookup\tWP Class Method",
            "contents": "${1:getid3_flv}::videoCodecLookup( ${2:\\$id} );"
        },
        {
            "trigger": "getid3_handler-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new getid3_handler( ${3:\\$getid3}, ${4:\\$call_module} );"
        },
        {
            "trigger": "getid3_handler-Analyze\tWP Class Method",
            "contents": "${1:getid3_handler}->Analyze();"
        },
        {
            "trigger": "getid3_handler-AnalyzeString\tWP Class Method",
            "contents": "${1:getid3_handler}->AnalyzeString( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_handler-saveAttachment\tWP Class Method",
            "contents": "${1:getid3_handler}->saveAttachment( ${2:\\$name}, ${3:\\$offset}, ${4:\\$length}, ${5:\\$image_mime} );"
        },
        {
            "trigger": "getid3_handler-setStringMode\tWP Class Method",
            "contents": "${1:getid3_handler}->setStringMode( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_id3v1-Analyze\tWP Class Method",
            "contents": "${1:getid3_id3v1}->Analyze();"
        },
        {
            "trigger": "getid3_id3v1-ArrayOfGenres\tWP Class Method",
            "contents": "${1:getid3_id3v1}::ArrayOfGenres( ${2:\\$allowSCMPXextended} );"
        },
        {
            "trigger": "getid3_id3v1-cutfield\tWP Class Method",
            "contents": "${1:getid3_id3v1}::cutfield( ${2:\\$str} );"
        },
        {
            "trigger": "getid3_id3v1-GenerateID3v1Tag\tWP Class Method",
            "contents": "${1:getid3_id3v1}::GenerateID3v1Tag( ${2:\\$title}, ${3:\\$artist}, ${4:\\$album}, ${5:\\$year}, ${6:\\$genreid}, ${7:\\$comment}, ${8:\\$track} );"
        },
        {
            "trigger": "getid3_id3v1-LookupGenreID\tWP Class Method",
            "contents": "${1:getid3_id3v1}::LookupGenreID( ${2:\\$genre}, ${3:\\$allowSCMPXextended} );"
        },
        {
            "trigger": "getid3_id3v1-LookupGenreName\tWP Class Method",
            "contents": "${1:getid3_id3v1}::LookupGenreName( ${2:\\$genreid}, ${3:\\$allowSCMPXextended} );"
        },
        {
            "trigger": "getid3_id3v1-StandardiseID3v1GenreName\tWP Class Method",
            "contents": "${1:getid3_id3v1}::StandardiseID3v1GenreName( ${2:\\$OriginalGenre} );"
        },
        {
            "trigger": "getid3_id3v2-Analyze\tWP Class Method",
            "contents": "${1:getid3_id3v2}->Analyze();"
        },
        {
            "trigger": "getid3_id3v2-APICPictureTypeLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::APICPictureTypeLookup( ${2:\\$index}, ${3:\\$returnarray} );"
        },
        {
            "trigger": "getid3_id3v2-COMRReceivedAsLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::COMRReceivedAsLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-DeUnsynchronise\tWP Class Method",
            "contents": "${1:getid3_id3v2}->DeUnsynchronise( ${2:\\$data} );"
        },
        {
            "trigger": "getid3_id3v2-ETCOEventLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::ETCOEventLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-FrameNameLongLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::FrameNameLongLookup( ${2:\\$framename} );"
        },
        {
            "trigger": "getid3_id3v2-FrameNameShortLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::FrameNameShortLookup( ${2:\\$framename} );"
        },
        {
            "trigger": "getid3_id3v2-ID3v22iTunesBrokenFrameName\tWP Class Method",
            "contents": "${1:getid3_id3v2}::ID3v22iTunesBrokenFrameName( ${2:\\$frame_name} );"
        },
        {
            "trigger": "getid3_id3v2-ID3v2HeaderLength\tWP Class Method",
            "contents": "${1:getid3_id3v2}::ID3v2HeaderLength( ${2:\\$majorversion} );"
        },
        {
            "trigger": "getid3_id3v2-IsANumber\tWP Class Method",
            "contents": "${1:getid3_id3v2}::IsANumber( ${2:\\$numberstring}, ${3:\\$allowdecimal}, ${4:\\$allownegative} );"
        },
        {
            "trigger": "getid3_id3v2-IsValidDateStampString\tWP Class Method",
            "contents": "${1:getid3_id3v2}::IsValidDateStampString( ${2:\\$datestamp} );"
        },
        {
            "trigger": "getid3_id3v2-IsValidID3v2FrameName\tWP Class Method",
            "contents": "${1:getid3_id3v2}::IsValidID3v2FrameName( ${2:\\$framename}, ${3:\\$id3v2majorversion} );"
        },
        {
            "trigger": "getid3_id3v2-LanguageLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::LanguageLookup( ${2:\\$languagecode}, ${3:\\$casesensitive} );"
        },
        {
            "trigger": "getid3_id3v2-LookupCurrencyCountry\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupCurrencyCountry( ${2:\\$currencyid} );"
        },
        {
            "trigger": "getid3_id3v2-LookupCurrencyUnits\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupCurrencyUnits( ${2:\\$currencyid} );"
        },
        {
            "trigger": "getid3_id3v2-LookupExtendedHeaderRestrictionsImageEncoding\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupExtendedHeaderRestrictionsImageEncoding( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-LookupExtendedHeaderRestrictionsImageSizeSize\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupExtendedHeaderRestrictionsImageSizeSize( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-LookupExtendedHeaderRestrictionsTagSizeLimits\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupExtendedHeaderRestrictionsTagSizeLimits( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-LookupExtendedHeaderRestrictionsTextEncodings\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupExtendedHeaderRestrictionsTextEncodings( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-LookupExtendedHeaderRestrictionsTextFieldSize\tWP Class Method",
            "contents": "${1:getid3_id3v2}->LookupExtendedHeaderRestrictionsTextFieldSize( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-MakeUTF16emptyStringEmpty\tWP Class Method",
            "contents": "${1:getid3_id3v2}::MakeUTF16emptyStringEmpty( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_id3v2-ParseID3v2Frame\tWP Class Method",
            "contents": "${1:getid3_id3v2}->ParseID3v2Frame( ${2:\\$parsedFrame} );"
        },
        {
            "trigger": "getid3_id3v2-ParseID3v2GenreString\tWP Class Method",
            "contents": "${1:getid3_id3v2}->ParseID3v2GenreString( ${2:\\$genrestring} );"
        },
        {
            "trigger": "getid3_id3v2-RemoveStringTerminator\tWP Class Method",
            "contents": "${1:getid3_id3v2}::RemoveStringTerminator( ${2:\\$string}, ${3:\\$terminator} );"
        },
        {
            "trigger": "getid3_id3v2-RVA2ChannelTypeLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::RVA2ChannelTypeLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-SYTLContentTypeLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::SYTLContentTypeLookup( ${2:\\$index} );"
        },
        {
            "trigger": "getid3_id3v2-TextEncodingNameLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::TextEncodingNameLookup( ${2:\\$encoding} );"
        },
        {
            "trigger": "getid3_id3v2-TextEncodingTerminatorLookup\tWP Class Method",
            "contents": "${1:getid3_id3v2}::TextEncodingTerminatorLookup( ${2:\\$encoding} );"
        },
        {
            "trigger": "getid3_lib-array_max\tWP Class Method",
            "contents": "${1:getid3_lib}::array_max( ${2:\\$arraydata}, ${3:\\$returnkey} );"
        },
        {
            "trigger": "getid3_lib-array_merge_clobber\tWP Class Method",
            "contents": "${1:getid3_lib}::array_merge_clobber( ${2:\\$array1}, ${3:\\$array2} );"
        },
        {
            "trigger": "getid3_lib-array_merge_noclobber\tWP Class Method",
            "contents": "${1:getid3_lib}::array_merge_noclobber( ${2:\\$array1}, ${3:\\$array2} );"
        },
        {
            "trigger": "getid3_lib-array_min\tWP Class Method",
            "contents": "${1:getid3_lib}::array_min( ${2:\\$arraydata}, ${3:\\$returnkey} );"
        },
        {
            "trigger": "getid3_lib-BigEndian2Bin\tWP Class Method",
            "contents": "${1:getid3_lib}::BigEndian2Bin( ${2:\\$byteword} );"
        },
        {
            "trigger": "getid3_lib-BigEndian2Float\tWP Class Method",
            "contents": "${1:getid3_lib}::BigEndian2Float( ${2:\\$byteword} );"
        },
        {
            "trigger": "getid3_lib-BigEndian2Int\tWP Class Method",
            "contents": "${1:getid3_lib}::BigEndian2Int( ${2:\\$byteword}, ${3:\\$synchsafe}, ${4:\\$signed} );"
        },
        {
            "trigger": "getid3_lib-BigEndian2String\tWP Class Method",
            "contents": "${1:getid3_lib}::BigEndian2String( ${2:\\$number}, ${3:\\$minbytes}, ${4:\\$synchsafe}, ${5:\\$signed} );"
        },
        {
            "trigger": "getid3_lib-Bin2Dec\tWP Class Method",
            "contents": "${1:getid3_lib}::Bin2Dec( ${2:\\$binstring}, ${3:\\$signed} );"
        },
        {
            "trigger": "getid3_lib-Bin2String\tWP Class Method",
            "contents": "${1:getid3_lib}::Bin2String( ${2:\\$binstring} );"
        },
        {
            "trigger": "getid3_lib-CastAsInt\tWP Class Method",
            "contents": "${1:getid3_lib}::CastAsInt( ${2:\\$floatnum} );"
        },
        {
            "trigger": "getid3_lib-CopyTagsToComments\tWP Class Method",
            "contents": "${1:getid3_lib}::CopyTagsToComments( ${2:\\$ThisFileInfo} );"
        },
        {
            "trigger": "getid3_lib-CreateDeepArray\tWP Class Method",
            "contents": "${1:getid3_lib}::CreateDeepArray( ${2:\\$ArrayPath}, ${3:\\$Separator}, ${4:\\$Value} );"
        },
        {
            "trigger": "getid3_lib-DateMac2Unix\tWP Class Method",
            "contents": "${1:getid3_lib}::DateMac2Unix( ${2:\\$macdate} );"
        },
        {
            "trigger": "getid3_lib-Dec2Bin\tWP Class Method",
            "contents": "${1:getid3_lib}::Dec2Bin( ${2:\\$number} );"
        },
        {
            "trigger": "getid3_lib-DecimalBinary2Float\tWP Class Method",
            "contents": "${1:getid3_lib}::DecimalBinary2Float( ${2:\\$binarynumerator} );"
        },
        {
            "trigger": "getid3_lib-DecimalizeFraction\tWP Class Method",
            "contents": "${1:getid3_lib}::DecimalizeFraction( ${2:\\$fraction} );"
        },
        {
            "trigger": "getid3_lib-EmbeddedLookup\tWP Class Method",
            "contents": "${1:getid3_lib}::EmbeddedLookup( ${2:\\$key}, ${3:\\$begin}, ${4:\\$end}, ${5:\\$file}, ${6:\\$name} );"
        },
        {
            "trigger": "getid3_lib-fileextension\tWP Class Method",
            "contents": "${1:getid3_lib}::fileextension( ${2:\\$filename}, ${3:\\$numextensions} );"
        },
        {
            "trigger": "getid3_lib-FixedPoint16_16\tWP Class Method",
            "contents": "${1:getid3_lib}::FixedPoint16_16( ${2:\\$rawdata} );"
        },
        {
            "trigger": "getid3_lib-FixedPoint2_30\tWP Class Method",
            "contents": "${1:getid3_lib}::FixedPoint2_30( ${2:\\$rawdata} );"
        },
        {
            "trigger": "getid3_lib-FixedPoint8_8\tWP Class Method",
            "contents": "${1:getid3_lib}::FixedPoint8_8( ${2:\\$rawdata} );"
        },
        {
            "trigger": "getid3_lib-flipped_array_merge_noclobber\tWP Class Method",
            "contents": "${1:getid3_lib}::flipped_array_merge_noclobber( ${2:\\$array1}, ${3:\\$array2} );"
        },
        {
            "trigger": "getid3_lib-Float2BinaryDecimal\tWP Class Method",
            "contents": "${1:getid3_lib}::Float2BinaryDecimal( ${2:\\$floatvalue} );"
        },
        {
            "trigger": "getid3_lib-Float2String\tWP Class Method",
            "contents": "${1:getid3_lib}::Float2String( ${2:\\$floatvalue}, ${3:\\$bits} );"
        },
        {
            "trigger": "getid3_lib-GetDataImageSize\tWP Class Method",
            "contents": "${1:getid3_lib}::GetDataImageSize( ${2:\\$imgData}, ${3:\\$imageinfo} );"
        },
        {
            "trigger": "getid3_lib-getFileSizeSyscall\tWP Class Method",
            "contents": "${1:getid3_lib}::getFileSizeSyscall( ${2:\\$path} );"
        },
        {
            "trigger": "getid3_lib-hash_data\tWP Class Method",
            "contents": "${1:getid3_lib}::hash_data( ${2:\\$file}, ${3:\\$offset}, ${4:\\$end}, ${5:\\$algorithm} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback( ${2:\\$in_charset}, ${3:\\$out_charset}, ${4:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_int_utf8\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_int_utf8( ${2:\\$charval} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_iso88591_utf16\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_iso88591_utf16( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_iso88591_utf16be\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_iso88591_utf16be( ${2:\\$string}, ${3:\\$bom} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_iso88591_utf16le\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_iso88591_utf16le( ${2:\\$string}, ${3:\\$bom} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_iso88591_utf8\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_iso88591_utf8( ${2:\\$string}, ${3:\\$bom} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf16_iso88591\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf16_iso88591( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf16_utf8\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf16_utf8( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf16be_iso88591\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf16be_iso88591( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf16be_utf8\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf16be_utf8( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf16le_iso88591\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf16le_iso88591( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf16le_utf8\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf16le_utf8( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf8_iso88591\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf8_iso88591( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf8_utf16\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf8_utf16( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf8_utf16be\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf8_utf16be( ${2:\\$string}, ${3:\\$bom} );"
        },
        {
            "trigger": "getid3_lib-iconv_fallback_utf8_utf16le\tWP Class Method",
            "contents": "${1:getid3_lib}::iconv_fallback_utf8_utf16le( ${2:\\$string}, ${3:\\$bom} );"
        },
        {
            "trigger": "getid3_lib-ImageExtFromMime\tWP Class Method",
            "contents": "${1:getid3_lib}::ImageExtFromMime( ${2:\\$mime_type} );"
        },
        {
            "trigger": "getid3_lib-IncludeDependency\tWP Class Method",
            "contents": "${1:getid3_lib}::IncludeDependency( ${2:\\$filename}, ${3:\\$sourcefile}, ${4:\\$DieOnFailure} );"
        },
        {
            "trigger": "getid3_lib-intValueSupported\tWP Class Method",
            "contents": "${1:getid3_lib}::intValueSupported( ${2:\\$num} );"
        },
        {
            "trigger": "getid3_lib-ksort_recursive\tWP Class Method",
            "contents": "${1:getid3_lib}::ksort_recursive( ${2:\\$theArray} );"
        },
        {
            "trigger": "getid3_lib-LittleEndian2Bin\tWP Class Method",
            "contents": "${1:getid3_lib}::LittleEndian2Bin( ${2:\\$byteword} );"
        },
        {
            "trigger": "getid3_lib-LittleEndian2Float\tWP Class Method",
            "contents": "${1:getid3_lib}::LittleEndian2Float( ${2:\\$byteword} );"
        },
        {
            "trigger": "getid3_lib-LittleEndian2Int\tWP Class Method",
            "contents": "${1:getid3_lib}::LittleEndian2Int( ${2:\\$byteword}, ${3:\\$signed} );"
        },
        {
            "trigger": "getid3_lib-LittleEndian2String\tWP Class Method",
            "contents": "${1:getid3_lib}::LittleEndian2String( ${2:\\$number}, ${3:\\$minbytes}, ${4:\\$synchsafe} );"
        },
        {
            "trigger": "getid3_lib-mb_basename\tWP Class Method",
            "contents": "${1:getid3_lib}::mb_basename( ${2:\\$path}, ${3:\\$suffix} );"
        },
        {
            "trigger": "getid3_lib-MultiByteCharString2HTML\tWP Class Method",
            "contents": "${1:getid3_lib}::MultiByteCharString2HTML( ${2:\\$string}, ${3:\\$charset} );"
        },
        {
            "trigger": "getid3_lib-NormalizeBinaryPoint\tWP Class Method",
            "contents": "${1:getid3_lib}::NormalizeBinaryPoint( ${2:\\$binarypointnumber}, ${3:\\$maxbits} );"
        },
        {
            "trigger": "getid3_lib-PlaytimeString\tWP Class Method",
            "contents": "${1:getid3_lib}::PlaytimeString( ${2:\\$seconds} );"
        },
        {
            "trigger": "getid3_lib-PrintHexBytes\tWP Class Method",
            "contents": "${1:getid3_lib}::PrintHexBytes( ${2:\\$string}, ${3:\\$hex}, ${4:\\$spaces}, ${5:\\$htmlencoding} );"
        },
        {
            "trigger": "getid3_lib-recursiveMultiByteCharString2HTML\tWP Class Method",
            "contents": "${1:getid3_lib}::recursiveMultiByteCharString2HTML( ${2:\\$data}, ${3:\\$charset} );"
        },
        {
            "trigger": "getid3_lib-RGADadjustmentLookup\tWP Class Method",
            "contents": "${1:getid3_lib}::RGADadjustmentLookup( ${2:\\$rawadjustment}, ${3:\\$signbit} );"
        },
        {
            "trigger": "getid3_lib-RGADamplitude2dB\tWP Class Method",
            "contents": "${1:getid3_lib}::RGADamplitude2dB( ${2:\\$amplitude} );"
        },
        {
            "trigger": "getid3_lib-RGADgainString\tWP Class Method",
            "contents": "${1:getid3_lib}::RGADgainString( ${2:\\$namecode}, ${3:\\$originatorcode}, ${4:\\$replaygain} );"
        },
        {
            "trigger": "getid3_lib-RGADnameLookup\tWP Class Method",
            "contents": "${1:getid3_lib}::RGADnameLookup( ${2:\\$namecode} );"
        },
        {
            "trigger": "getid3_lib-RGADoriginatorLookup\tWP Class Method",
            "contents": "${1:getid3_lib}::RGADoriginatorLookup( ${2:\\$originatorcode} );"
        },
        {
            "trigger": "getid3_lib-safe_inc\tWP Class Method",
            "contents": "${1:getid3_lib}::safe_inc( ${2:\\$variable}, ${3:\\$increment} );"
        },
        {
            "trigger": "getid3_lib-SimpleXMLelement2array\tWP Class Method",
            "contents": "${1:getid3_lib}::SimpleXMLelement2array( ${2:\\$XMLobject} );"
        },
        {
            "trigger": "getid3_lib-trimNullByte\tWP Class Method",
            "contents": "${1:getid3_lib}::trimNullByte( ${2:\\$string} );"
        },
        {
            "trigger": "getid3_lib-truepath\tWP Class Method",
            "contents": "${1:getid3_lib}::truepath( ${2:\\$filename} );"
        },
        {
            "trigger": "getid3_lib-trunc\tWP Class Method",
            "contents": "${1:getid3_lib}::trunc( ${2:\\$floatnumber} );"
        },
        {
            "trigger": "getid3_lib-XML2array\tWP Class Method",
            "contents": "${1:getid3_lib}::XML2array( ${2:\\$XMLstring} );"
        },
        {
            "trigger": "getid3_lyrics3-Analyze\tWP Class Method",
            "contents": "${1:getid3_lyrics3}->Analyze();"
        },
        {
            "trigger": "getid3_lyrics3-getLyrics3Data\tWP Class Method",
            "contents": "${1:getid3_lyrics3}->getLyrics3Data( ${2:\\$endoffset}, ${3:\\$version}, ${4:\\$length} );"
        },
        {
            "trigger": "getid3_lyrics3-IntString2Bool\tWP Class Method",
            "contents": "${1:getid3_lyrics3}->IntString2Bool( ${2:\\$char} );"
        },
        {
            "trigger": "getid3_lyrics3-Lyrics3LyricsTimestampParse\tWP Class Method",
            "contents": "${1:getid3_lyrics3}->Lyrics3LyricsTimestampParse( ${2:\\$Lyrics3data} );"
        },
        {
            "trigger": "getid3_lyrics3-Lyrics3Timestamp2Seconds\tWP Class Method",
            "contents": "${1:getid3_lyrics3}->Lyrics3Timestamp2Seconds( ${2:\\$rawtimestamp} );"
        },
        {
            "trigger": "getid3_matroska-Analyze\tWP Class Method",
            "contents": "${1:getid3_matroska}->Analyze();"
        },
        {
            "trigger": "getid3_matroska-BlockLacingType\tWP Class Method",
            "contents": "${1:getid3_matroska}::BlockLacingType( ${2:\\$lacingtype} );"
        },
        {
            "trigger": "getid3_matroska-CodecIDtoCommonName\tWP Class Method",
            "contents": "${1:getid3_matroska}::CodecIDtoCommonName( ${2:\\$codecid} );"
        },
        {
            "trigger": "getid3_matroska-displayUnit\tWP Class Method",
            "contents": "${1:getid3_matroska}::displayUnit( ${2:\\$value} );"
        },
        {
            "trigger": "getid3_matroska-TargetTypeValue\tWP Class Method",
            "contents": "${1:getid3_matroska}::TargetTypeValue( ${2:\\$target_type} );"
        },
        {
            "trigger": "getid3_mp3-Analyze\tWP Class Method",
            "contents": "${1:getid3_mp3}->Analyze();"
        },
        {
            "trigger": "getid3_mp3-ClosestStandardMP3Bitrate\tWP Class Method",
            "contents": "${1:getid3_mp3}::ClosestStandardMP3Bitrate( ${2:\\$bit_rate} );"
        },
        {
            "trigger": "getid3_mp3-decodeMPEGaudioHeader\tWP Class Method",
            "contents": "${1:getid3_mp3}->decodeMPEGaudioHeader( ${2:\\$offset}, ${3:\\$info}, ${4:\\$recursivesearch}, ${5:\\$ScanAsCBR}, ${6:\\$FastMPEGheaderScan} );"
        },
        {
            "trigger": "getid3_mp3-FreeFormatFrameLength\tWP Class Method",
            "contents": "${1:getid3_mp3}->FreeFormatFrameLength( ${2:\\$offset}, ${3:\\$deepscan} );"
        },
        {
            "trigger": "getid3_mp3-getOnlyMPEGaudioInfo\tWP Class Method",
            "contents": "${1:getid3_mp3}->getOnlyMPEGaudioInfo( ${2:\\$avdataoffset}, ${3:\\$BitrateHistogram} );"
        },
        {
            "trigger": "getid3_mp3-getOnlyMPEGaudioInfoBruteForce\tWP Class Method",
            "contents": "${1:getid3_mp3}->getOnlyMPEGaudioInfoBruteForce();"
        },
        {
            "trigger": "getid3_mp3-GuessEncoderOptions\tWP Class Method",
            "contents": "${1:getid3_mp3}->GuessEncoderOptions();"
        },
        {
            "trigger": "getid3_mp3-LAMEmiscSourceSampleFrequencyLookup\tWP Class Method",
            "contents": "${1:getid3_mp3}::LAMEmiscSourceSampleFrequencyLookup( ${2:\\$SourceSampleFrequencyID} );"
        },
        {
            "trigger": "getid3_mp3-LAMEmiscStereoModeLookup\tWP Class Method",
            "contents": "${1:getid3_mp3}::LAMEmiscStereoModeLookup( ${2:\\$StereoModeID} );"
        },
        {
            "trigger": "getid3_mp3-LAMEpresetUsedLookup\tWP Class Method",
            "contents": "${1:getid3_mp3}::LAMEpresetUsedLookup( ${2:\\$LAMEtag} );"
        },
        {
            "trigger": "getid3_mp3-LAMEsurroundInfoLookup\tWP Class Method",
            "contents": "${1:getid3_mp3}::LAMEsurroundInfoLookup( ${2:\\$SurroundInfoID} );"
        },
        {
            "trigger": "getid3_mp3-LAMEvbrMethodLookup\tWP Class Method",
            "contents": "${1:getid3_mp3}::LAMEvbrMethodLookup( ${2:\\$VBRmethodID} );"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioBitrateArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioBitrateArray();"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioChannelModeArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioChannelModeArray();"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioEmphasisArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioEmphasisArray();"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioFrameLength\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioFrameLength( ${2:\\$bitrate}, ${3:\\$version}, ${4:\\$layer}, ${5:\\$padding}, ${6:\\$samplerate} );"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioFrequencyArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioFrequencyArray();"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioHeaderBytesValid\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioHeaderBytesValid( ${2:\\$head4}, ${3:\\$allowBitrate15} );"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioHeaderDecode\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioHeaderDecode( ${2:\\$Header4Bytes} );"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioHeaderValid\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioHeaderValid( ${2:\\$rawarray}, ${3:\\$echoerrors}, ${4:\\$allowBitrate15} );"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioLayerArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioLayerArray();"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioModeExtensionArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioModeExtensionArray();"
        },
        {
            "trigger": "getid3_mp3-MPEGaudioVersionArray\tWP Class Method",
            "contents": "${1:getid3_mp3}::MPEGaudioVersionArray();"
        },
        {
            "trigger": "getid3_mp3-RecursiveFrameScanning\tWP Class Method",
            "contents": "${1:getid3_mp3}->RecursiveFrameScanning( ${2:\\$offset}, ${3:\\$nextframetestoffset}, ${4:\\$ScanAsCBR} );"
        },
        {
            "trigger": "getid3_mp3-XingVBRidOffset\tWP Class Method",
            "contents": "${1:getid3_mp3}::XingVBRidOffset( ${2:\\$version}, ${3:\\$channelmode} );"
        },
        {
            "trigger": "getid3_ogg-Analyze\tWP Class Method",
            "contents": "${1:getid3_ogg}->Analyze();"
        },
        {
            "trigger": "getid3_ogg-get_quality_from_nominal_bitrate\tWP Class Method",
            "contents": "${1:getid3_ogg}::get_quality_from_nominal_bitrate( ${2:\\$nominal_bitrate} );"
        },
        {
            "trigger": "getid3_ogg-OggPageSegmentLength\tWP Class Method",
            "contents": "${1:getid3_ogg}::OggPageSegmentLength( ${2:\\$OggInfoArray}, ${3:\\$SegmentNumber} );"
        },
        {
            "trigger": "getid3_ogg-ParseOggPageHeader\tWP Class Method",
            "contents": "${1:getid3_ogg}->ParseOggPageHeader();"
        },
        {
            "trigger": "getid3_ogg-ParseOpusPageHeader\tWP Class Method",
            "contents": "${1:getid3_ogg}->ParseOpusPageHeader( ${2:\\$filedata}, ${3:\\$filedataoffset}, ${4:\\$oggpageinfo} );"
        },
        {
            "trigger": "getid3_ogg-ParseVorbisComments\tWP Class Method",
            "contents": "${1:getid3_ogg}->ParseVorbisComments();"
        },
        {
            "trigger": "getid3_ogg-ParseVorbisPageHeader\tWP Class Method",
            "contents": "${1:getid3_ogg}->ParseVorbisPageHeader( ${2:\\$filedata}, ${3:\\$filedataoffset}, ${4:\\$oggpageinfo} );"
        },
        {
            "trigger": "getid3_ogg-SpeexBandModeLookup\tWP Class Method",
            "contents": "${1:getid3_ogg}::SpeexBandModeLookup( ${2:\\$mode} );"
        },
        {
            "trigger": "getid3_ogg-TheoraColorSpace\tWP Class Method",
            "contents": "${1:getid3_ogg}::TheoraColorSpace( ${2:\\$colorspace_id} );"
        },
        {
            "trigger": "getid3_ogg-TheoraPixelFormat\tWP Class Method",
            "contents": "${1:getid3_ogg}::TheoraPixelFormat( ${2:\\$pixelformat_id} );"
        },
        {
            "trigger": "getid3_quicktime-Analyze\tWP Class Method",
            "contents": "${1:getid3_quicktime}->Analyze();"
        },
        {
            "trigger": "getid3_quicktime-CopyToAppropriateCommentsSection\tWP Class Method",
            "contents": "${1:getid3_quicktime}->CopyToAppropriateCommentsSection( ${2:\\$keyname}, ${3:\\$data}, ${4:\\$boxname} );"
        },
        {
            "trigger": "getid3_quicktime-LociString\tWP Class Method",
            "contents": "${1:getid3_quicktime}->LociString( ${2:\\$lstring}, ${3:\\$count} );"
        },
        {
            "trigger": "getid3_quicktime-NoNullString\tWP Class Method",
            "contents": "${1:getid3_quicktime}->NoNullString( ${2:\\$nullterminatedstring} );"
        },
        {
            "trigger": "getid3_quicktime-Pascal2String\tWP Class Method",
            "contents": "${1:getid3_quicktime}->Pascal2String( ${2:\\$pascalstring} );"
        },
        {
            "trigger": "getid3_quicktime-quicktime_bookmark_time_scale\tWP Class Method",
            "contents": "${1:getid3_quicktime}->quicktime_bookmark_time_scale( ${2:\\$info} );"
        },
        {
            "trigger": "getid3_quicktime-quicktime_read_mp4_descr_length\tWP Class Method",
            "contents": "${1:getid3_quicktime}->quicktime_read_mp4_descr_length( ${2:\\$data}, ${3:\\$offset} );"
        },
        {
            "trigger": "getid3_quicktime-quicktime_time_to_sample_table\tWP Class Method",
            "contents": "${1:getid3_quicktime}->quicktime_time_to_sample_table( ${2:\\$info} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeAudioCodecLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeAudioCodecLookup( ${2:\\$codecid} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeColorNameLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeColorNameLookup( ${2:\\$colordepthid} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeContentRatingLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeContentRatingLookup( ${2:\\$rtng} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeDCOMLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeDCOMLookup( ${2:\\$compressionid} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeIODSaudioProfileName\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeIODSaudioProfileName( ${2:\\$audio_profile_id} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeIODSvideoProfileName\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeIODSvideoProfileName( ${2:\\$video_profile_id} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeLanguageLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeLanguageLookup( ${2:\\$languageid} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeParseAtom\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeParseAtom( ${2:\\$atomname}, ${3:\\$atomsize}, ${4:\\$atom_data}, ${5:\\$baseoffset}, ${6:\\$atomHierarchy}, ${7:\\$ParseAllPossibleAtoms} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeParseContainerAtom\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeParseContainerAtom( ${2:\\$atom_data}, ${3:\\$baseoffset}, ${4:\\$atomHierarchy}, ${5:\\$ParseAllPossibleAtoms} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeParseNikonNCTG\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeParseNikonNCTG( ${2:\\$atom_data} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeSTIKLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeSTIKLookup( ${2:\\$stik} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeStoreAccountTypeLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeStoreAccountTypeLookup( ${2:\\$akid} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeStoreFrontCodeLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeStoreFrontCodeLookup( ${2:\\$sfid} );"
        },
        {
            "trigger": "getid3_quicktime-QuicktimeVideoCodecLookup\tWP Class Method",
            "contents": "${1:getid3_quicktime}->QuicktimeVideoCodecLookup( ${2:\\$codecid} );"
        },
        {
            "trigger": "getid3_quicktime-search_tag_by_key\tWP Class Method",
            "contents": "${1:getid3_quicktime}->search_tag_by_key( ${2:\\$info}, ${3:\\$tag}, ${4:\\$history}, ${5:\\$result} );"
        },
        {
            "trigger": "getid3_quicktime-search_tag_by_pair\tWP Class Method",
            "contents": "${1:getid3_quicktime}->search_tag_by_pair( ${2:\\$info}, ${3:\\$k}, ${4:\\$v}, ${5:\\$history}, ${6:\\$result} );"
        },
        {
            "trigger": "getid3_riff-Analyze\tWP Class Method",
            "contents": "${1:getid3_riff}->Analyze();"
        },
        {
            "trigger": "getid3_riff-fourccLookup\tWP Class Method",
            "contents": "${1:getid3_riff}::fourccLookup( ${2:\\$fourcc} );"
        },
        {
            "trigger": "getid3_riff-ParseBITMAPINFOHEADER\tWP Class Method",
            "contents": "${1:getid3_riff}::ParseBITMAPINFOHEADER( ${2:\\$BITMAPINFOHEADER}, ${3:\\$littleEndian} );"
        },
        {
            "trigger": "getid3_riff-parseComments\tWP Class Method",
            "contents": "${1:getid3_riff}::parseComments( ${2:\\$RIFFinfoArray}, ${3:\\$CommentsTargetArray} );"
        },
        {
            "trigger": "getid3_riff-ParseDIVXTAG\tWP Class Method",
            "contents": "${1:getid3_riff}::ParseDIVXTAG( ${2:\\$DIVXTAG}, ${3:\\$raw} );"
        },
        {
            "trigger": "getid3_riff-ParseRIFF\tWP Class Method",
            "contents": "${1:getid3_riff}->ParseRIFF( ${2:\\$startoffset}, ${3:\\$maxoffset} );"
        },
        {
            "trigger": "getid3_riff-ParseRIFFAMV\tWP Class Method",
            "contents": "${1:getid3_riff}->ParseRIFFAMV( ${2:\\$startoffset}, ${3:\\$maxoffset} );"
        },
        {
            "trigger": "getid3_riff-ParseRIFFdata\tWP Class Method",
            "contents": "${1:getid3_riff}->ParseRIFFdata( ${2:\\$RIFFdata} );"
        },
        {
            "trigger": "getid3_riff-parseWAVEFORMATex\tWP Class Method",
            "contents": "${1:getid3_riff}::parseWAVEFORMATex( ${2:\\$WaveFormatExData} );"
        },
        {
            "trigger": "getid3_riff-parseWavPackHeader\tWP Class Method",
            "contents": "${1:getid3_riff}->parseWavPackHeader( ${2:\\$WavPackChunkData} );"
        },
        {
            "trigger": "getid3_riff-waveSNDMtagLookup\tWP Class Method",
            "contents": "${1:getid3_riff}::waveSNDMtagLookup( ${2:\\$tagshortname} );"
        },
        {
            "trigger": "getid3_riff-wFormatTagLookup\tWP Class Method",
            "contents": "${1:getid3_riff}::wFormatTagLookup( ${2:\\$wFormatTag} );"
        },
        {
            "trigger": "getID3-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new getID3();"
        },
        {
            "trigger": "getID3-analyze\tWP Class Method",
            "contents": "${1:getID3}->analyze( ${2:\\$filename}, ${3:\\$filesize}, ${4:\\$original_filename}, ${5:\\$fp} );"
        },
        {
            "trigger": "getID3-CalculateCompressionRatioAudio\tWP Class Method",
            "contents": "${1:getID3}->CalculateCompressionRatioAudio();"
        },
        {
            "trigger": "getID3-CalculateCompressionRatioVideo\tWP Class Method",
            "contents": "${1:getID3}->CalculateCompressionRatioVideo();"
        },
        {
            "trigger": "getID3-CalculateReplayGain\tWP Class Method",
            "contents": "${1:getID3}->CalculateReplayGain();"
        },
        {
            "trigger": "getID3-ChannelsBitratePlaytimeCalculations\tWP Class Method",
            "contents": "${1:getID3}->ChannelsBitratePlaytimeCalculations();"
        },
        {
            "trigger": "getID3-CharConvert\tWP Class Method",
            "contents": "${1:getID3}->CharConvert( ${2:\\$array}, ${3:\\$encoding} );"
        },
        {
            "trigger": "getID3-error\tWP Class Method",
            "contents": "${1:getID3}->error( ${2:\\$message} );"
        },
        {
            "trigger": "getID3-fread_buffer_size\tWP Class Method",
            "contents": "${1:getID3}->fread_buffer_size();"
        },
        {
            "trigger": "getID3-GetFileFormat\tWP Class Method",
            "contents": "${1:getID3}->GetFileFormat( ${2:\\$filedata}, ${3:\\$filename} );"
        },
        {
            "trigger": "getID3-GetFileFormatArray\tWP Class Method",
            "contents": "${1:getID3}->GetFileFormatArray();"
        },
        {
            "trigger": "getID3-getHashdata\tWP Class Method",
            "contents": "${1:getID3}->getHashdata( ${2:\\$algorithm} );"
        },
        {
            "trigger": "getID3-getid3_tempnam\tWP Class Method",
            "contents": "${1:getID3}->getid3_tempnam();"
        },
        {
            "trigger": "getID3-HandleAllTags\tWP Class Method",
            "contents": "${1:getID3}->HandleAllTags();"
        },
        {
            "trigger": "getID3-include_module\tWP Class Method",
            "contents": "${1:getID3}->include_module( ${2:\\$name} );"
        },
        {
            "trigger": "getID3-is_writable\tWP Class Method",
            "contents": "${1:getID3}::is_writable( ${2:\\$filename} );"
        },
        {
            "trigger": "getID3-openfile\tWP Class Method",
            "contents": "${1:getID3}->openfile( ${2:\\$filename}, ${3:\\$filesize}, ${4:\\$fp} );"
        },
        {
            "trigger": "getID3-ProcessAudioStreams\tWP Class Method",
            "contents": "${1:getID3}->ProcessAudioStreams();"
        },
        {
            "trigger": "getID3-setOption\tWP Class Method",
            "contents": "${1:getID3}->setOption( ${2:\\$optArray} );"
        },
        {
            "trigger": "getID3-version\tWP Class Method",
            "contents": "${1:getID3}->version();"
        },
        {
            "trigger": "getID3-warning\tWP Class Method",
            "contents": "${1:getID3}->warning( ${2:\\$message} );"
        },
        {
            "trigger": "Gettext_Translations-gettext_select_plural_form\tWP Class Method",
            "contents": "${1:Gettext_Translations}->gettext_select_plural_form( ${2:\\$count} );"
        },
        {
            "trigger": "Gettext_Translations-make_headers\tWP Class Method",
            "contents": "${1:Gettext_Translations}->make_headers( ${2:\\$translation} );"
        },
        {
            "trigger": "Gettext_Translations-make_plural_form_function\tWP Class Method",
            "contents": "${1:Gettext_Translations}->make_plural_form_function( ${2:\\$nplurals}, ${3:\\$expression} );"
        },
        {
            "trigger": "Gettext_Translations-nplurals_and_expression_from_header\tWP Class Method",
            "contents": "${1:Gettext_Translations}->nplurals_and_expression_from_header( ${2:\\$header} );"
        },
        {
            "trigger": "Gettext_Translations-parenthesize_plural_exression\tWP Class Method",
            "contents": "${1:Gettext_Translations}->parenthesize_plural_exression( ${2:\\$expression} );"
        },
        {
            "trigger": "Gettext_Translations-set_header\tWP Class Method",
            "contents": "${1:Gettext_Translations}->set_header( ${2:\\$header}, ${3:\\$value} );"
        },
        {
            "trigger": "IXR_Base64-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Base64( ${3:\\$data} );"
        },
        {
            "trigger": "IXR_Base64-getXml\tWP Class Method",
            "contents": "${1:IXR_Base64}->getXml();"
        },
        {
            "trigger": "IXR_Base64-IXR_Base64\tWP Class Method",
            "contents": "${1:IXR_Base64}->IXR_Base64( ${2:\\$data} );"
        },
        {
            "trigger": "IXR_Client-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Client( ${3:\\$server}, ${4:\\$path}, ${5:\\$port}, ${6:\\$timeout} );"
        },
        {
            "trigger": "IXR_Client-getErrorCode\tWP Class Method",
            "contents": "${1:IXR_Client}->getErrorCode();"
        },
        {
            "trigger": "IXR_Client-getErrorMessage\tWP Class Method",
            "contents": "${1:IXR_Client}->getErrorMessage();"
        },
        {
            "trigger": "IXR_Client-getResponse\tWP Class Method",
            "contents": "${1:IXR_Client}->getResponse();"
        },
        {
            "trigger": "IXR_Client-isError\tWP Class Method",
            "contents": "${1:IXR_Client}->isError();"
        },
        {
            "trigger": "IXR_Client-IXR_Client\tWP Class Method",
            "contents": "${1:IXR_Client}->IXR_Client( ${2:\\$server}, ${3:\\$path}, ${4:\\$port}, ${5:\\$timeout} );"
        },
        {
            "trigger": "IXR_Client-query\tWP Class Method",
            "contents": "${1:IXR_Client}->query();"
        },
        {
            "trigger": "IXR_ClientMulticall-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_ClientMulticall( ${3:\\$server}, ${4:\\$path}, ${5:\\$port} );"
        },
        {
            "trigger": "IXR_ClientMulticall-addCall\tWP Class Method",
            "contents": "${1:IXR_ClientMulticall}->addCall();"
        },
        {
            "trigger": "IXR_ClientMulticall-IXR_ClientMulticall\tWP Class Method",
            "contents": "${1:IXR_ClientMulticall}->IXR_ClientMulticall( ${2:\\$server}, ${3:\\$path}, ${4:\\$port} );"
        },
        {
            "trigger": "IXR_ClientMulticall-query\tWP Class Method",
            "contents": "${1:IXR_ClientMulticall}->query();"
        },
        {
            "trigger": "IXR_Date-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Date( ${3:\\$time} );"
        },
        {
            "trigger": "IXR_Date-getIso\tWP Class Method",
            "contents": "${1:IXR_Date}->getIso();"
        },
        {
            "trigger": "IXR_Date-getTimestamp\tWP Class Method",
            "contents": "${1:IXR_Date}->getTimestamp();"
        },
        {
            "trigger": "IXR_Date-getXml\tWP Class Method",
            "contents": "${1:IXR_Date}->getXml();"
        },
        {
            "trigger": "IXR_Date-IXR_Date\tWP Class Method",
            "contents": "${1:IXR_Date}->IXR_Date( ${2:\\$time} );"
        },
        {
            "trigger": "IXR_Date-parseIso\tWP Class Method",
            "contents": "${1:IXR_Date}->parseIso( ${2:\\$iso} );"
        },
        {
            "trigger": "IXR_Date-parseTimestamp\tWP Class Method",
            "contents": "${1:IXR_Date}->parseTimestamp( ${2:\\$timestamp} );"
        },
        {
            "trigger": "IXR_Error-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Error( ${3:\\$code}, ${4:\\$message} );"
        },
        {
            "trigger": "IXR_Error-getXml\tWP Class Method",
            "contents": "${1:IXR_Error}->getXml();"
        },
        {
            "trigger": "IXR_Error-IXR_Error\tWP Class Method",
            "contents": "${1:IXR_Error}->IXR_Error( ${2:\\$code}, ${3:\\$message} );"
        },
        {
            "trigger": "IXR_IntrospectionServer-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_IntrospectionServer();"
        },
        {
            "trigger": "IXR_IntrospectionServer-addCallback\tWP Class Method",
            "contents": "${1:IXR_IntrospectionServer}->addCallback( ${2:\\$method}, ${3:\\$callback}, ${4:\\$args}, ${5:\\$help} );"
        },
        {
            "trigger": "IXR_IntrospectionServer-call\tWP Class Method",
            "contents": "${1:IXR_IntrospectionServer}->call( ${2:\\$methodname}, ${3:\\$args} );"
        },
        {
            "trigger": "IXR_IntrospectionServer-IXR_IntrospectionServer\tWP Class Method",
            "contents": "${1:IXR_IntrospectionServer}->IXR_IntrospectionServer();"
        },
        {
            "trigger": "IXR_IntrospectionServer-methodHelp\tWP Class Method",
            "contents": "${1:IXR_IntrospectionServer}->methodHelp( ${2:\\$method} );"
        },
        {
            "trigger": "IXR_IntrospectionServer-methodSignature\tWP Class Method",
            "contents": "${1:IXR_IntrospectionServer}->methodSignature( ${2:\\$method} );"
        },
        {
            "trigger": "IXR_Message-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Message( ${3:\\$message} );"
        },
        {
            "trigger": "IXR_Message-cdata\tWP Class Method",
            "contents": "${1:IXR_Message}->cdata( ${2:\\$parser}, ${3:\\$cdata} );"
        },
        {
            "trigger": "IXR_Message-IXR_Message\tWP Class Method",
            "contents": "${1:IXR_Message}->IXR_Message( ${2:\\$message} );"
        },
        {
            "trigger": "IXR_Message-parse\tWP Class Method",
            "contents": "${1:IXR_Message}->parse();"
        },
        {
            "trigger": "IXR_Message-tag_close\tWP Class Method",
            "contents": "${1:IXR_Message}->tag_close( ${2:\\$parser}, ${3:\\$tag} );"
        },
        {
            "trigger": "IXR_Message-tag_open\tWP Class Method",
            "contents": "${1:IXR_Message}->tag_open( ${2:\\$parser}, ${3:\\$tag}, ${4:\\$attr} );"
        },
        {
            "trigger": "IXR_Request-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Request( ${3:\\$method}, ${4:\\$args} );"
        },
        {
            "trigger": "IXR_Request-getLength\tWP Class Method",
            "contents": "${1:IXR_Request}->getLength();"
        },
        {
            "trigger": "IXR_Request-getXml\tWP Class Method",
            "contents": "${1:IXR_Request}->getXml();"
        },
        {
            "trigger": "IXR_Request-IXR_Request\tWP Class Method",
            "contents": "${1:IXR_Request}->IXR_Request( ${2:\\$method}, ${3:\\$args} );"
        },
        {
            "trigger": "IXR_Server-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Server( ${3:\\$callbacks}, ${4:\\$data}, ${5:\\$wait} );"
        },
        {
            "trigger": "IXR_Server-call\tWP Class Method",
            "contents": "${1:IXR_Server}->call( ${2:\\$methodname}, ${3:\\$args} );"
        },
        {
            "trigger": "IXR_Server-error\tWP Class Method",
            "contents": "${1:IXR_Server}->error( ${2:\\$error}, ${3:\\$message} );"
        },
        {
            "trigger": "IXR_Server-getCapabilities\tWP Class Method",
            "contents": "${1:IXR_Server}->getCapabilities( ${2:\\$args} );"
        },
        {
            "trigger": "IXR_Server-hasMethod\tWP Class Method",
            "contents": "${1:IXR_Server}->hasMethod( ${2:\\$method} );"
        },
        {
            "trigger": "IXR_Server-IXR_Server\tWP Class Method",
            "contents": "${1:IXR_Server}->IXR_Server( ${2:\\$callbacks}, ${3:\\$data}, ${4:\\$wait} );"
        },
        {
            "trigger": "IXR_Server-listMethods\tWP Class Method",
            "contents": "${1:IXR_Server}->listMethods( ${2:\\$args} );"
        },
        {
            "trigger": "IXR_Server-multiCall\tWP Class Method",
            "contents": "${1:IXR_Server}->multiCall( ${2:\\$methodcalls} );"
        },
        {
            "trigger": "IXR_Server-output\tWP Class Method",
            "contents": "${1:IXR_Server}->output( ${2:\\$xml} );"
        },
        {
            "trigger": "IXR_Server-serve\tWP Class Method",
            "contents": "${1:IXR_Server}->serve( ${2:\\$data} );"
        },
        {
            "trigger": "IXR_Server-setCallbacks\tWP Class Method",
            "contents": "${1:IXR_Server}->setCallbacks();"
        },
        {
            "trigger": "IXR_Server-setCapabilities\tWP Class Method",
            "contents": "${1:IXR_Server}->setCapabilities();"
        },
        {
            "trigger": "IXR_Value-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new IXR_Value( ${3:\\$data}, ${4:\\$type} );"
        },
        {
            "trigger": "IXR_Value-calculateType\tWP Class Method",
            "contents": "${1:IXR_Value}->calculateType();"
        },
        {
            "trigger": "IXR_Value-getXml\tWP Class Method",
            "contents": "${1:IXR_Value}->getXml();"
        },
        {
            "trigger": "IXR_Value-isStruct\tWP Class Method",
            "contents": "${1:IXR_Value}->isStruct( ${2:\\$array} );"
        },
        {
            "trigger": "IXR_Value-IXR_Value\tWP Class Method",
            "contents": "${1:IXR_Value}->IXR_Value( ${2:\\$data}, ${3:\\$type} );"
        },
        {
            "trigger": "Language_Pack_Upgrader_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Language_Pack_Upgrader_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "Language_Pack_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader_Skin}->after();"
        },
        {
            "trigger": "Language_Pack_Upgrader_Skin-before\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader_Skin}->before();"
        },
        {
            "trigger": "Language_Pack_Upgrader_Skin-bulk_footer\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader_Skin}->bulk_footer();"
        },
        {
            "trigger": "Language_Pack_Upgrader_Skin-error\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader_Skin}->error( ${2:\\$error} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-async_upgrade\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}::async_upgrade( ${2:\\$upgrader} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-bulk_upgrade\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}->bulk_upgrade( ${2:\\$language_updates}, ${3:\\$args} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-check_package\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}->check_package( ${2:\\$source}, ${3:\\$remote_source} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-clear_destination\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}->clear_destination( ${2:\\$remote_destination} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-get_name_for_update\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}->get_name_for_update( ${2:\\$update} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-upgrade\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}->upgrade( ${2:\\$update}, ${3:\\$args} );"
        },
        {
            "trigger": "Language_Pack_Upgrader-upgrade_strings\tWP Class Method",
            "contents": "${1:Language_Pack_Upgrader}->upgrade_strings();"
        },
        {
            "trigger": "MO-export\tWP Class Method",
            "contents": "${1:MO}->export();"
        },
        {
            "trigger": "MO-export_headers\tWP Class Method",
            "contents": "${1:MO}->export_headers();"
        },
        {
            "trigger": "MO-export_original\tWP Class Method",
            "contents": "${1:MO}->export_original( ${2:\\$entry} );"
        },
        {
            "trigger": "MO-export_to_file\tWP Class Method",
            "contents": "${1:MO}->export_to_file( ${2:\\$filename} );"
        },
        {
            "trigger": "MO-export_to_file_handle\tWP Class Method",
            "contents": "${1:MO}->export_to_file_handle( ${2:\\$fh} );"
        },
        {
            "trigger": "MO-export_translations\tWP Class Method",
            "contents": "${1:MO}->export_translations( ${2:\\$entry} );"
        },
        {
            "trigger": "MO-get_byteorder\tWP Class Method",
            "contents": "${1:MO}->get_byteorder( ${2:\\$magic} );"
        },
        {
            "trigger": "MO-get_filename\tWP Class Method",
            "contents": "${1:MO}->get_filename();"
        },
        {
            "trigger": "MO-get_plural_forms_count\tWP Class Method",
            "contents": "${1:MO}->get_plural_forms_count();"
        },
        {
            "trigger": "MO-import_from_file\tWP Class Method",
            "contents": "${1:MO}->import_from_file( ${2:\\$filename} );"
        },
        {
            "trigger": "MO-import_from_reader\tWP Class Method",
            "contents": "${1:MO}->import_from_reader( ${2:\\$reader} );"
        },
        {
            "trigger": "MO-is_entry_good_for_export\tWP Class Method",
            "contents": "${1:MO}->is_entry_good_for_export( ${2:\\$entry} );"
        },
        {
            "trigger": "MO-make_entry\tWP Class Method",
            "contents": "${1:MO}->make_entry( ${2:\\$original}, ${3:\\$translation} );"
        },
        {
            "trigger": "MO-select_plural_form\tWP Class Method",
            "contents": "${1:MO}->select_plural_form( ${2:\\$count} );"
        },
        {
            "trigger": "NOOP_Translations-add_entry\tWP Class Method",
            "contents": "${1:NOOP_Translations}->add_entry( ${2:\\$entry} );"
        },
        {
            "trigger": "NOOP_Translations-get_header\tWP Class Method",
            "contents": "${1:NOOP_Translations}->get_header( ${2:\\$header} );"
        },
        {
            "trigger": "NOOP_Translations-get_plural_forms_count\tWP Class Method",
            "contents": "${1:NOOP_Translations}->get_plural_forms_count();"
        },
        {
            "trigger": "NOOP_Translations-merge_with\tWP Class Method",
            "contents": "${1:NOOP_Translations}->merge_with( ${2:\\$other} );"
        },
        {
            "trigger": "NOOP_Translations-select_plural_form\tWP Class Method",
            "contents": "${1:NOOP_Translations}->select_plural_form( ${2:\\$count} );"
        },
        {
            "trigger": "NOOP_Translations-set_header\tWP Class Method",
            "contents": "${1:NOOP_Translations}->set_header( ${2:\\$header}, ${3:\\$value} );"
        },
        {
            "trigger": "NOOP_Translations-set_headers\tWP Class Method",
            "contents": "${1:NOOP_Translations}->set_headers( ${2:\\$headers} );"
        },
        {
            "trigger": "NOOP_Translations-translate\tWP Class Method",
            "contents": "${1:NOOP_Translations}->translate( ${2:\\$singular}, ${3:\\$context} );"
        },
        {
            "trigger": "NOOP_Translations-translate_entry\tWP Class Method",
            "contents": "${1:NOOP_Translations}->translate_entry( ${2:\\$entry} );"
        },
        {
            "trigger": "NOOP_Translations-translate_plural\tWP Class Method",
            "contents": "${1:NOOP_Translations}->translate_plural( ${2:\\$singular}, ${3:\\$plural}, ${4:\\$count}, ${5:\\$context} );"
        },
        {
            "trigger": "PasswordHash-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new PasswordHash( ${3:\\$iteration_count_log2}, ${4:\\$portable_hashes} );"
        },
        {
            "trigger": "PasswordHash-CheckPassword\tWP Class Method",
            "contents": "${1:PasswordHash}->CheckPassword( ${2:\\$password}, ${3:\\$stored_hash} );"
        },
        {
            "trigger": "PasswordHash-crypt_private\tWP Class Method",
            "contents": "${1:PasswordHash}->crypt_private( ${2:\\$password}, ${3:\\$setting} );"
        },
        {
            "trigger": "PasswordHash-encode64\tWP Class Method",
            "contents": "${1:PasswordHash}->encode64( ${2:\\$input}, ${3:\\$count} );"
        },
        {
            "trigger": "PasswordHash-gensalt_blowfish\tWP Class Method",
            "contents": "${1:PasswordHash}->gensalt_blowfish( ${2:\\$input} );"
        },
        {
            "trigger": "PasswordHash-gensalt_extended\tWP Class Method",
            "contents": "${1:PasswordHash}->gensalt_extended( ${2:\\$input} );"
        },
        {
            "trigger": "PasswordHash-gensalt_private\tWP Class Method",
            "contents": "${1:PasswordHash}->gensalt_private( ${2:\\$input} );"
        },
        {
            "trigger": "PasswordHash-get_random_bytes\tWP Class Method",
            "contents": "${1:PasswordHash}->get_random_bytes( ${2:\\$count} );"
        },
        {
            "trigger": "PasswordHash-HashPassword\tWP Class Method",
            "contents": "${1:PasswordHash}->HashPassword( ${2:\\$password} );"
        },
        {
            "trigger": "PasswordHash-PasswordHash\tWP Class Method",
            "contents": "${1:PasswordHash}->PasswordHash( ${2:\\$iteration_count_log2}, ${3:\\$portable_hashes} );"
        },
        {
            "trigger": "PclZip-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new PclZip( ${3:\\$p_zipname} );"
        },
        {
            "trigger": "PclZip-add\tWP Class Method",
            "contents": "${1:PclZip}->add( ${2:\\$p_filelist} );"
        },
        {
            "trigger": "PclZip-create\tWP Class Method",
            "contents": "${1:PclZip}->create( ${2:\\$p_filelist} );"
        },
        {
            "trigger": "PclZip-delete\tWP Class Method",
            "contents": "${1:PclZip}->delete();"
        },
        {
            "trigger": "PclZip-deleteByIndex\tWP Class Method",
            "contents": "${1:PclZip}->deleteByIndex( ${2:\\$p_index} );"
        },
        {
            "trigger": "PclZip-duplicate\tWP Class Method",
            "contents": "${1:PclZip}->duplicate( ${2:\\$p_archive} );"
        },
        {
            "trigger": "PclZip-errorCode\tWP Class Method",
            "contents": "${1:PclZip}->errorCode();"
        },
        {
            "trigger": "PclZip-errorInfo\tWP Class Method",
            "contents": "${1:PclZip}->errorInfo( ${2:\\$p_full} );"
        },
        {
            "trigger": "PclZip-errorName\tWP Class Method",
            "contents": "${1:PclZip}->errorName( ${2:\\$p_with_code} );"
        },
        {
            "trigger": "PclZip-extract\tWP Class Method",
            "contents": "${1:PclZip}->extract();"
        },
        {
            "trigger": "PclZip-extractByIndex\tWP Class Method",
            "contents": "${1:PclZip}->extractByIndex( ${2:\\$p_index} );"
        },
        {
            "trigger": "PclZip-listContent\tWP Class Method",
            "contents": "${1:PclZip}->listContent();"
        },
        {
            "trigger": "PclZip-merge\tWP Class Method",
            "contents": "${1:PclZip}->merge( ${2:\\$p_archive_to_add} );"
        },
        {
            "trigger": "PclZip-PclZip\tWP Class Method",
            "contents": "${1:PclZip}->PclZip( ${2:\\$p_zipname} );"
        },
        {
            "trigger": "PclZip-privAdd\tWP Class Method",
            "contents": "${1:PclZip}->privAdd( ${2:\\$p_filedescr_list}, ${3:\\$p_result_list}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privAddFile\tWP Class Method",
            "contents": "${1:PclZip}->privAddFile( ${2:\\$p_filedescr}, ${3:\\$p_header}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privAddFileList\tWP Class Method",
            "contents": "${1:PclZip}->privAddFileList( ${2:\\$p_filedescr_list}, ${3:\\$p_result_list}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privAddFileUsingTempFile\tWP Class Method",
            "contents": "${1:PclZip}->privAddFileUsingTempFile( ${2:\\$p_filedescr}, ${3:\\$p_header}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privAddList\tWP Class Method",
            "contents": "${1:PclZip}->privAddList( ${2:\\$p_filedescr_list}, ${3:\\$p_result_list}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privCalculateStoredFilename\tWP Class Method",
            "contents": "${1:PclZip}->privCalculateStoredFilename( ${2:\\$p_filedescr}, ${3:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privCheckFileHeaders\tWP Class Method",
            "contents": "${1:PclZip}->privCheckFileHeaders( ${2:\\$p_local_header}, ${3:\\$p_central_header} );"
        },
        {
            "trigger": "PclZip-privCheckFormat\tWP Class Method",
            "contents": "${1:PclZip}->privCheckFormat( ${2:\\$p_level} );"
        },
        {
            "trigger": "PclZip-privCloseFd\tWP Class Method",
            "contents": "${1:PclZip}->privCloseFd();"
        },
        {
            "trigger": "PclZip-privConvertHeader2FileInfo\tWP Class Method",
            "contents": "${1:PclZip}->privConvertHeader2FileInfo( ${2:\\$p_header}, ${3:\\$p_info} );"
        },
        {
            "trigger": "PclZip-privCreate\tWP Class Method",
            "contents": "${1:PclZip}->privCreate( ${2:\\$p_filedescr_list}, ${3:\\$p_result_list}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privDeleteByRule\tWP Class Method",
            "contents": "${1:PclZip}->privDeleteByRule( ${2:\\$p_result_list}, ${3:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privDirCheck\tWP Class Method",
            "contents": "${1:PclZip}->privDirCheck( ${2:\\$p_dir}, ${3:\\$p_is_dir} );"
        },
        {
            "trigger": "PclZip-privDisableMagicQuotes\tWP Class Method",
            "contents": "${1:PclZip}->privDisableMagicQuotes();"
        },
        {
            "trigger": "PclZip-privDuplicate\tWP Class Method",
            "contents": "${1:PclZip}->privDuplicate( ${2:\\$p_archive_filename} );"
        },
        {
            "trigger": "PclZip-privErrorLog\tWP Class Method",
            "contents": "${1:PclZip}->privErrorLog( ${2:\\$p_error_code}, ${3:\\$p_error_string} );"
        },
        {
            "trigger": "PclZip-privErrorReset\tWP Class Method",
            "contents": "${1:PclZip}->privErrorReset();"
        },
        {
            "trigger": "PclZip-privExtractByRule\tWP Class Method",
            "contents": "${1:PclZip}->privExtractByRule( ${2:\\$p_file_list}, ${3:\\$p_path}, ${4:\\$p_remove_path}, ${5:\\$p_remove_all_path}, ${6:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privExtractFile\tWP Class Method",
            "contents": "${1:PclZip}->privExtractFile( ${2:\\$p_entry}, ${3:\\$p_path}, ${4:\\$p_remove_path}, ${5:\\$p_remove_all_path}, ${6:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privExtractFileAsString\tWP Class Method",
            "contents": "${1:PclZip}->privExtractFileAsString( ${2:\\$p_entry}, ${3:\\$p_string}, ${4:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privExtractFileInOutput\tWP Class Method",
            "contents": "${1:PclZip}->privExtractFileInOutput( ${2:\\$p_entry}, ${3:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privExtractFileUsingTempFile\tWP Class Method",
            "contents": "${1:PclZip}->privExtractFileUsingTempFile( ${2:\\$p_entry}, ${3:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privFileDescrExpand\tWP Class Method",
            "contents": "${1:PclZip}->privFileDescrExpand( ${2:\\$p_filedescr_list}, ${3:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privFileDescrParseAtt\tWP Class Method",
            "contents": "${1:PclZip}->privFileDescrParseAtt( ${2:\\$p_file_list}, ${3:\\$p_filedescr}, ${4:\\$v_options}, ${5:\\$v_requested_options} );"
        },
        {
            "trigger": "PclZip-privList\tWP Class Method",
            "contents": "${1:PclZip}->privList( ${2:\\$p_list} );"
        },
        {
            "trigger": "PclZip-privMerge\tWP Class Method",
            "contents": "${1:PclZip}->privMerge( ${2:\\$p_archive_to_add} );"
        },
        {
            "trigger": "PclZip-privOpenFd\tWP Class Method",
            "contents": "${1:PclZip}->privOpenFd( ${2:\\$p_mode} );"
        },
        {
            "trigger": "PclZip-privOptionDefaultThreshold\tWP Class Method",
            "contents": "${1:PclZip}->privOptionDefaultThreshold( ${2:\\$p_options} );"
        },
        {
            "trigger": "PclZip-privParseOptions\tWP Class Method",
            "contents": "${1:PclZip}->privParseOptions( ${2:\\$p_options_list}, ${3:\\$p_size}, ${4:\\$v_result_list}, ${5:\\$v_requested_options} );"
        },
        {
            "trigger": "PclZip-privReadCentralFileHeader\tWP Class Method",
            "contents": "${1:PclZip}->privReadCentralFileHeader( ${2:\\$p_header} );"
        },
        {
            "trigger": "PclZip-privReadEndCentralDir\tWP Class Method",
            "contents": "${1:PclZip}->privReadEndCentralDir( ${2:\\$p_central_dir} );"
        },
        {
            "trigger": "PclZip-privReadFileHeader\tWP Class Method",
            "contents": "${1:PclZip}->privReadFileHeader( ${2:\\$p_header} );"
        },
        {
            "trigger": "PclZip-privSwapBackMagicQuotes\tWP Class Method",
            "contents": "${1:PclZip}->privSwapBackMagicQuotes();"
        },
        {
            "trigger": "PclZip-privWriteCentralFileHeader\tWP Class Method",
            "contents": "${1:PclZip}->privWriteCentralFileHeader( ${2:\\$p_header} );"
        },
        {
            "trigger": "PclZip-privWriteCentralHeader\tWP Class Method",
            "contents": "${1:PclZip}->privWriteCentralHeader( ${2:\\$p_nb_entries}, ${3:\\$p_size}, ${4:\\$p_offset}, ${5:\\$p_comment} );"
        },
        {
            "trigger": "PclZip-privWriteFileHeader\tWP Class Method",
            "contents": "${1:PclZip}->privWriteFileHeader( ${2:\\$p_header} );"
        },
        {
            "trigger": "PclZip-properties\tWP Class Method",
            "contents": "${1:PclZip}->properties();"
        },
        {
            "trigger": "PHPMailer-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new PHPMailer( ${3:\\$exceptions} );"
        },
        {
            "trigger": "PHPMailer-__destruct\tWP Class Method",
            "contents": "${1:PHPMailer}->__destruct();"
        },
        {
            "trigger": "PHPMailer-_mime_types\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:PHPMailer}::_mime_types( ${2:\\$ext} );"
        },
        {
            "trigger": "PHPMailer-addAddress\tWP Class Method",
            "contents": "${1:PHPMailer}->addAddress( ${2:\\$address}, ${3:\\$name} );"
        },
        {
            "trigger": "PHPMailer-addAttachment\tWP Class Method",
            "contents": "${1:PHPMailer}->addAttachment( ${2:\\$path}, ${3:\\$name}, ${4:\\$encoding}, ${5:\\$type}, ${6:\\$disposition} );"
        },
        {
            "trigger": "PHPMailer-addBCC\tWP Class Method",
            "contents": "${1:PHPMailer}->addBCC( ${2:\\$address}, ${3:\\$name} );"
        },
        {
            "trigger": "PHPMailer-addCC\tWP Class Method",
            "contents": "${1:PHPMailer}->addCC( ${2:\\$address}, ${3:\\$name} );"
        },
        {
            "trigger": "PHPMailer-addCustomHeader\tWP Class Method",
            "contents": "${1:PHPMailer}->addCustomHeader( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "PHPMailer-addEmbeddedImage\tWP Class Method",
            "contents": "${1:PHPMailer}->addEmbeddedImage( ${2:\\$path}, ${3:\\$cid}, ${4:\\$name}, ${5:\\$encoding}, ${6:\\$type}, ${7:\\$disposition} );"
        },
        {
            "trigger": "PHPMailer-addrAppend\tWP Class Method",
            "contents": "${1:PHPMailer}->addrAppend( ${2:\\$type}, ${3:\\$addr} );"
        },
        {
            "trigger": "PHPMailer-addReplyTo\tWP Class Method",
            "contents": "${1:PHPMailer}->addReplyTo( ${2:\\$address}, ${3:\\$name} );"
        },
        {
            "trigger": "PHPMailer-addrFormat\tWP Class Method",
            "contents": "${1:PHPMailer}->addrFormat( ${2:\\$addr} );"
        },
        {
            "trigger": "PHPMailer-addStringAttachment\tWP Class Method",
            "contents": "${1:PHPMailer}->addStringAttachment( ${2:\\$string}, ${3:\\$filename}, ${4:\\$encoding}, ${5:\\$type}, ${6:\\$disposition} );"
        },
        {
            "trigger": "PHPMailer-addStringEmbeddedImage\tWP Class Method",
            "contents": "${1:PHPMailer}->addStringEmbeddedImage( ${2:\\$string}, ${3:\\$cid}, ${4:\\$name}, ${5:\\$encoding}, ${6:\\$type}, ${7:\\$disposition} );"
        },
        {
            "trigger": "PHPMailer-alternativeExists\tWP Class Method",
            "contents": "${1:PHPMailer}->alternativeExists();"
        },
        {
            "trigger": "PHPMailer-attachmentExists\tWP Class Method",
            "contents": "${1:PHPMailer}->attachmentExists();"
        },
        {
            "trigger": "PHPMailer-base64EncodeWrapMB\tWP Class Method",
            "contents": "${1:PHPMailer}->base64EncodeWrapMB( ${2:\\$str}, ${3:\\$linebreak} );"
        },
        {
            "trigger": "PHPMailer-clearAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->clearAddresses();"
        },
        {
            "trigger": "PHPMailer-clearAllRecipients\tWP Class Method",
            "contents": "${1:PHPMailer}->clearAllRecipients();"
        },
        {
            "trigger": "PHPMailer-clearAttachments\tWP Class Method",
            "contents": "${1:PHPMailer}->clearAttachments();"
        },
        {
            "trigger": "PHPMailer-clearBCCs\tWP Class Method",
            "contents": "${1:PHPMailer}->clearBCCs();"
        },
        {
            "trigger": "PHPMailer-clearCCs\tWP Class Method",
            "contents": "${1:PHPMailer}->clearCCs();"
        },
        {
            "trigger": "PHPMailer-clearCustomHeaders\tWP Class Method",
            "contents": "${1:PHPMailer}->clearCustomHeaders();"
        },
        {
            "trigger": "PHPMailer-clearQueuedAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->clearQueuedAddresses( ${2:\\$kind} );"
        },
        {
            "trigger": "PHPMailer-clearReplyTos\tWP Class Method",
            "contents": "${1:PHPMailer}->clearReplyTos();"
        },
        {
            "trigger": "PHPMailer-createBody\tWP Class Method",
            "contents": "${1:PHPMailer}->createBody();"
        },
        {
            "trigger": "PHPMailer-createHeader\tWP Class Method",
            "contents": "${1:PHPMailer}->createHeader();"
        },
        {
            "trigger": "PHPMailer-DKIM_Add\tWP Class Method",
            "contents": "${1:PHPMailer}->DKIM_Add( ${2:\\$headers_line}, ${3:\\$subject}, ${4:\\$body} );"
        },
        {
            "trigger": "PHPMailer-DKIM_BodyC\tWP Class Method",
            "contents": "${1:PHPMailer}->DKIM_BodyC( ${2:\\$body} );"
        },
        {
            "trigger": "PHPMailer-DKIM_HeaderC\tWP Class Method",
            "contents": "${1:PHPMailer}->DKIM_HeaderC( ${2:\\$signHeader} );"
        },
        {
            "trigger": "PHPMailer-DKIM_QP\tWP Class Method",
            "contents": "${1:PHPMailer}->DKIM_QP( ${2:\\$txt} );"
        },
        {
            "trigger": "PHPMailer-DKIM_Sign\tWP Class Method",
            "contents": "${1:PHPMailer}->DKIM_Sign( ${2:\\$signHeader} );"
        },
        {
            "trigger": "PHPMailer-encodeHeader\tWP Class Method",
            "contents": "${1:PHPMailer}->encodeHeader( ${2:\\$str}, ${3:\\$position} );"
        },
        {
            "trigger": "PHPMailer-encodeQ\tWP Class Method",
            "contents": "${1:PHPMailer}->encodeQ( ${2:\\$str}, ${3:\\$position} );"
        },
        {
            "trigger": "PHPMailer-encodeQP\tWP Class Method",
            "contents": "${1:PHPMailer}->encodeQP( ${2:\\$string}, ${3:\\$line_max} );"
        },
        {
            "trigger": "PHPMailer-encodeString\tWP Class Method",
            "contents": "${1:PHPMailer}->encodeString( ${2:\\$str}, ${3:\\$encoding} );"
        },
        {
            "trigger": "PHPMailer-filenameToType\tWP Class Method",
            "contents": "${1:PHPMailer}::filenameToType( ${2:\\$filename} );"
        },
        {
            "trigger": "PHPMailer-fixEOL\tWP Class Method",
            "contents": "${1:PHPMailer}->fixEOL( ${2:\\$str} );"
        },
        {
            "trigger": "PHPMailer-getAllRecipientAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->getAllRecipientAddresses();"
        },
        {
            "trigger": "PHPMailer-getAttachments\tWP Class Method",
            "contents": "${1:PHPMailer}->getAttachments();"
        },
        {
            "trigger": "PHPMailer-getBccAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->getBccAddresses();"
        },
        {
            "trigger": "PHPMailer-getCcAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->getCcAddresses();"
        },
        {
            "trigger": "PHPMailer-getCustomHeaders\tWP Class Method",
            "contents": "${1:PHPMailer}->getCustomHeaders();"
        },
        {
            "trigger": "PHPMailer-getLastMessageID\tWP Class Method",
            "contents": "${1:PHPMailer}->getLastMessageID();"
        },
        {
            "trigger": "PHPMailer-getMailMIME\tWP Class Method",
            "contents": "${1:PHPMailer}->getMailMIME();"
        },
        {
            "trigger": "PHPMailer-getReplyToAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->getReplyToAddresses();"
        },
        {
            "trigger": "PHPMailer-getSentMIMEMessage\tWP Class Method",
            "contents": "${1:PHPMailer}->getSentMIMEMessage();"
        },
        {
            "trigger": "PHPMailer-getSMTPInstance\tWP Class Method",
            "contents": "${1:PHPMailer}->getSMTPInstance();"
        },
        {
            "trigger": "PHPMailer-getToAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->getToAddresses();"
        },
        {
            "trigger": "PHPMailer-getTranslations\tWP Class Method",
            "contents": "${1:PHPMailer}->getTranslations();"
        },
        {
            "trigger": "PHPMailer-has8bitChars\tWP Class Method",
            "contents": "${1:PHPMailer}->has8bitChars( ${2:\\$text} );"
        },
        {
            "trigger": "PHPMailer-hasLineLongerThanMax\tWP Class Method",
            "contents": "${1:PHPMailer}::hasLineLongerThanMax( ${2:\\$str} );"
        },
        {
            "trigger": "PHPMailer-hasMultiBytes\tWP Class Method",
            "contents": "${1:PHPMailer}->hasMultiBytes( ${2:\\$str} );"
        },
        {
            "trigger": "PHPMailer-headerLine\tWP Class Method",
            "contents": "${1:PHPMailer}->headerLine( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "PHPMailer-html2text\tWP Class Method",
            "contents": "${1:PHPMailer}->html2text( ${2:\\$html}, ${3:\\$advanced} );"
        },
        {
            "trigger": "PHPMailer-idnSupported\tWP Class Method",
            "contents": "${1:PHPMailer}->idnSupported();"
        },
        {
            "trigger": "PHPMailer-inlineImageExists\tWP Class Method",
            "contents": "${1:PHPMailer}->inlineImageExists();"
        },
        {
            "trigger": "PHPMailer-isError\tWP Class Method",
            "contents": "${1:PHPMailer}->isError();"
        },
        {
            "trigger": "PHPMailer-isHTML\tWP Class Method",
            "contents": "${1:PHPMailer}->isHTML( ${2:\\$isHtml} );"
        },
        {
            "trigger": "PHPMailer-isMail\tWP Class Method",
            "contents": "${1:PHPMailer}->isMail();"
        },
        {
            "trigger": "PHPMailer-isQmail\tWP Class Method",
            "contents": "${1:PHPMailer}->isQmail();"
        },
        {
            "trigger": "PHPMailer-isSendmail\tWP Class Method",
            "contents": "${1:PHPMailer}->isSendmail();"
        },
        {
            "trigger": "PHPMailer-isSMTP\tWP Class Method",
            "contents": "${1:PHPMailer}->isSMTP();"
        },
        {
            "trigger": "PHPMailer-mb_pathinfo\tWP Class Method",
            "contents": "${1:PHPMailer}::mb_pathinfo( ${2:\\$path}, ${3:\\$options} );"
        },
        {
            "trigger": "PHPMailer-msgHTML\tWP Class Method",
            "contents": "${1:PHPMailer}->msgHTML( ${2:\\$message}, ${3:\\$basedir}, ${4:\\$advanced} );"
        },
        {
            "trigger": "PHPMailer-normalizeBreaks\tWP Class Method",
            "contents": "${1:PHPMailer}::normalizeBreaks( ${2:\\$text}, ${3:\\$breaktype} );"
        },
        {
            "trigger": "PHPMailer-parseAddresses\tWP Class Method",
            "contents": "${1:PHPMailer}->parseAddresses( ${2:\\$addrstr}, ${3:\\$useimap} );"
        },
        {
            "trigger": "PHPMailer-postSend\tWP Class Method",
            "contents": "${1:PHPMailer}->postSend();"
        },
        {
            "trigger": "PHPMailer-preSend\tWP Class Method",
            "contents": "${1:PHPMailer}->preSend();"
        },
        {
            "trigger": "PHPMailer-punyencodeAddress\tWP Class Method",
            "contents": "${1:PHPMailer}->punyencodeAddress( ${2:\\$address} );"
        },
        {
            "trigger": "PHPMailer-rfcDate\tWP Class Method",
            "contents": "${1:PHPMailer}::rfcDate();"
        },
        {
            "trigger": "PHPMailer-secureHeader\tWP Class Method",
            "contents": "${1:PHPMailer}->secureHeader( ${2:\\$str} );"
        },
        {
            "trigger": "PHPMailer-send\tWP Class Method",
            "contents": "${1:PHPMailer}->send();"
        },
        {
            "trigger": "PHPMailer-set\tWP Class Method",
            "contents": "${1:PHPMailer}->set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "PHPMailer-setFrom\tWP Class Method",
            "contents": "${1:PHPMailer}->setFrom( ${2:\\$address}, ${3:\\$name}, ${4:\\$auto} );"
        },
        {
            "trigger": "PHPMailer-setLanguage\tWP Class Method",
            "contents": "${1:PHPMailer}->setLanguage( ${2:\\$langcode}, ${3:\\$lang_path} );"
        },
        {
            "trigger": "PHPMailer-setWordWrap\tWP Class Method",
            "contents": "${1:PHPMailer}->setWordWrap();"
        },
        {
            "trigger": "PHPMailer-sign\tWP Class Method",
            "contents": "${1:PHPMailer}->sign( ${2:\\$cert_filename}, ${3:\\$key_filename}, ${4:\\$key_pass}, ${5:\\$extracerts_filename} );"
        },
        {
            "trigger": "PHPMailer-smtpClose\tWP Class Method",
            "contents": "${1:PHPMailer}->smtpClose();"
        },
        {
            "trigger": "PHPMailer-smtpConnect\tWP Class Method",
            "contents": "${1:PHPMailer}->smtpConnect( ${2:\\$options} );"
        },
        {
            "trigger": "PHPMailer-textLine\tWP Class Method",
            "contents": "${1:PHPMailer}->textLine( ${2:\\$value} );"
        },
        {
            "trigger": "PHPMailer-utf8CharBoundary\tWP Class Method",
            "contents": "${1:PHPMailer}->utf8CharBoundary( ${2:\\$encodedText}, ${3:\\$maxLength} );"
        },
        {
            "trigger": "PHPMailer-validateAddress\tWP Class Method",
            "contents": "${1:PHPMailer}::validateAddress( ${2:\\$address}, ${3:\\$patternselect} );"
        },
        {
            "trigger": "PHPMailer-wrapText\tWP Class Method",
            "contents": "${1:PHPMailer}->wrapText( ${2:\\$message}, ${3:\\$length}, ${4:\\$qp_mode} );"
        },
        {
            "trigger": "phpmailerException-errorMessage\tWP Class Method",
            "contents": "${1:phpmailerException}->errorMessage();"
        },
        {
            "trigger": "Plugin_Installer_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Plugin_Installer_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "Plugin_Installer_Skin-after\tWP Class Method",
            "contents": "${1:Plugin_Installer_Skin}->after();"
        },
        {
            "trigger": "Plugin_Installer_Skin-before\tWP Class Method",
            "contents": "${1:Plugin_Installer_Skin}->before();"
        },
        {
            "trigger": "Plugin_Upgrader_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Plugin_Upgrader_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "Plugin_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:Plugin_Upgrader_Skin}->after();"
        },
        {
            "trigger": "Plugin_Upgrader-active_after\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->active_after( ${2:\\$return}, ${3:\\$plugin} );"
        },
        {
            "trigger": "Plugin_Upgrader-active_before\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->active_before( ${2:\\$return}, ${3:\\$plugin} );"
        },
        {
            "trigger": "Plugin_Upgrader-bulk_upgrade\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->bulk_upgrade( ${2:\\$plugins}, ${3:\\$args} );"
        },
        {
            "trigger": "Plugin_Upgrader-check_package\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->check_package( ${2:\\$source} );"
        },
        {
            "trigger": "Plugin_Upgrader-deactivate_plugin_before_upgrade\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->deactivate_plugin_before_upgrade( ${2:\\$return}, ${3:\\$plugin} );"
        },
        {
            "trigger": "Plugin_Upgrader-delete_old_plugin\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->delete_old_plugin( ${2:\\$removed}, ${3:\\$local_destination}, ${4:\\$remote_destination}, ${5:\\$plugin} );"
        },
        {
            "trigger": "Plugin_Upgrader-install\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->install( ${2:\\$package}, ${3:\\$args} );"
        },
        {
            "trigger": "Plugin_Upgrader-install_strings\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->install_strings();"
        },
        {
            "trigger": "Plugin_Upgrader-plugin_info\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->plugin_info();"
        },
        {
            "trigger": "Plugin_Upgrader-upgrade\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->upgrade( ${2:\\$plugin}, ${3:\\$args} );"
        },
        {
            "trigger": "Plugin_Upgrader-upgrade_strings\tWP Class Method",
            "contents": "${1:Plugin_Upgrader}->upgrade_strings();"
        },
        {
            "trigger": "Plural_Forms-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Plural_Forms( ${3:\\$str} );"
        },
        {
            "trigger": "Plural_Forms-execute\tWP Class Method",
            "contents": "${1:Plural_Forms}->execute( ${2:\\$n} );"
        },
        {
            "trigger": "Plural_Forms-get\tWP Class Method",
            "contents": "${1:Plural_Forms}->get( ${2:\\$num} );"
        },
        {
            "trigger": "PO-add_comment_to_entry\tWP Class Method",
            "contents": "${1:PO}->add_comment_to_entry( ${2:\\$entry}, ${3:\\$po_comment_line} );"
        },
        {
            "trigger": "PO-comment_block\tWP Class Method",
            "contents": "${1:PO}::comment_block( ${2:\\$text}, ${3:\\$char} );"
        },
        {
            "trigger": "PO-export\tWP Class Method",
            "contents": "${1:PO}->export( ${2:\\$include_headers} );"
        },
        {
            "trigger": "PO-export_entries\tWP Class Method",
            "contents": "${1:PO}->export_entries();"
        },
        {
            "trigger": "PO-export_entry\tWP Class Method",
            "contents": "${1:PO}::export_entry( ${2:\\$entry} );"
        },
        {
            "trigger": "PO-export_headers\tWP Class Method",
            "contents": "${1:PO}->export_headers();"
        },
        {
            "trigger": "PO-export_to_file\tWP Class Method",
            "contents": "${1:PO}->export_to_file( ${2:\\$filename}, ${3:\\$include_headers} );"
        },
        {
            "trigger": "PO-import_from_file\tWP Class Method",
            "contents": "${1:PO}->import_from_file( ${2:\\$filename} );"
        },
        {
            "trigger": "PO-match_begin_and_end_newlines\tWP Class Method",
            "contents": "${1:PO}::match_begin_and_end_newlines( ${2:\\$translation}, ${3:\\$original} );"
        },
        {
            "trigger": "PO-poify\tWP Class Method",
            "contents": "${1:PO}::poify( ${2:\\$string} );"
        },
        {
            "trigger": "PO-prepend_each_line\tWP Class Method",
            "contents": "${1:PO}::prepend_each_line( ${2:\\$string}, ${3:\\$with} );"
        },
        {
            "trigger": "PO-read_entry\tWP Class Method",
            "contents": "${1:PO}->read_entry( ${2:\\$f}, ${3:\\$lineno} );"
        },
        {
            "trigger": "PO-read_line\tWP Class Method",
            "contents": "${1:PO}->read_line( ${2:\\$f}, ${3:\\$action} );"
        },
        {
            "trigger": "PO-set_comment_before_headers\tWP Class Method",
            "contents": "${1:PO}->set_comment_before_headers( ${2:\\$text} );"
        },
        {
            "trigger": "PO-trim_quotes\tWP Class Method",
            "contents": "${1:PO}::trim_quotes( ${2:\\$s} );"
        },
        {
            "trigger": "PO-unpoify\tWP Class Method",
            "contents": "${1:PO}::unpoify( ${2:\\$string} );"
        },
        {
            "trigger": "POMO_CachedFileReader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new POMO_CachedFileReader( ${3:\\$filename} );"
        },
        {
            "trigger": "POMO_CachedIntFileReader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new POMO_CachedIntFileReader( ${3:\\$filename} );"
        },
        {
            "trigger": "POMO_FileReader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new POMO_FileReader( ${3:\\$filename} );"
        },
        {
            "trigger": "POMO_FileReader-close\tWP Class Method",
            "contents": "${1:POMO_FileReader}->close();"
        },
        {
            "trigger": "POMO_FileReader-feof\tWP Class Method",
            "contents": "${1:POMO_FileReader}->feof();"
        },
        {
            "trigger": "POMO_FileReader-is_resource\tWP Class Method",
            "contents": "${1:POMO_FileReader}->is_resource();"
        },
        {
            "trigger": "POMO_FileReader-read\tWP Class Method",
            "contents": "${1:POMO_FileReader}->read( ${2:\\$bytes} );"
        },
        {
            "trigger": "POMO_FileReader-read_all\tWP Class Method",
            "contents": "${1:POMO_FileReader}->read_all();"
        },
        {
            "trigger": "POMO_FileReader-seekto\tWP Class Method",
            "contents": "${1:POMO_FileReader}->seekto( ${2:\\$pos} );"
        },
        {
            "trigger": "POMO_Reader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new POMO_Reader();"
        },
        {
            "trigger": "POMO_Reader-close\tWP Class Method",
            "contents": "${1:POMO_Reader}->close();"
        },
        {
            "trigger": "POMO_Reader-is_resource\tWP Class Method",
            "contents": "${1:POMO_Reader}->is_resource();"
        },
        {
            "trigger": "POMO_Reader-pos\tWP Class Method",
            "contents": "${1:POMO_Reader}->pos();"
        },
        {
            "trigger": "POMO_Reader-readint32\tWP Class Method",
            "contents": "${1:POMO_Reader}->readint32();"
        },
        {
            "trigger": "POMO_Reader-readint32array\tWP Class Method",
            "contents": "${1:POMO_Reader}->readint32array( ${2:\\$count} );"
        },
        {
            "trigger": "POMO_Reader-setEndian\tWP Class Method",
            "contents": "${1:POMO_Reader}->setEndian( ${2:\\$endian} );"
        },
        {
            "trigger": "POMO_Reader-str_split\tWP Class Method",
            "contents": "${1:POMO_Reader}->str_split( ${2:\\$string}, ${3:\\$chunk_size} );"
        },
        {
            "trigger": "POMO_Reader-strlen\tWP Class Method",
            "contents": "${1:POMO_Reader}->strlen( ${2:\\$string} );"
        },
        {
            "trigger": "POMO_Reader-substr\tWP Class Method",
            "contents": "${1:POMO_Reader}->substr( ${2:\\$string}, ${3:\\$start}, ${4:\\$length} );"
        },
        {
            "trigger": "POMO_StringReader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new POMO_StringReader( ${3:\\$str} );"
        },
        {
            "trigger": "POMO_StringReader-length\tWP Class Method",
            "contents": "${1:POMO_StringReader}->length();"
        },
        {
            "trigger": "POMO_StringReader-read\tWP Class Method",
            "contents": "${1:POMO_StringReader}->read( ${2:\\$bytes} );"
        },
        {
            "trigger": "POMO_StringReader-read_all\tWP Class Method",
            "contents": "${1:POMO_StringReader}->read_all();"
        },
        {
            "trigger": "POMO_StringReader-seekto\tWP Class Method",
            "contents": "${1:POMO_StringReader}->seekto( ${2:\\$pos} );"
        },
        {
            "trigger": "POP3-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new POP3( ${3:\\$server}, ${4:\\$timeout} );"
        },
        {
            "trigger": "POP3-apop\tWP Class Method",
            "contents": "${1:POP3}->apop( ${2:\\$login}, ${3:\\$pass} );"
        },
        {
            "trigger": "POP3-connect\tWP Class Method",
            "contents": "${1:POP3}->connect( ${2:\\$server}, ${3:\\$port} );"
        },
        {
            "trigger": "POP3-delete\tWP Class Method",
            "contents": "${1:POP3}->delete( ${2:\\$msgNum} );"
        },
        {
            "trigger": "POP3-get\tWP Class Method",
            "contents": "${1:POP3}->get( ${2:\\$msgNum} );"
        },
        {
            "trigger": "POP3-is_ok\tWP Class Method",
            "contents": "${1:POP3}->is_ok( ${2:\\$cmd} );"
        },
        {
            "trigger": "POP3-last\tWP Class Method",
            "contents": "${1:POP3}->last( ${2:\\$type} );"
        },
        {
            "trigger": "POP3-login\tWP Class Method",
            "contents": "${1:POP3}->login( ${2:\\$login}, ${3:\\$pass} );"
        },
        {
            "trigger": "POP3-parse_banner\tWP Class Method",
            "contents": "${1:POP3}->parse_banner( ${2:\\$server_text} );"
        },
        {
            "trigger": "POP3-pass\tWP Class Method",
            "contents": "${1:POP3}->pass( ${2:\\$pass} );"
        },
        {
            "trigger": "POP3-pop_list\tWP Class Method",
            "contents": "${1:POP3}->pop_list( ${2:\\$msgNum} );"
        },
        {
            "trigger": "POP3-POP3\tWP Class Method",
            "contents": "${1:POP3}->POP3( ${2:\\$server}, ${3:\\$timeout} );"
        },
        {
            "trigger": "POP3-popstat\tWP Class Method",
            "contents": "${1:POP3}->popstat();"
        },
        {
            "trigger": "POP3-quit\tWP Class Method",
            "contents": "${1:POP3}->quit();"
        },
        {
            "trigger": "POP3-reset\tWP Class Method",
            "contents": "${1:POP3}->reset();"
        },
        {
            "trigger": "POP3-send_cmd\tWP Class Method",
            "contents": "${1:POP3}->send_cmd( ${2:\\$cmd} );"
        },
        {
            "trigger": "POP3-strip_clf\tWP Class Method",
            "contents": "${1:POP3}->strip_clf( ${2:\\$text} );"
        },
        {
            "trigger": "POP3-top\tWP Class Method",
            "contents": "${1:POP3}->top( ${2:\\$msgNum}, ${3:\\$numLines} );"
        },
        {
            "trigger": "POP3-uidl\tWP Class Method",
            "contents": "${1:POP3}->uidl( ${2:\\$msgNum} );"
        },
        {
            "trigger": "POP3-update_timer\tWP Class Method",
            "contents": "${1:POP3}->update_timer();"
        },
        {
            "trigger": "POP3-user\tWP Class Method",
            "contents": "${1:POP3}->user( ${2:\\$user} );"
        },
        {
            "trigger": "Requests_Auth_Basic-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Auth_Basic( ${3:\\$args} );"
        },
        {
            "trigger": "Requests_Auth_Basic-curl_before_send\tWP Class Method",
            "contents": "${1:Requests_Auth_Basic}->curl_before_send( ${2:\\$handle} );"
        },
        {
            "trigger": "Requests_Auth_Basic-fsockopen_header\tWP Class Method",
            "contents": "${1:Requests_Auth_Basic}->fsockopen_header( ${2:\\$out} );"
        },
        {
            "trigger": "Requests_Auth_Basic-getAuthString\tWP Class Method",
            "contents": "${1:Requests_Auth_Basic}->getAuthString();"
        },
        {
            "trigger": "Requests_Auth_Basic-register\tWP Class Method",
            "contents": "${1:Requests_Auth_Basic}->register( ${2:\\$hooks} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Cookie_Jar( ${3:\\$cookies} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-before_redirect_check\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->before_redirect_check( ${2:\\$return} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-before_request\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->before_request( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$type}, ${6:\\$options} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-getIterator\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->getIterator();"
        },
        {
            "trigger": "Requests_Cookie_Jar-normalize_cookie\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->normalize_cookie( ${2:\\$cookie}, ${3:\\$key} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-offsetExists\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->offsetExists( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-offsetGet\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->offsetGet( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-offsetSet\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->offsetSet( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-offsetUnset\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->offsetUnset( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Cookie_Jar-register\tWP Class Method",
            "contents": "${1:Requests_Cookie_Jar}->register( ${2:\\$hooks} );"
        },
        {
            "trigger": "Requests_Cookie-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Cookie( ${3:\\$name}, ${4:\\$value}, ${5:\\$attributes}, ${6:\\$flags}, ${7:\\$reference_time} );"
        },
        {
            "trigger": "Requests_Cookie-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_Cookie}->__toString();"
        },
        {
            "trigger": "Requests_Cookie-domain_matches\tWP Class Method",
            "contents": "${1:Requests_Cookie}->domain_matches( ${2:\\$string} );"
        },
        {
            "trigger": "Requests_Cookie-format_for_header\tWP Class Method",
            "contents": "${1:Requests_Cookie}->format_for_header();"
        },
        {
            "trigger": "Requests_Cookie-format_for_set_cookie\tWP Class Method",
            "contents": "${1:Requests_Cookie}->format_for_set_cookie();"
        },
        {
            "trigger": "Requests_Cookie-is_expired\tWP Class Method",
            "contents": "${1:Requests_Cookie}->is_expired();"
        },
        {
            "trigger": "Requests_Cookie-normalize\tWP Class Method",
            "contents": "${1:Requests_Cookie}->normalize();"
        },
        {
            "trigger": "Requests_Cookie-parse\tWP Class Method",
            "contents": "${1:Requests_Cookie}::parse( ${2:\\$string}, ${3:\\$name}, ${4:\\$reference_time} );"
        },
        {
            "trigger": "Requests_Cookie-parse_from_headers\tWP Class Method",
            "contents": "${1:Requests_Cookie}::parse_from_headers( ${2:\\$headers}, ${3:\\$origin}, ${4:\\$time} );"
        },
        {
            "trigger": "Requests_Cookie-path_matches\tWP Class Method",
            "contents": "${1:Requests_Cookie}->path_matches( ${2:\\$request_path} );"
        },
        {
            "trigger": "Requests_Cookie-uri_matches\tWP Class Method",
            "contents": "${1:Requests_Cookie}->uri_matches( ${2:\\$uri} );"
        },
        {
            "trigger": "Requests_Exception_HTTP_Unknown-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Exception_HTTP_Unknown( ${3:\\$reason}, ${4:\\$data} );"
        },
        {
            "trigger": "Requests_Exception_HTTP-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Exception_HTTP( ${3:\\$reason}, ${4:\\$data} );"
        },
        {
            "trigger": "Requests_Exception_HTTP-get_class\tWP Class Method",
            "contents": "${1:Requests_Exception_HTTP}::get_class( ${2:\\$code} );"
        },
        {
            "trigger": "Requests_Exception_HTTP-getReason\tWP Class Method",
            "contents": "${1:Requests_Exception_HTTP}->getReason();"
        },
        {
            "trigger": "Requests_Exception_Transport_cURL-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Exception_Transport_cURL( ${3:\\$message}, ${4:\\$type}, ${5:\\$data}, ${6:\\$code} );"
        },
        {
            "trigger": "Requests_Exception_Transport_cURL-getReason\tWP Class Method",
            "contents": "${1:Requests_Exception_Transport_cURL}->getReason();"
        },
        {
            "trigger": "Requests_Exception-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Exception( ${3:\\$message}, ${4:\\$type}, ${5:\\$data}, ${6:\\$code} );"
        },
        {
            "trigger": "Requests_Exception-getData\tWP Class Method",
            "contents": "${1:Requests_Exception}->getData();"
        },
        {
            "trigger": "Requests_Exception-getType\tWP Class Method",
            "contents": "${1:Requests_Exception}->getType();"
        },
        {
            "trigger": "Requests_Hooks-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Hooks();"
        },
        {
            "trigger": "Requests_Hooks-dispatch\tWP Class Method",
            "contents": "${1:Requests_Hooks}->dispatch( ${2:\\$hook}, ${3:\\$parameters} );"
        },
        {
            "trigger": "Requests_Hooks-register\tWP Class Method",
            "contents": "${1:Requests_Hooks}->register( ${2:\\$hook}, ${3:\\$callback}, ${4:\\$priority} );"
        },
        {
            "trigger": "Requests_IDNAEncoder-encode\tWP Class Method",
            "contents": "${1:Requests_IDNAEncoder}::encode( ${2:\\$string} );"
        },
        {
            "trigger": "Requests_IDNAEncoder-punycode_encode\tWP Class Method",
            "contents": "${1:Requests_IDNAEncoder}::punycode_encode( ${2:\\$input} );"
        },
        {
            "trigger": "Requests_IDNAEncoder-to_ascii\tWP Class Method",
            "contents": "${1:Requests_IDNAEncoder}::to_ascii( ${2:\\$string} );"
        },
        {
            "trigger": "Requests_IPv6-check_ipv6\tWP Class Method",
            "contents": "${1:Requests_IPv6}::check_ipv6( ${2:\\$ip} );"
        },
        {
            "trigger": "Requests_IPv6-compress\tWP Class Method",
            "contents": "${1:Requests_IPv6}::compress( ${2:\\$ip} );"
        },
        {
            "trigger": "Requests_IPv6-uncompress\tWP Class Method",
            "contents": "${1:Requests_IPv6}::uncompress( ${2:\\$ip} );"
        },
        {
            "trigger": "Requests_IRI-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_IRI( ${3:\\$iri} );"
        },
        {
            "trigger": "Requests_IRI-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_IRI}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "Requests_IRI-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_IRI}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "Requests_IRI-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_IRI}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "Requests_IRI-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_IRI}->__toString();"
        },
        {
            "trigger": "Requests_IRI-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_IRI}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "Requests_IRI-absolutize\tWP Class Method",
            "contents": "${1:Requests_IRI}::absolutize( ${2:\\$base}, ${3:\\$relative} );"
        },
        {
            "trigger": "Requests_IRI-is_valid\tWP Class Method",
            "contents": "${1:Requests_IRI}->is_valid();"
        },
        {
            "trigger": "Requests_Proxy_HTTP-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Proxy_HTTP( ${3:\\$args} );"
        },
        {
            "trigger": "Requests_Proxy_HTTP-curl_before_send\tWP Class Method",
            "contents": "${1:Requests_Proxy_HTTP}->curl_before_send( ${2:\\$handle} );"
        },
        {
            "trigger": "Requests_Proxy_HTTP-fsockopen_header\tWP Class Method",
            "contents": "${1:Requests_Proxy_HTTP}->fsockopen_header( ${2:\\$out} );"
        },
        {
            "trigger": "Requests_Proxy_HTTP-fsockopen_remote_host_path\tWP Class Method",
            "contents": "${1:Requests_Proxy_HTTP}->fsockopen_remote_host_path( ${2:\\$path}, ${3:\\$url} );"
        },
        {
            "trigger": "Requests_Proxy_HTTP-fsockopen_remote_socket\tWP Class Method",
            "contents": "${1:Requests_Proxy_HTTP}->fsockopen_remote_socket( ${2:\\$remote_socket} );"
        },
        {
            "trigger": "Requests_Proxy_HTTP-get_auth_string\tWP Class Method",
            "contents": "${1:Requests_Proxy_HTTP}->get_auth_string();"
        },
        {
            "trigger": "Requests_Proxy_HTTP-register\tWP Class Method",
            "contents": "${1:Requests_Proxy_HTTP}->register( ${2:\\$hooks} );"
        },
        {
            "trigger": "Requests_Response_Headers-flatten\tWP Class Method",
            "contents": "${1:Requests_Response_Headers}->flatten( ${2:\\$value} );"
        },
        {
            "trigger": "Requests_Response_Headers-getIterator\tWP Class Method",
            "contents": "${1:Requests_Response_Headers}->getIterator();"
        },
        {
            "trigger": "Requests_Response_Headers-getValues\tWP Class Method",
            "contents": "${1:Requests_Response_Headers}->getValues( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Response_Headers-offsetGet\tWP Class Method",
            "contents": "${1:Requests_Response_Headers}->offsetGet( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Response_Headers-offsetSet\tWP Class Method",
            "contents": "${1:Requests_Response_Headers}->offsetSet( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "Requests_Response-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Response();"
        },
        {
            "trigger": "Requests_Response-is_redirect\tWP Class Method",
            "contents": "${1:Requests_Response}->is_redirect();"
        },
        {
            "trigger": "Requests_Response-throw_for_status\tWP Class Method",
            "contents": "${1:Requests_Response}->throw_for_status( ${2:\\$allow_redirects} );"
        },
        {
            "trigger": "Requests_Session-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Session( ${3:\\$url}, ${4:\\$headers}, ${5:\\$data}, ${6:\\$options} );"
        },
        {
            "trigger": "Requests_Session-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_Session}->__get( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Session-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_Session}->__isset( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Session-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_Session}->__set( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "Requests_Session-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Requests_Session}->__unset( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Session-delete\tWP Class Method",
            "contents": "${1:Requests_Session}->delete( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "Requests_Session-get\tWP Class Method",
            "contents": "${1:Requests_Session}->get( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "Requests_Session-head\tWP Class Method",
            "contents": "${1:Requests_Session}->head( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "Requests_Session-patch\tWP Class Method",
            "contents": "${1:Requests_Session}->patch( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests_Session-post\tWP Class Method",
            "contents": "${1:Requests_Session}->post( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests_Session-put\tWP Class Method",
            "contents": "${1:Requests_Session}->put( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests_Session-request\tWP Class Method",
            "contents": "${1:Requests_Session}->request( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$type}, ${6:\\$options} );"
        },
        {
            "trigger": "Requests_Session-request_multiple\tWP Class Method",
            "contents": "${1:Requests_Session}->request_multiple( ${2:\\$requests}, ${3:\\$options} );"
        },
        {
            "trigger": "Requests_SSL-match_domain\tWP Class Method",
            "contents": "${1:Requests_SSL}::match_domain( ${2:\\$host}, ${3:\\$reference} );"
        },
        {
            "trigger": "Requests_SSL-verify_certificate\tWP Class Method",
            "contents": "${1:Requests_SSL}::verify_certificate( ${2:\\$host}, ${3:\\$cert} );"
        },
        {
            "trigger": "Requests_SSL-verify_reference_name\tWP Class Method",
            "contents": "${1:Requests_SSL}::verify_reference_name( ${2:\\$reference} );"
        },
        {
            "trigger": "Requests_Transport_cURL-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Transport_cURL();"
        },
        {
            "trigger": "Requests_Transport_cURL-__destruct\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->__destruct();"
        },
        {
            "trigger": "Requests_Transport_cURL-get_subrequest_handle\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->get_subrequest_handle( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests_Transport_cURL-process_response\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->process_response( ${2:\\$response}, ${3:\\$options} );"
        },
        {
            "trigger": "Requests_Transport_cURL-request\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->request( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests_Transport_cURL-request_multiple\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->request_multiple( ${2:\\$requests}, ${3:\\$options} );"
        },
        {
            "trigger": "Requests_Transport_cURL-stream_body\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->stream_body( ${2:\\$handle}, ${3:\\$data} );"
        },
        {
            "trigger": "Requests_Transport_cURL-stream_headers\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}->stream_headers( ${2:\\$handle}, ${3:\\$headers} );"
        },
        {
            "trigger": "Requests_Transport_cURL-test\tWP Class Method",
            "contents": "${1:Requests_Transport_cURL}::test( ${2:\\$capabilities} );"
        },
        {
            "trigger": "Requests_Transport_fsockopen-connect_error_handler\tWP Class Method",
            "contents": "${1:Requests_Transport_fsockopen}->connect_error_handler( ${2:\\$errno}, ${3:\\$errstr} );"
        },
        {
            "trigger": "Requests_Transport_fsockopen-request\tWP Class Method",
            "contents": "${1:Requests_Transport_fsockopen}->request( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests_Transport_fsockopen-request_multiple\tWP Class Method",
            "contents": "${1:Requests_Transport_fsockopen}->request_multiple( ${2:\\$requests}, ${3:\\$options} );"
        },
        {
            "trigger": "Requests_Transport_fsockopen-test\tWP Class Method",
            "contents": "${1:Requests_Transport_fsockopen}::test( ${2:\\$capabilities} );"
        },
        {
            "trigger": "Requests_Transport_fsockopen-verify_certificate_from_context\tWP Class Method",
            "contents": "${1:Requests_Transport_fsockopen}->verify_certificate_from_context( ${2:\\$host}, ${3:\\$context} );"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Utility_CaseInsensitiveDictionary( ${3:\\$data} );"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-getAll\tWP Class Method",
            "contents": "${1:Requests_Utility_CaseInsensitiveDictionary}->getAll();"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-getIterator\tWP Class Method",
            "contents": "${1:Requests_Utility_CaseInsensitiveDictionary}->getIterator();"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-offsetExists\tWP Class Method",
            "contents": "${1:Requests_Utility_CaseInsensitiveDictionary}->offsetExists( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-offsetGet\tWP Class Method",
            "contents": "${1:Requests_Utility_CaseInsensitiveDictionary}->offsetGet( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-offsetSet\tWP Class Method",
            "contents": "${1:Requests_Utility_CaseInsensitiveDictionary}->offsetSet( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "Requests_Utility_CaseInsensitiveDictionary-offsetUnset\tWP Class Method",
            "contents": "${1:Requests_Utility_CaseInsensitiveDictionary}->offsetUnset( ${2:\\$key} );"
        },
        {
            "trigger": "Requests_Utility_FilteredIterator-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Requests_Utility_FilteredIterator( ${3:\\$data}, ${4:\\$callback} );"
        },
        {
            "trigger": "Requests_Utility_FilteredIterator-current\tWP Class Method",
            "contents": "${1:Requests_Utility_FilteredIterator}->current();"
        },
        {
            "trigger": "Requests-add_transport\tWP Class Method",
            "contents": "${1:Requests}::add_transport( ${2:\\$transport} );"
        },
        {
            "trigger": "Requests-autoloader\tWP Class Method",
            "contents": "${1:Requests}::autoloader( ${2:\\$class} );"
        },
        {
            "trigger": "Requests-compatible_gzinflate\tWP Class Method",
            "contents": "${1:Requests}::compatible_gzinflate( ${2:\\$gzData} );"
        },
        {
            "trigger": "Requests-decompress\tWP Class Method",
            "contents": "${1:Requests}::decompress( ${2:\\$data} );"
        },
        {
            "trigger": "Requests-delete\tWP Class Method",
            "contents": "${1:Requests}::delete( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "Requests-flatten\tWP Class Method",
            "contents": "${1:Requests}::flatten( ${2:\\$array} );"
        },
        {
            "trigger": "Requests-get\tWP Class Method",
            "contents": "${1:Requests}::get( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "Requests-get_certificate_path\tWP Class Method",
            "contents": "${1:Requests}::get_certificate_path();"
        },
        {
            "trigger": "Requests-head\tWP Class Method",
            "contents": "${1:Requests}::head( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "Requests-match_domain\tWP Class Method",
            "contents": "${1:Requests}::match_domain( ${2:\\$host}, ${3:\\$reference} );"
        },
        {
            "trigger": "Requests-options\tWP Class Method",
            "contents": "${1:Requests}::options( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests-parse_multiple\tWP Class Method",
            "contents": "${1:Requests}::parse_multiple( ${2:\\$response}, ${3:\\$request} );"
        },
        {
            "trigger": "Requests-patch\tWP Class Method",
            "contents": "${1:Requests}::patch( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests-post\tWP Class Method",
            "contents": "${1:Requests}::post( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests-put\tWP Class Method",
            "contents": "${1:Requests}::put( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options} );"
        },
        {
            "trigger": "Requests-register_autoloader\tWP Class Method",
            "contents": "${1:Requests}::register_autoloader();"
        },
        {
            "trigger": "Requests-request\tWP Class Method",
            "contents": "${1:Requests}::request( ${2:\\$url}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$type}, ${6:\\$options} );"
        },
        {
            "trigger": "Requests-request_multiple\tWP Class Method",
            "contents": "${1:Requests}::request_multiple( ${2:\\$requests}, ${3:\\$options} );"
        },
        {
            "trigger": "Requests-set_certificate_path\tWP Class Method",
            "contents": "${1:Requests}::set_certificate_path( ${2:\\$path} );"
        },
        {
            "trigger": "Requests-trace\tWP Class Method",
            "contents": "${1:Requests}::trace( ${2:\\$url}, ${3:\\$headers}, ${4:\\$options} );"
        },
        {
            "trigger": "SimplePie_Author-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Author( ${3:\\$name}, ${4:\\$link}, ${5:\\$email} );"
        },
        {
            "trigger": "SimplePie_Author-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Author}->__toString();"
        },
        {
            "trigger": "SimplePie_Author-get_email\tWP Class Method",
            "contents": "${1:SimplePie_Author}->get_email();"
        },
        {
            "trigger": "SimplePie_Author-get_link\tWP Class Method",
            "contents": "${1:SimplePie_Author}->get_link();"
        },
        {
            "trigger": "SimplePie_Author-get_name\tWP Class Method",
            "contents": "${1:SimplePie_Author}->get_name();"
        },
        {
            "trigger": "SimplePie_Cache_File-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Cache_File( ${3:\\$location}, ${4:\\$name}, ${5:\\$type} );"
        },
        {
            "trigger": "SimplePie_Cache_File-load\tWP Class Method",
            "contents": "${1:SimplePie_Cache_File}->load();"
        },
        {
            "trigger": "SimplePie_Cache_File-mtime\tWP Class Method",
            "contents": "${1:SimplePie_Cache_File}->mtime();"
        },
        {
            "trigger": "SimplePie_Cache_File-save\tWP Class Method",
            "contents": "${1:SimplePie_Cache_File}->save( ${2:\\$data} );"
        },
        {
            "trigger": "SimplePie_Cache_File-touch\tWP Class Method",
            "contents": "${1:SimplePie_Cache_File}->touch();"
        },
        {
            "trigger": "SimplePie_Cache_File-unlink\tWP Class Method",
            "contents": "${1:SimplePie_Cache_File}->unlink();"
        },
        {
            "trigger": "SimplePie_Cache_Memcache-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Cache_Memcache( ${3:\\$location}, ${4:\\$name}, ${5:\\$type} );"
        },
        {
            "trigger": "SimplePie_Cache_Memcache-load\tWP Class Method",
            "contents": "${1:SimplePie_Cache_Memcache}->load();"
        },
        {
            "trigger": "SimplePie_Cache_Memcache-mtime\tWP Class Method",
            "contents": "${1:SimplePie_Cache_Memcache}->mtime();"
        },
        {
            "trigger": "SimplePie_Cache_Memcache-save\tWP Class Method",
            "contents": "${1:SimplePie_Cache_Memcache}->save( ${2:\\$data} );"
        },
        {
            "trigger": "SimplePie_Cache_Memcache-touch\tWP Class Method",
            "contents": "${1:SimplePie_Cache_Memcache}->touch();"
        },
        {
            "trigger": "SimplePie_Cache_Memcache-unlink\tWP Class Method",
            "contents": "${1:SimplePie_Cache_Memcache}->unlink();"
        },
        {
            "trigger": "SimplePie_Cache_MySQL-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Cache_MySQL( ${3:\\$location}, ${4:\\$name}, ${5:\\$type} );"
        },
        {
            "trigger": "SimplePie_Cache_MySQL-load\tWP Class Method",
            "contents": "${1:SimplePie_Cache_MySQL}->load();"
        },
        {
            "trigger": "SimplePie_Cache_MySQL-mtime\tWP Class Method",
            "contents": "${1:SimplePie_Cache_MySQL}->mtime();"
        },
        {
            "trigger": "SimplePie_Cache_MySQL-save\tWP Class Method",
            "contents": "${1:SimplePie_Cache_MySQL}->save( ${2:\\$data} );"
        },
        {
            "trigger": "SimplePie_Cache_MySQL-touch\tWP Class Method",
            "contents": "${1:SimplePie_Cache_MySQL}->touch();"
        },
        {
            "trigger": "SimplePie_Cache_MySQL-unlink\tWP Class Method",
            "contents": "${1:SimplePie_Cache_MySQL}->unlink();"
        },
        {
            "trigger": "SimplePie_Cache-get_handler\tWP Class Method",
            "contents": "${1:SimplePie_Cache}::get_handler( ${2:\\$location}, ${3:\\$filename}, ${4:\\$extension} );"
        },
        {
            "trigger": "SimplePie_Cache-parse_URL\tWP Class Method",
            "contents": "${1:SimplePie_Cache}::parse_URL( ${2:\\$url} );"
        },
        {
            "trigger": "SimplePie_Cache-register\tWP Class Method",
            "contents": "${1:SimplePie_Cache}::register( ${2:\\$type}, ${3:\\$class} );"
        },
        {
            "trigger": "SimplePie_Caption-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Caption( ${3:\\$type}, ${4:\\$lang}, ${5:\\$startTime}, ${6:\\$endTime}, ${7:\\$text} );"
        },
        {
            "trigger": "SimplePie_Caption-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Caption}->__toString();"
        },
        {
            "trigger": "SimplePie_Caption-get_endtime\tWP Class Method",
            "contents": "${1:SimplePie_Caption}->get_endtime();"
        },
        {
            "trigger": "SimplePie_Caption-get_language\tWP Class Method",
            "contents": "${1:SimplePie_Caption}->get_language();"
        },
        {
            "trigger": "SimplePie_Caption-get_starttime\tWP Class Method",
            "contents": "${1:SimplePie_Caption}->get_starttime();"
        },
        {
            "trigger": "SimplePie_Caption-get_text\tWP Class Method",
            "contents": "${1:SimplePie_Caption}->get_text();"
        },
        {
            "trigger": "SimplePie_Caption-get_type\tWP Class Method",
            "contents": "${1:SimplePie_Caption}->get_type();"
        },
        {
            "trigger": "SimplePie_Category-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Category( ${3:\\$term}, ${4:\\$scheme}, ${5:\\$label} );"
        },
        {
            "trigger": "SimplePie_Category-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Category}->__toString();"
        },
        {
            "trigger": "SimplePie_Category-get_label\tWP Class Method",
            "contents": "${1:SimplePie_Category}->get_label();"
        },
        {
            "trigger": "SimplePie_Category-get_scheme\tWP Class Method",
            "contents": "${1:SimplePie_Category}->get_scheme();"
        },
        {
            "trigger": "SimplePie_Category-get_term\tWP Class Method",
            "contents": "${1:SimplePie_Category}->get_term();"
        },
        {
            "trigger": "SimplePie_Content_Type_Sniffer-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Content_Type_Sniffer( ${3:\\$file} );"
        },
        {
            "trigger": "SimplePie_Content_Type_Sniffer-feed_or_html\tWP Class Method",
            "contents": "${1:SimplePie_Content_Type_Sniffer}->feed_or_html();"
        },
        {
            "trigger": "SimplePie_Content_Type_Sniffer-get_type\tWP Class Method",
            "contents": "${1:SimplePie_Content_Type_Sniffer}->get_type();"
        },
        {
            "trigger": "SimplePie_Content_Type_Sniffer-image\tWP Class Method",
            "contents": "${1:SimplePie_Content_Type_Sniffer}->image();"
        },
        {
            "trigger": "SimplePie_Content_Type_Sniffer-text_or_binary\tWP Class Method",
            "contents": "${1:SimplePie_Content_Type_Sniffer}->text_or_binary();"
        },
        {
            "trigger": "SimplePie_Content_Type_Sniffer-unknown\tWP Class Method",
            "contents": "${1:SimplePie_Content_Type_Sniffer}->unknown();"
        },
        {
            "trigger": "SimplePie_Copyright-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Copyright( ${3:\\$url}, ${4:\\$label} );"
        },
        {
            "trigger": "SimplePie_Copyright-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Copyright}->__toString();"
        },
        {
            "trigger": "SimplePie_Copyright-get_attribution\tWP Class Method",
            "contents": "${1:SimplePie_Copyright}->get_attribution();"
        },
        {
            "trigger": "SimplePie_Copyright-get_url\tWP Class Method",
            "contents": "${1:SimplePie_Copyright}->get_url();"
        },
        {
            "trigger": "SimplePie_Credit-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Credit( ${3:\\$role}, ${4:\\$scheme}, ${5:\\$name} );"
        },
        {
            "trigger": "SimplePie_Credit-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Credit}->__toString();"
        },
        {
            "trigger": "SimplePie_Credit-get_name\tWP Class Method",
            "contents": "${1:SimplePie_Credit}->get_name();"
        },
        {
            "trigger": "SimplePie_Credit-get_role\tWP Class Method",
            "contents": "${1:SimplePie_Credit}->get_role();"
        },
        {
            "trigger": "SimplePie_Credit-get_scheme\tWP Class Method",
            "contents": "${1:SimplePie_Credit}->get_scheme();"
        },
        {
            "trigger": "SimplePie_Enclosure-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Enclosure( ${3:\\$link}, ${4:\\$type}, ${5:\\$length}, ${6:\\$javascript}, ${7:\\$bitrate}, ${8:\\$captions}, ${9:\\$categories}, ${10:\\$channels}, ${11:\\$copyright}, ${12:\\$credits}, ${13:\\$description}, ${14:\\$duration}, ${15:\\$expression}, ${16:\\$framerate}, ${17:\\$hashes}, ${18:\\$height}, ${19:\\$keywords}, ${20:\\$lang}, ${21:\\$medium}, ${22:\\$player}, ${23:\\$ratings}, ${24:\\$restrictions}, ${25:\\$samplingrate}, ${26:\\$thumbnails}, ${27:\\$title}, ${28:\\$width} );"
        },
        {
            "trigger": "SimplePie_Enclosure-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Enclosure}->__toString();"
        },
        {
            "trigger": "SimplePie_Enclosure-embed\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->embed( ${2:\\$options}, ${3:\\$native} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_bitrate\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_bitrate();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_caption\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_caption( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_captions\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_captions();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_categories\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_categories();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_category\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_category( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_channels\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_channels();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_copyright\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_copyright();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_credit\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_credit( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_credits\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_credits();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_description\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_description();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_duration\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_duration( ${2:\\$convert} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_expression\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_expression();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_extension\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_extension();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_framerate\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_framerate();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_handler\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_handler();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_hash\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_hash( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_hashes\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_hashes();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_height\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_height();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_keyword\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_keyword( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_keywords\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_keywords();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_language\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_language();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_length\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_length();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_link\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_link();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_medium\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_medium();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_player\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_player();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_rating\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_rating( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_ratings\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_ratings();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_real_type\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_real_type( ${2:\\$find_handler} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_restriction\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_restriction( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_restrictions\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_restrictions();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_sampling_rate\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_sampling_rate();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_size\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_size();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_thumbnail\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_thumbnail( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Enclosure-get_thumbnails\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_thumbnails();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_title\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_title();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_type\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_type();"
        },
        {
            "trigger": "SimplePie_Enclosure-get_width\tWP Class Method",
            "contents": "${1:SimplePie_Enclosure}->get_width();"
        },
        {
            "trigger": "SimplePie_File-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_File( ${3:\\$url}, ${4:\\$timeout}, ${5:\\$redirects}, ${6:\\$headers}, ${7:\\$useragent}, ${8:\\$force_fsockopen} );"
        },
        {
            "trigger": "SimplePie_gzdecode-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_gzdecode( ${3:\\$data} );"
        },
        {
            "trigger": "SimplePie_gzdecode-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_gzdecode}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "SimplePie_gzdecode-parse\tWP Class Method",
            "contents": "${1:SimplePie_gzdecode}->parse();"
        },
        {
            "trigger": "SimplePie_HTTP_Parser-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_HTTP_Parser( ${3:\\$data} );"
        },
        {
            "trigger": "SimplePie_HTTP_Parser-parse\tWP Class Method",
            "contents": "${1:SimplePie_HTTP_Parser}->parse();"
        },
        {
            "trigger": "SimplePie_IRI-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_IRI( ${3:\\$iri} );"
        },
        {
            "trigger": "SimplePie_IRI-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_IRI}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "SimplePie_IRI-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_IRI}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "SimplePie_IRI-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_IRI}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "SimplePie_IRI-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_IRI}->__toString();"
        },
        {
            "trigger": "SimplePie_IRI-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_IRI}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "SimplePie_IRI-absolutize\tWP Class Method",
            "contents": "${1:SimplePie_IRI}::absolutize( ${2:\\$base}, ${3:\\$relative} );"
        },
        {
            "trigger": "SimplePie_IRI-get_iri\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->get_iri();"
        },
        {
            "trigger": "SimplePie_IRI-get_uri\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->get_uri();"
        },
        {
            "trigger": "SimplePie_IRI-is_valid\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->is_valid();"
        },
        {
            "trigger": "SimplePie_IRI-set_authority\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_authority( ${2:\\$authority} );"
        },
        {
            "trigger": "SimplePie_IRI-set_fragment\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_fragment( ${2:\\$ifragment} );"
        },
        {
            "trigger": "SimplePie_IRI-set_host\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_host( ${2:\\$ihost} );"
        },
        {
            "trigger": "SimplePie_IRI-set_iri\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_iri( ${2:\\$iri} );"
        },
        {
            "trigger": "SimplePie_IRI-set_path\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_path( ${2:\\$ipath} );"
        },
        {
            "trigger": "SimplePie_IRI-set_port\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_port( ${2:\\$port} );"
        },
        {
            "trigger": "SimplePie_IRI-set_query\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_query( ${2:\\$iquery} );"
        },
        {
            "trigger": "SimplePie_IRI-set_scheme\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_scheme( ${2:\\$scheme} );"
        },
        {
            "trigger": "SimplePie_IRI-set_userinfo\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->set_userinfo( ${2:\\$iuserinfo} );"
        },
        {
            "trigger": "SimplePie_IRI-to_uri\tWP Class Method",
            "contents": "${1:SimplePie_IRI}->to_uri( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Item-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Item( ${3:\\$feed}, ${4:\\$data} );"
        },
        {
            "trigger": "SimplePie_Item-__destruct\tWP Class Method",
            "contents": "${1:SimplePie_Item}->__destruct();"
        },
        {
            "trigger": "SimplePie_Item-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Item}->__toString();"
        },
        {
            "trigger": "SimplePie_Item-get_author\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_author( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Item-get_authors\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_authors();"
        },
        {
            "trigger": "SimplePie_Item-get_base\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_base( ${2:\\$element} );"
        },
        {
            "trigger": "SimplePie_Item-get_categories\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_categories();"
        },
        {
            "trigger": "SimplePie_Item-get_category\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_category( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Item-get_content\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_content( ${2:\\$content_only} );"
        },
        {
            "trigger": "SimplePie_Item-get_contributor\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_contributor( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Item-get_contributors\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_contributors();"
        },
        {
            "trigger": "SimplePie_Item-get_copyright\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_copyright();"
        },
        {
            "trigger": "SimplePie_Item-get_date\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_date( ${2:\\$date_format} );"
        },
        {
            "trigger": "SimplePie_Item-get_description\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_description( ${2:\\$description_only} );"
        },
        {
            "trigger": "SimplePie_Item-get_enclosure\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_enclosure( ${2:\\$key}, ${3:\\$prefer} );"
        },
        {
            "trigger": "SimplePie_Item-get_enclosures\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_enclosures();"
        },
        {
            "trigger": "SimplePie_Item-get_feed\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_feed();"
        },
        {
            "trigger": "SimplePie_Item-get_gmdate\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_gmdate( ${2:\\$date_format} );"
        },
        {
            "trigger": "SimplePie_Item-get_id\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_id( ${2:\\$hash} );"
        },
        {
            "trigger": "SimplePie_Item-get_item_tags\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_item_tags( ${2:\\$namespace}, ${3:\\$tag} );"
        },
        {
            "trigger": "SimplePie_Item-get_latitude\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_latitude();"
        },
        {
            "trigger": "SimplePie_Item-get_link\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_link( ${2:\\$key}, ${3:\\$rel} );"
        },
        {
            "trigger": "SimplePie_Item-get_links\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_links( ${2:\\$rel} );"
        },
        {
            "trigger": "SimplePie_Item-get_local_date\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_local_date( ${2:\\$date_format} );"
        },
        {
            "trigger": "SimplePie_Item-get_longitude\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_longitude();"
        },
        {
            "trigger": "SimplePie_Item-get_permalink\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_permalink();"
        },
        {
            "trigger": "SimplePie_Item-get_source\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_source();"
        },
        {
            "trigger": "SimplePie_Item-get_title\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_title();"
        },
        {
            "trigger": "SimplePie_Item-get_updated_date\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_updated_date( ${2:\\$date_format} );"
        },
        {
            "trigger": "SimplePie_Item-get_updated_gmdate\tWP Class Method",
            "contents": "${1:SimplePie_Item}->get_updated_gmdate( ${2:\\$date_format} );"
        },
        {
            "trigger": "SimplePie_Item-sanitize\tWP Class Method",
            "contents": "${1:SimplePie_Item}->sanitize( ${2:\\$data}, ${3:\\$type}, ${4:\\$base} );"
        },
        {
            "trigger": "SimplePie_Item-set_registry\tWP Class Method",
            "contents": "${1:SimplePie_Item}->set_registry( ${2:\\$registry} );"
        },
        {
            "trigger": "SimplePie_Locator-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Locator( ${3:\\$file}, ${4:\\$timeout}, ${5:\\$useragent}, ${6:\\$max_checked_feeds} );"
        },
        {
            "trigger": "SimplePie_Locator-autodiscovery\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->autodiscovery();"
        },
        {
            "trigger": "SimplePie_Locator-body\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->body( ${2:\\$array} );"
        },
        {
            "trigger": "SimplePie_Locator-extension\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->extension( ${2:\\$array} );"
        },
        {
            "trigger": "SimplePie_Locator-find\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->find( ${2:\\$type}, ${3:\\$working} );"
        },
        {
            "trigger": "SimplePie_Locator-get_base\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->get_base();"
        },
        {
            "trigger": "SimplePie_Locator-get_links\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->get_links();"
        },
        {
            "trigger": "SimplePie_Locator-is_feed\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->is_feed( ${2:\\$file} );"
        },
        {
            "trigger": "SimplePie_Locator-set_registry\tWP Class Method",
            "contents": "${1:SimplePie_Locator}->set_registry( ${2:\\$registry} );"
        },
        {
            "trigger": "SimplePie_Misc-absolutize_url\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::absolutize_url( ${2:\\$relative}, ${3:\\$base} );"
        },
        {
            "trigger": "SimplePie_Misc-atom_03_construct_type\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::atom_03_construct_type( ${2:\\$attribs} );"
        },
        {
            "trigger": "SimplePie_Misc-atom_10_construct_type\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::atom_10_construct_type( ${2:\\$attribs} );"
        },
        {
            "trigger": "SimplePie_Misc-atom_10_content_construct_type\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::atom_10_content_construct_type( ${2:\\$attribs} );"
        },
        {
            "trigger": "SimplePie_Misc-change_encoding\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::change_encoding( ${2:\\$data}, ${3:\\$input}, ${4:\\$output} );"
        },
        {
            "trigger": "SimplePie_Misc-codepoint_to_utf8\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::codepoint_to_utf8( ${2:\\$codepoint} );"
        },
        {
            "trigger": "SimplePie_Misc-compress_parse_url\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::compress_parse_url( ${2:\\$scheme}, ${3:\\$authority}, ${4:\\$path}, ${5:\\$query}, ${6:\\$fragment} );"
        },
        {
            "trigger": "SimplePie_Misc-debug\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::debug( ${2:\\$sp} );"
        },
        {
            "trigger": "SimplePie_Misc-element_implode\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::element_implode( ${2:\\$element} );"
        },
        {
            "trigger": "SimplePie_Misc-encoding\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::encoding( ${2:\\$charset} );"
        },
        {
            "trigger": "SimplePie_Misc-error\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::error( ${2:\\$message}, ${3:\\$level}, ${4:\\$file}, ${5:\\$line} );"
        },
        {
            "trigger": "SimplePie_Misc-fix_protocol\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::fix_protocol( ${2:\\$url}, ${3:\\$http} );"
        },
        {
            "trigger": "SimplePie_Misc-get_build\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::get_build();"
        },
        {
            "trigger": "SimplePie_Misc-get_curl_version\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::get_curl_version();"
        },
        {
            "trigger": "SimplePie_Misc-is_isegment_nz_nc\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::is_isegment_nz_nc( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Misc-normalize_url\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::normalize_url( ${2:\\$url} );"
        },
        {
            "trigger": "SimplePie_Misc-output_javascript\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::output_javascript();"
        },
        {
            "trigger": "SimplePie_Misc-parse_date\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::parse_date( ${2:\\$dt} );"
        },
        {
            "trigger": "SimplePie_Misc-parse_mime\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::parse_mime( ${2:\\$mime} );"
        },
        {
            "trigger": "SimplePie_Misc-parse_str\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::parse_str( ${2:\\$str} );"
        },
        {
            "trigger": "SimplePie_Misc-parse_url\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::parse_url( ${2:\\$url} );"
        },
        {
            "trigger": "SimplePie_Misc-percent_encoding_normalization\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::percent_encoding_normalization( ${2:\\$match} );"
        },
        {
            "trigger": "SimplePie_Misc-silence_errors\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::silence_errors( ${2:\\$num}, ${3:\\$str} );"
        },
        {
            "trigger": "SimplePie_Misc-space_seperated_tokens\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::space_seperated_tokens( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Misc-strip_comments\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::strip_comments( ${2:\\$data} );"
        },
        {
            "trigger": "SimplePie_Misc-time_hms\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::time_hms( ${2:\\$seconds} );"
        },
        {
            "trigger": "SimplePie_Misc-uncomment_rfc822\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::uncomment_rfc822( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Misc-windows_1252_to_utf8\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::windows_1252_to_utf8( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Misc-xml_encoding\tWP Class Method",
            "contents": "${1:SimplePie_Misc}::xml_encoding( ${2:\\$data}, ${3:\\$registry} );"
        },
        {
            "trigger": "SimplePie_Net_IPv6-check_ipv6\tWP Class Method",
            "contents": "${1:SimplePie_Net_IPv6}::check_ipv6( ${2:\\$ip} );"
        },
        {
            "trigger": "SimplePie_Net_IPv6-compress\tWP Class Method",
            "contents": "${1:SimplePie_Net_IPv6}::compress( ${2:\\$ip} );"
        },
        {
            "trigger": "SimplePie_Net_IPv6-uncompress\tWP Class Method",
            "contents": "${1:SimplePie_Net_IPv6}::uncompress( ${2:\\$ip} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Parse_Date();"
        },
        {
            "trigger": "SimplePie_Parse_Date-add_callback\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->add_callback( ${2:\\$callback} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-date_asctime\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->date_asctime( ${2:\\$date} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-date_rfc2822\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->date_rfc2822( ${2:\\$date} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-date_rfc850\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->date_rfc850( ${2:\\$date} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-date_strtotime\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->date_strtotime( ${2:\\$date} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-date_w3cdtf\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->date_w3cdtf( ${2:\\$date} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-get\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}::get();"
        },
        {
            "trigger": "SimplePie_Parse_Date-parse\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->parse( ${2:\\$date} );"
        },
        {
            "trigger": "SimplePie_Parse_Date-remove_rfc2822_comments\tWP Class Method",
            "contents": "${1:SimplePie_Parse_Date}->remove_rfc2822_comments( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Parser-cdata\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->cdata( ${2:\\$parser}, ${3:\\$cdata} );"
        },
        {
            "trigger": "SimplePie_Parser-get_current_byte\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->get_current_byte();"
        },
        {
            "trigger": "SimplePie_Parser-get_current_column\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->get_current_column();"
        },
        {
            "trigger": "SimplePie_Parser-get_current_line\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->get_current_line();"
        },
        {
            "trigger": "SimplePie_Parser-get_data\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->get_data();"
        },
        {
            "trigger": "SimplePie_Parser-get_error_code\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->get_error_code();"
        },
        {
            "trigger": "SimplePie_Parser-get_error_string\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->get_error_string();"
        },
        {
            "trigger": "SimplePie_Parser-parse\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->parse( ${2:\\$data}, ${3:\\$encoding} );"
        },
        {
            "trigger": "SimplePie_Parser-set_registry\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->set_registry( ${2:\\$registry} );"
        },
        {
            "trigger": "SimplePie_Parser-split_ns\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->split_ns( ${2:\\$string} );"
        },
        {
            "trigger": "SimplePie_Parser-tag_close\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->tag_close( ${2:\\$parser}, ${3:\\$tag} );"
        },
        {
            "trigger": "SimplePie_Parser-tag_open\tWP Class Method",
            "contents": "${1:SimplePie_Parser}->tag_open( ${2:\\$parser}, ${3:\\$tag}, ${4:\\$attributes} );"
        },
        {
            "trigger": "SimplePie_Rating-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Rating( ${3:\\$scheme}, ${4:\\$value} );"
        },
        {
            "trigger": "SimplePie_Rating-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Rating}->__toString();"
        },
        {
            "trigger": "SimplePie_Rating-get_scheme\tWP Class Method",
            "contents": "${1:SimplePie_Rating}->get_scheme();"
        },
        {
            "trigger": "SimplePie_Rating-get_value\tWP Class Method",
            "contents": "${1:SimplePie_Rating}->get_value();"
        },
        {
            "trigger": "SimplePie_Registry-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Registry();"
        },
        {
            "trigger": "SimplePie_Registry-call\tWP Class Method",
            "contents": "${1:SimplePie_Registry}->call( ${2:\\$type}, ${3:\\$method}, ${4:\\$parameters} );"
        },
        {
            "trigger": "SimplePie_Registry-create\tWP Class Method",
            "contents": "${1:SimplePie_Registry}->create( ${2:\\$type}, ${3:\\$parameters} );"
        },
        {
            "trigger": "SimplePie_Registry-get_class\tWP Class Method",
            "contents": "${1:SimplePie_Registry}->get_class( ${2:\\$type} );"
        },
        {
            "trigger": "SimplePie_Registry-register\tWP Class Method",
            "contents": "${1:SimplePie_Registry}->register( ${2:\\$type}, ${3:\\$class}, ${4:\\$legacy} );"
        },
        {
            "trigger": "SimplePie_Restriction-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Restriction( ${3:\\$relationship}, ${4:\\$type}, ${5:\\$value} );"
        },
        {
            "trigger": "SimplePie_Restriction-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Restriction}->__toString();"
        },
        {
            "trigger": "SimplePie_Restriction-get_relationship\tWP Class Method",
            "contents": "${1:SimplePie_Restriction}->get_relationship();"
        },
        {
            "trigger": "SimplePie_Restriction-get_type\tWP Class Method",
            "contents": "${1:SimplePie_Restriction}->get_type();"
        },
        {
            "trigger": "SimplePie_Restriction-get_value\tWP Class Method",
            "contents": "${1:SimplePie_Restriction}->get_value();"
        },
        {
            "trigger": "SimplePie_Sanitize-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Sanitize();"
        },
        {
            "trigger": "SimplePie_Sanitize-do_strip_htmltags\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->do_strip_htmltags( ${2:\\$match} );"
        },
        {
            "trigger": "SimplePie_Sanitize-encode_instead_of_strip\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->encode_instead_of_strip( ${2:\\$encode} );"
        },
        {
            "trigger": "SimplePie_Sanitize-pass_cache_data\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->pass_cache_data( ${2:\\$enable_cache}, ${3:\\$cache_location}, ${4:\\$cache_name_function}, ${5:\\$cache_class} );"
        },
        {
            "trigger": "SimplePie_Sanitize-pass_file_data\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->pass_file_data( ${2:\\$file_class}, ${3:\\$timeout}, ${4:\\$useragent}, ${5:\\$force_fsockopen} );"
        },
        {
            "trigger": "SimplePie_Sanitize-remove_div\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->remove_div( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie_Sanitize-replace_urls\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->replace_urls( ${2:\\$document}, ${3:\\$tag}, ${4:\\$attributes} );"
        },
        {
            "trigger": "SimplePie_Sanitize-sanitize\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->sanitize( ${2:\\$data}, ${3:\\$type}, ${4:\\$base} );"
        },
        {
            "trigger": "SimplePie_Sanitize-set_image_handler\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->set_image_handler( ${2:\\$page} );"
        },
        {
            "trigger": "SimplePie_Sanitize-set_output_encoding\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->set_output_encoding( ${2:\\$encoding} );"
        },
        {
            "trigger": "SimplePie_Sanitize-set_registry\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->set_registry( ${2:\\$registry} );"
        },
        {
            "trigger": "SimplePie_Sanitize-set_url_replacements\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->set_url_replacements( ${2:\\$element_attribute} );"
        },
        {
            "trigger": "SimplePie_Sanitize-strip_attributes\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->strip_attributes( ${2:\\$attribs} );"
        },
        {
            "trigger": "SimplePie_Sanitize-strip_comments\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->strip_comments( ${2:\\$strip} );"
        },
        {
            "trigger": "SimplePie_Sanitize-strip_htmltags\tWP Class Method",
            "contents": "${1:SimplePie_Sanitize}->strip_htmltags( ${2:\\$tags} );"
        },
        {
            "trigger": "SimplePie_Source-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_Source( ${3:\\$item}, ${4:\\$data} );"
        },
        {
            "trigger": "SimplePie_Source-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie_Source}->__toString();"
        },
        {
            "trigger": "SimplePie_Source-get_author\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_author( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Source-get_authors\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_authors();"
        },
        {
            "trigger": "SimplePie_Source-get_base\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_base( ${2:\\$element} );"
        },
        {
            "trigger": "SimplePie_Source-get_categories\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_categories();"
        },
        {
            "trigger": "SimplePie_Source-get_category\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_category( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Source-get_contributor\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_contributor( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie_Source-get_contributors\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_contributors();"
        },
        {
            "trigger": "SimplePie_Source-get_copyright\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_copyright();"
        },
        {
            "trigger": "SimplePie_Source-get_description\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_description();"
        },
        {
            "trigger": "SimplePie_Source-get_image_url\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_image_url();"
        },
        {
            "trigger": "SimplePie_Source-get_item\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_item();"
        },
        {
            "trigger": "SimplePie_Source-get_language\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_language();"
        },
        {
            "trigger": "SimplePie_Source-get_latitude\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_latitude();"
        },
        {
            "trigger": "SimplePie_Source-get_link\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_link( ${2:\\$key}, ${3:\\$rel} );"
        },
        {
            "trigger": "SimplePie_Source-get_links\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_links( ${2:\\$rel} );"
        },
        {
            "trigger": "SimplePie_Source-get_longitude\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_longitude();"
        },
        {
            "trigger": "SimplePie_Source-get_permalink\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_permalink();"
        },
        {
            "trigger": "SimplePie_Source-get_source_tags\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_source_tags( ${2:\\$namespace}, ${3:\\$tag} );"
        },
        {
            "trigger": "SimplePie_Source-get_title\tWP Class Method",
            "contents": "${1:SimplePie_Source}->get_title();"
        },
        {
            "trigger": "SimplePie_Source-sanitize\tWP Class Method",
            "contents": "${1:SimplePie_Source}->sanitize( ${2:\\$data}, ${3:\\$type}, ${4:\\$base} );"
        },
        {
            "trigger": "SimplePie_Source-set_registry\tWP Class Method",
            "contents": "${1:SimplePie_Source}->set_registry( ${2:\\$registry} );"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie_XML_Declaration_Parser( ${3:\\$data} );"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-before_version_name\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->before_version_name();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-encoding_equals\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->encoding_equals();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-encoding_name\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->encoding_name();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-encoding_value\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->encoding_value();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-get_value\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->get_value();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-has_data\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->has_data();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-parse\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->parse();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-skip_whitespace\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->skip_whitespace();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-standalone_equals\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->standalone_equals();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-standalone_name\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->standalone_name();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-standalone_value\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->standalone_value();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-version_equals\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->version_equals();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-version_name\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->version_name();"
        },
        {
            "trigger": "SimplePie_XML_Declaration_Parser-version_value\tWP Class Method",
            "contents": "${1:SimplePie_XML_Declaration_Parser}->version_value();"
        },
        {
            "trigger": "SimplePie-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie}->__call( ${2:\\$method}, ${3:\\$args} );"
        },
        {
            "trigger": "SimplePie-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new SimplePie();"
        },
        {
            "trigger": "SimplePie-__destruct\tWP Class Method",
            "contents": "${1:SimplePie}->__destruct();"
        },
        {
            "trigger": "SimplePie-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:SimplePie}->__toString();"
        },
        {
            "trigger": "SimplePie-enable_cache\tWP Class Method",
            "contents": "${1:SimplePie}->enable_cache( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie-enable_order_by_date\tWP Class Method",
            "contents": "${1:SimplePie}->enable_order_by_date( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie-encode_instead_of_strip\tWP Class Method",
            "contents": "${1:SimplePie}->encode_instead_of_strip( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie-error\tWP Class Method",
            "contents": "${1:SimplePie}->error();"
        },
        {
            "trigger": "SimplePie-force_feed\tWP Class Method",
            "contents": "${1:SimplePie}->force_feed( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie-force_fsockopen\tWP Class Method",
            "contents": "${1:SimplePie}->force_fsockopen( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie-get_all_discovered_feeds\tWP Class Method",
            "contents": "${1:SimplePie}->get_all_discovered_feeds();"
        },
        {
            "trigger": "SimplePie-get_author\tWP Class Method",
            "contents": "${1:SimplePie}->get_author( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie-get_authors\tWP Class Method",
            "contents": "${1:SimplePie}->get_authors();"
        },
        {
            "trigger": "SimplePie-get_base\tWP Class Method",
            "contents": "${1:SimplePie}->get_base( ${2:\\$element} );"
        },
        {
            "trigger": "SimplePie-get_categories\tWP Class Method",
            "contents": "${1:SimplePie}->get_categories();"
        },
        {
            "trigger": "SimplePie-get_category\tWP Class Method",
            "contents": "${1:SimplePie}->get_category( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie-get_channel_tags\tWP Class Method",
            "contents": "${1:SimplePie}->get_channel_tags( ${2:\\$namespace}, ${3:\\$tag} );"
        },
        {
            "trigger": "SimplePie-get_contributor\tWP Class Method",
            "contents": "${1:SimplePie}->get_contributor( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie-get_contributors\tWP Class Method",
            "contents": "${1:SimplePie}->get_contributors();"
        },
        {
            "trigger": "SimplePie-get_copyright\tWP Class Method",
            "contents": "${1:SimplePie}->get_copyright();"
        },
        {
            "trigger": "SimplePie-get_description\tWP Class Method",
            "contents": "${1:SimplePie}->get_description();"
        },
        {
            "trigger": "SimplePie-get_encoding\tWP Class Method",
            "contents": "${1:SimplePie}->get_encoding();"
        },
        {
            "trigger": "SimplePie-get_feed_tags\tWP Class Method",
            "contents": "${1:SimplePie}->get_feed_tags( ${2:\\$namespace}, ${3:\\$tag} );"
        },
        {
            "trigger": "SimplePie-get_image_height\tWP Class Method",
            "contents": "${1:SimplePie}->get_image_height();"
        },
        {
            "trigger": "SimplePie-get_image_link\tWP Class Method",
            "contents": "${1:SimplePie}->get_image_link();"
        },
        {
            "trigger": "SimplePie-get_image_tags\tWP Class Method",
            "contents": "${1:SimplePie}->get_image_tags( ${2:\\$namespace}, ${3:\\$tag} );"
        },
        {
            "trigger": "SimplePie-get_image_title\tWP Class Method",
            "contents": "${1:SimplePie}->get_image_title();"
        },
        {
            "trigger": "SimplePie-get_image_url\tWP Class Method",
            "contents": "${1:SimplePie}->get_image_url();"
        },
        {
            "trigger": "SimplePie-get_image_width\tWP Class Method",
            "contents": "${1:SimplePie}->get_image_width();"
        },
        {
            "trigger": "SimplePie-get_item\tWP Class Method",
            "contents": "${1:SimplePie}->get_item( ${2:\\$key} );"
        },
        {
            "trigger": "SimplePie-get_item_quantity\tWP Class Method",
            "contents": "${1:SimplePie}->get_item_quantity( ${2:\\$max} );"
        },
        {
            "trigger": "SimplePie-get_items\tWP Class Method",
            "contents": "${1:SimplePie}->get_items( ${2:\\$start}, ${3:\\$end} );"
        },
        {
            "trigger": "SimplePie-get_language\tWP Class Method",
            "contents": "${1:SimplePie}->get_language();"
        },
        {
            "trigger": "SimplePie-get_latitude\tWP Class Method",
            "contents": "${1:SimplePie}->get_latitude();"
        },
        {
            "trigger": "SimplePie-get_link\tWP Class Method",
            "contents": "${1:SimplePie}->get_link( ${2:\\$key}, ${3:\\$rel} );"
        },
        {
            "trigger": "SimplePie-get_links\tWP Class Method",
            "contents": "${1:SimplePie}->get_links( ${2:\\$rel} );"
        },
        {
            "trigger": "SimplePie-get_longitude\tWP Class Method",
            "contents": "${1:SimplePie}->get_longitude();"
        },
        {
            "trigger": "SimplePie-get_permalink\tWP Class Method",
            "contents": "${1:SimplePie}->get_permalink();"
        },
        {
            "trigger": "SimplePie-get_raw_data\tWP Class Method",
            "contents": "${1:SimplePie}->get_raw_data();"
        },
        {
            "trigger": "SimplePie-get_registry\tWP Class Method",
            "contents": "${1:SimplePie}->get_registry();"
        },
        {
            "trigger": "SimplePie-get_title\tWP Class Method",
            "contents": "${1:SimplePie}->get_title();"
        },
        {
            "trigger": "SimplePie-get_type\tWP Class Method",
            "contents": "${1:SimplePie}->get_type();"
        },
        {
            "trigger": "SimplePie-handle_content_type\tWP Class Method",
            "contents": "${1:SimplePie}->handle_content_type( ${2:\\$mime} );"
        },
        {
            "trigger": "SimplePie-init\tWP Class Method",
            "contents": "${1:SimplePie}->init();"
        },
        {
            "trigger": "SimplePie-merge_items\tWP Class Method",
            "contents": "${1:SimplePie}::merge_items( ${2:\\$urls}, ${3:\\$start}, ${4:\\$end}, ${5:\\$limit} );"
        },
        {
            "trigger": "SimplePie-remove_div\tWP Class Method",
            "contents": "${1:SimplePie}->remove_div( ${2:\\$enable} );"
        },
        {
            "trigger": "SimplePie-sanitize\tWP Class Method",
            "contents": "${1:SimplePie}->sanitize( ${2:\\$data}, ${3:\\$type}, ${4:\\$base} );"
        },
        {
            "trigger": "SimplePie-set_author_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_author_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_autodiscovery_cache_duration\tWP Class Method",
            "contents": "${1:SimplePie}->set_autodiscovery_cache_duration( ${2:\\$seconds} );"
        },
        {
            "trigger": "SimplePie-set_autodiscovery_level\tWP Class Method",
            "contents": "${1:SimplePie}->set_autodiscovery_level( ${2:\\$level} );"
        },
        {
            "trigger": "SimplePie-set_cache_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_cache_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_cache_duration\tWP Class Method",
            "contents": "${1:SimplePie}->set_cache_duration( ${2:\\$seconds} );"
        },
        {
            "trigger": "SimplePie-set_cache_location\tWP Class Method",
            "contents": "${1:SimplePie}->set_cache_location( ${2:\\$location} );"
        },
        {
            "trigger": "SimplePie-set_cache_name_function\tWP Class Method",
            "contents": "${1:SimplePie}->set_cache_name_function( ${2:\\$function} );"
        },
        {
            "trigger": "SimplePie-set_caption_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_caption_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_category_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_category_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_content_type_sniffer_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_content_type_sniffer_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_copyright_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_copyright_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_credit_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_credit_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_enclosure_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_enclosure_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_feed_url\tWP Class Method",
            "contents": "${1:SimplePie}->set_feed_url( ${2:\\$url} );"
        },
        {
            "trigger": "SimplePie-set_file\tWP Class Method",
            "contents": "${1:SimplePie}->set_file( ${2:\\$file} );"
        },
        {
            "trigger": "SimplePie-set_file_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_file_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_image_handler\tWP Class Method",
            "contents": "${1:SimplePie}->set_image_handler( ${2:\\$page}, ${3:\\$qs} );"
        },
        {
            "trigger": "SimplePie-set_input_encoding\tWP Class Method",
            "contents": "${1:SimplePie}->set_input_encoding( ${2:\\$encoding} );"
        },
        {
            "trigger": "SimplePie-set_item_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_item_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_item_limit\tWP Class Method",
            "contents": "${1:SimplePie}->set_item_limit( ${2:\\$limit} );"
        },
        {
            "trigger": "SimplePie-set_locator_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_locator_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_max_checked_feeds\tWP Class Method",
            "contents": "${1:SimplePie}->set_max_checked_feeds( ${2:\\$max} );"
        },
        {
            "trigger": "SimplePie-set_output_encoding\tWP Class Method",
            "contents": "${1:SimplePie}->set_output_encoding( ${2:\\$encoding} );"
        },
        {
            "trigger": "SimplePie-set_parser_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_parser_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_rating_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_rating_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_raw_data\tWP Class Method",
            "contents": "${1:SimplePie}->set_raw_data( ${2:\\$data} );"
        },
        {
            "trigger": "SimplePie-set_restriction_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_restriction_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_sanitize_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_sanitize_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_source_class\tWP Class Method",
            "contents": "${1:SimplePie}->set_source_class( ${2:\\$class} );"
        },
        {
            "trigger": "SimplePie-set_stupidly_fast\tWP Class Method",
            "contents": "${1:SimplePie}->set_stupidly_fast( ${2:\\$set} );"
        },
        {
            "trigger": "SimplePie-set_timeout\tWP Class Method",
            "contents": "${1:SimplePie}->set_timeout( ${2:\\$timeout} );"
        },
        {
            "trigger": "SimplePie-set_url_replacements\tWP Class Method",
            "contents": "${1:SimplePie}->set_url_replacements( ${2:\\$element_attribute} );"
        },
        {
            "trigger": "SimplePie-set_useragent\tWP Class Method",
            "contents": "${1:SimplePie}->set_useragent( ${2:\\$ua} );"
        },
        {
            "trigger": "SimplePie-sort_items\tWP Class Method",
            "contents": "${1:SimplePie}::sort_items( ${2:\\$a}, ${3:\\$b} );"
        },
        {
            "trigger": "SimplePie-strip_attributes\tWP Class Method",
            "contents": "${1:SimplePie}->strip_attributes( ${2:\\$attribs} );"
        },
        {
            "trigger": "SimplePie-strip_comments\tWP Class Method",
            "contents": "${1:SimplePie}->strip_comments( ${2:\\$strip} );"
        },
        {
            "trigger": "SimplePie-strip_htmltags\tWP Class Method",
            "contents": "${1:SimplePie}->strip_htmltags( ${2:\\$tags}, ${3:\\$encode} );"
        },
        {
            "trigger": "SimplePie-subscribe_url\tWP Class Method",
            "contents": "${1:SimplePie}->subscribe_url();"
        },
        {
            "trigger": "SMTP-authenticate\tWP Class Method",
            "contents": "${1:SMTP}->authenticate( ${2:\\$username}, ${3:\\$password}, ${4:\\$authtype}, ${5:\\$realm}, ${6:\\$workstation}, ${7:\\$OAuth} );"
        },
        {
            "trigger": "SMTP-client_send\tWP Class Method",
            "contents": "${1:SMTP}->client_send( ${2:\\$data} );"
        },
        {
            "trigger": "SMTP-close\tWP Class Method",
            "contents": "${1:SMTP}->close();"
        },
        {
            "trigger": "SMTP-connect\tWP Class Method",
            "contents": "${1:SMTP}->connect( ${2:\\$host}, ${3:\\$port}, ${4:\\$timeout}, ${5:\\$options} );"
        },
        {
            "trigger": "SMTP-connected\tWP Class Method",
            "contents": "${1:SMTP}->connected();"
        },
        {
            "trigger": "SMTP-data\tWP Class Method",
            "contents": "${1:SMTP}->data( ${2:\\$msg_data} );"
        },
        {
            "trigger": "SMTP-getDebugLevel\tWP Class Method",
            "contents": "${1:SMTP}->getDebugLevel();"
        },
        {
            "trigger": "SMTP-getDebugOutput\tWP Class Method",
            "contents": "${1:SMTP}->getDebugOutput();"
        },
        {
            "trigger": "SMTP-getError\tWP Class Method",
            "contents": "${1:SMTP}->getError();"
        },
        {
            "trigger": "SMTP-getLastReply\tWP Class Method",
            "contents": "${1:SMTP}->getLastReply();"
        },
        {
            "trigger": "SMTP-getLastTransactionID\tWP Class Method",
            "contents": "${1:SMTP}->getLastTransactionID();"
        },
        {
            "trigger": "SMTP-getServerExt\tWP Class Method",
            "contents": "${1:SMTP}->getServerExt( ${2:\\$name} );"
        },
        {
            "trigger": "SMTP-getServerExtList\tWP Class Method",
            "contents": "${1:SMTP}->getServerExtList();"
        },
        {
            "trigger": "SMTP-getTimeout\tWP Class Method",
            "contents": "${1:SMTP}->getTimeout();"
        },
        {
            "trigger": "SMTP-getVerp\tWP Class Method",
            "contents": "${1:SMTP}->getVerp();"
        },
        {
            "trigger": "SMTP-hello\tWP Class Method",
            "contents": "${1:SMTP}->hello( ${2:\\$host} );"
        },
        {
            "trigger": "SMTP-mail\tWP Class Method",
            "contents": "${1:SMTP}->mail( ${2:\\$from} );"
        },
        {
            "trigger": "SMTP-noop\tWP Class Method",
            "contents": "${1:SMTP}->noop();"
        },
        {
            "trigger": "SMTP-quit\tWP Class Method",
            "contents": "${1:SMTP}->quit( ${2:\\$close_on_error} );"
        },
        {
            "trigger": "SMTP-recipient\tWP Class Method",
            "contents": "${1:SMTP}->recipient( ${2:\\$address} );"
        },
        {
            "trigger": "SMTP-reset\tWP Class Method",
            "contents": "${1:SMTP}->reset();"
        },
        {
            "trigger": "SMTP-sendAndMail\tWP Class Method",
            "contents": "${1:SMTP}->sendAndMail( ${2:\\$from} );"
        },
        {
            "trigger": "SMTP-setDebugLevel\tWP Class Method",
            "contents": "${1:SMTP}->setDebugLevel( ${2:\\$level} );"
        },
        {
            "trigger": "SMTP-setDebugOutput\tWP Class Method",
            "contents": "${1:SMTP}->setDebugOutput( ${2:\\$method} );"
        },
        {
            "trigger": "SMTP-setTimeout\tWP Class Method",
            "contents": "${1:SMTP}->setTimeout( ${2:\\$timeout} );"
        },
        {
            "trigger": "SMTP-setVerp\tWP Class Method",
            "contents": "${1:SMTP}->setVerp( ${2:\\$enabled} );"
        },
        {
            "trigger": "SMTP-startTLS\tWP Class Method",
            "contents": "${1:SMTP}->startTLS();"
        },
        {
            "trigger": "SMTP-turn\tWP Class Method",
            "contents": "${1:SMTP}->turn();"
        },
        {
            "trigger": "SMTP-verify\tWP Class Method",
            "contents": "${1:SMTP}->verify( ${2:\\$name} );"
        },
        {
            "trigger": "Text_Diff_Engine_native-_compareseq\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Engine_native}->_compareseq( ${2:\\$xoff}, ${3:\\$xlim}, ${4:\\$yoff}, ${5:\\$ylim} );"
        },
        {
            "trigger": "Text_Diff_Engine_native-_diag\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Engine_native}->_diag( ${2:\\$xoff}, ${3:\\$xlim}, ${4:\\$yoff}, ${5:\\$ylim}, ${6:\\$nchunks} );"
        },
        {
            "trigger": "Text_Diff_Engine_native-_lcsPos\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Engine_native}->_lcsPos( ${2:\\$ypos} );"
        },
        {
            "trigger": "Text_Diff_Engine_native-_shiftBoundaries\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Engine_native}->_shiftBoundaries( ${2:\\$lines}, ${3:\\$changed}, ${4:\\$other_changed} );"
        },
        {
            "trigger": "Text_Diff_Engine_native-diff\tWP Class Method",
            "contents": "${1:Text_Diff_Engine_native}->diff( ${2:\\$from_lines}, ${3:\\$to_lines} );"
        },
        {
            "trigger": "Text_Diff_Engine_shell-_getLines\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Engine_shell}->_getLines( ${2:\\$text_lines}, ${3:\\$line_no}, ${4:\\$end} );"
        },
        {
            "trigger": "Text_Diff_Engine_shell-diff\tWP Class Method",
            "contents": "${1:Text_Diff_Engine_shell}->diff( ${2:\\$from_lines}, ${3:\\$to_lines} );"
        },
        {
            "trigger": "Text_Diff_Engine_string-diff\tWP Class Method",
            "contents": "${1:Text_Diff_Engine_string}->diff( ${2:\\$diff}, ${3:\\$mode} );"
        },
        {
            "trigger": "Text_Diff_Engine_string-parseContextDiff\tWP Class Method",
            "contents": "${1:Text_Diff_Engine_string}->parseContextDiff( ${2:\\$diff} );"
        },
        {
            "trigger": "Text_Diff_Engine_string-parseUnifiedDiff\tWP Class Method",
            "contents": "${1:Text_Diff_Engine_string}->parseUnifiedDiff( ${2:\\$diff} );"
        },
        {
            "trigger": "Text_Diff_Engine_xdiff-diff\tWP Class Method",
            "contents": "${1:Text_Diff_Engine_xdiff}->diff( ${2:\\$from_lines}, ${3:\\$to_lines} );"
        },
        {
            "trigger": "Text_Diff_Op_add-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_Diff_Op_add( ${3:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Op_add-reverse\tWP Class Method",
            "contents": "${1:Text_Diff_Op_add}->reverse();"
        },
        {
            "trigger": "Text_Diff_Op_add-Text_Diff_Op_add\tWP Class Method",
            "contents": "${1:Text_Diff_Op_add}->Text_Diff_Op_add( ${2:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Op_change-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_Diff_Op_change( ${3:\\$orig}, ${4:\\$final} );"
        },
        {
            "trigger": "Text_Diff_Op_change-reverse\tWP Class Method",
            "contents": "${1:Text_Diff_Op_change}->reverse();"
        },
        {
            "trigger": "Text_Diff_Op_change-Text_Diff_Op_change\tWP Class Method",
            "contents": "${1:Text_Diff_Op_change}->Text_Diff_Op_change( ${2:\\$orig}, ${3:\\$final} );"
        },
        {
            "trigger": "Text_Diff_Op_copy-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_Diff_Op_copy( ${3:\\$orig}, ${4:\\$final} );"
        },
        {
            "trigger": "Text_Diff_Op_copy-reverse\tWP Class Method",
            "contents": "${1:Text_Diff_Op_copy}->reverse();"
        },
        {
            "trigger": "Text_Diff_Op_copy-Text_Diff_Op_copy\tWP Class Method",
            "contents": "${1:Text_Diff_Op_copy}->Text_Diff_Op_copy( ${2:\\$orig}, ${3:\\$final} );"
        },
        {
            "trigger": "Text_Diff_Op_delete-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_Diff_Op_delete( ${3:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Op_delete-reverse\tWP Class Method",
            "contents": "${1:Text_Diff_Op_delete}->reverse();"
        },
        {
            "trigger": "Text_Diff_Op_delete-Text_Diff_Op_delete\tWP Class Method",
            "contents": "${1:Text_Diff_Op_delete}->Text_Diff_Op_delete( ${2:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Op-nfinal\tWP Class Method",
            "contents": "${1:Text_Diff_Op}->nfinal();"
        },
        {
            "trigger": "Text_Diff_Op-norig\tWP Class Method",
            "contents": "${1:Text_Diff_Op}->norig();"
        },
        {
            "trigger": "Text_Diff_Op-reverse\tWP Class Method",
            "contents": "${1:Text_Diff_Op}->reverse();"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_added\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_added( ${2:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_blockHeader\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_blockHeader( ${2:\\$xbeg}, ${3:\\$xlen}, ${4:\\$ybeg}, ${5:\\$ylen} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_changed\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_changed( ${2:\\$orig}, ${3:\\$final} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_deleted\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_deleted( ${2:\\$lines}, ${3:\\$words} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_encode\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_encode( ${2:\\$string} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_lines\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_lines( ${2:\\$lines}, ${3:\\$prefix}, ${4:\\$encode} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_splitOnWords\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_splitOnWords( ${2:\\$string}, ${3:\\$newlineEscape} );"
        },
        {
            "trigger": "Text_Diff_Renderer_inline-_startBlock\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer_inline}->_startBlock( ${2:\\$header} );"
        },
        {
            "trigger": "Text_Diff_Renderer-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_Diff_Renderer( ${3:\\$params} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_added\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_added( ${2:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_block\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_block( ${2:\\$xbeg}, ${3:\\$xlen}, ${4:\\$ybeg}, ${5:\\$ylen}, ${6:\\$edits} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_blockHeader\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_blockHeader( ${2:\\$xbeg}, ${3:\\$xlen}, ${4:\\$ybeg}, ${5:\\$ylen} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_changed\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_changed( ${2:\\$orig}, ${3:\\$final} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_context\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_context( ${2:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_deleted\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_deleted( ${2:\\$lines} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_endBlock\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_endBlock();"
        },
        {
            "trigger": "Text_Diff_Renderer-_endDiff\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_endDiff();"
        },
        {
            "trigger": "Text_Diff_Renderer-_lines\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_lines( ${2:\\$lines}, ${3:\\$prefix} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_startBlock\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_startBlock( ${2:\\$header} );"
        },
        {
            "trigger": "Text_Diff_Renderer-_startDiff\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff_Renderer}->_startDiff();"
        },
        {
            "trigger": "Text_Diff_Renderer-getParams\tWP Class Method",
            "contents": "${1:Text_Diff_Renderer}->getParams();"
        },
        {
            "trigger": "Text_Diff_Renderer-render\tWP Class Method",
            "contents": "${1:Text_Diff_Renderer}->render( ${2:\\$diff} );"
        },
        {
            "trigger": "Text_Diff_Renderer-Text_Diff_Renderer\tWP Class Method",
            "contents": "${1:Text_Diff_Renderer}->Text_Diff_Renderer( ${2:\\$params} );"
        },
        {
            "trigger": "Text_Diff-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_Diff( ${3:\\$engine}, ${4:\\$params} );"
        },
        {
            "trigger": "Text_Diff-_check\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff}->_check( ${2:\\$from_lines}, ${3:\\$to_lines} );"
        },
        {
            "trigger": "Text_Diff-_getTempDir\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:Text_Diff}->_getTempDir();"
        },
        {
            "trigger": "Text_Diff-countAddedLines\tWP Class Method",
            "contents": "${1:Text_Diff}->countAddedLines();"
        },
        {
            "trigger": "Text_Diff-countDeletedLines\tWP Class Method",
            "contents": "${1:Text_Diff}->countDeletedLines();"
        },
        {
            "trigger": "Text_Diff-getDiff\tWP Class Method",
            "contents": "${1:Text_Diff}->getDiff();"
        },
        {
            "trigger": "Text_Diff-getFinal\tWP Class Method",
            "contents": "${1:Text_Diff}->getFinal();"
        },
        {
            "trigger": "Text_Diff-getOriginal\tWP Class Method",
            "contents": "${1:Text_Diff}->getOriginal();"
        },
        {
            "trigger": "Text_Diff-isEmpty\tWP Class Method",
            "contents": "${1:Text_Diff}->isEmpty();"
        },
        {
            "trigger": "Text_Diff-lcs\tWP Class Method",
            "contents": "${1:Text_Diff}->lcs();"
        },
        {
            "trigger": "Text_Diff-reverse\tWP Class Method",
            "contents": "${1:Text_Diff}->reverse();"
        },
        {
            "trigger": "Text_Diff-Text_Diff\tWP Class Method",
            "contents": "${1:Text_Diff}->Text_Diff( ${2:\\$engine}, ${3:\\$params} );"
        },
        {
            "trigger": "Text_Diff-trimNewlines\tWP Class Method",
            "contents": "${1:Text_Diff}::trimNewlines( ${2:\\$line}, ${3:\\$key} );"
        },
        {
            "trigger": "Text_MappedDiff-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Text_MappedDiff( ${3:\\$from_lines}, ${4:\\$to_lines}, ${5:\\$mapped_from_lines}, ${6:\\$mapped_to_lines} );"
        },
        {
            "trigger": "Text_MappedDiff-Text_MappedDiff\tWP Class Method",
            "contents": "${1:Text_MappedDiff}->Text_MappedDiff( ${2:\\$from_lines}, ${3:\\$to_lines}, ${4:\\$mapped_from_lines}, ${5:\\$mapped_to_lines} );"
        },
        {
            "trigger": "Theme_Installer_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Theme_Installer_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "Theme_Installer_Skin-after\tWP Class Method",
            "contents": "${1:Theme_Installer_Skin}->after();"
        },
        {
            "trigger": "Theme_Installer_Skin-before\tWP Class Method",
            "contents": "${1:Theme_Installer_Skin}->before();"
        },
        {
            "trigger": "Theme_Upgrader_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Theme_Upgrader_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "Theme_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:Theme_Upgrader_Skin}->after();"
        },
        {
            "trigger": "Theme_Upgrader-bulk_upgrade\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->bulk_upgrade( ${2:\\$themes}, ${3:\\$args} );"
        },
        {
            "trigger": "Theme_Upgrader-check_package\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->check_package( ${2:\\$source} );"
        },
        {
            "trigger": "Theme_Upgrader-check_parent_theme_filter\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->check_parent_theme_filter( ${2:\\$install_result}, ${3:\\$hook_extra}, ${4:\\$child_result} );"
        },
        {
            "trigger": "Theme_Upgrader-current_after\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->current_after( ${2:\\$return}, ${3:\\$theme} );"
        },
        {
            "trigger": "Theme_Upgrader-current_before\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->current_before( ${2:\\$return}, ${3:\\$theme} );"
        },
        {
            "trigger": "Theme_Upgrader-delete_old_theme\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->delete_old_theme( ${2:\\$removed}, ${3:\\$local_destination}, ${4:\\$remote_destination}, ${5:\\$theme} );"
        },
        {
            "trigger": "Theme_Upgrader-hide_activate_preview_actions\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->hide_activate_preview_actions( ${2:\\$actions} );"
        },
        {
            "trigger": "Theme_Upgrader-install\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->install( ${2:\\$package}, ${3:\\$args} );"
        },
        {
            "trigger": "Theme_Upgrader-install_strings\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->install_strings();"
        },
        {
            "trigger": "Theme_Upgrader-theme_info\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->theme_info( ${2:\\$theme} );"
        },
        {
            "trigger": "Theme_Upgrader-upgrade\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->upgrade( ${2:\\$theme}, ${3:\\$args} );"
        },
        {
            "trigger": "Theme_Upgrader-upgrade_strings\tWP Class Method",
            "contents": "${1:Theme_Upgrader}->upgrade_strings();"
        },
        {
            "trigger": "Translation_Entry-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Translation_Entry( ${3:\\$args} );"
        },
        {
            "trigger": "Translation_Entry-key\tWP Class Method",
            "contents": "${1:Translation_Entry}->key();"
        },
        {
            "trigger": "Translation_Entry-merge_with\tWP Class Method",
            "contents": "${1:Translation_Entry}->merge_with( ${2:\\$other} );"
        },
        {
            "trigger": "Translations-add_entry\tWP Class Method",
            "contents": "${1:Translations}->add_entry( ${2:\\$entry} );"
        },
        {
            "trigger": "Translations-add_entry_or_merge\tWP Class Method",
            "contents": "${1:Translations}->add_entry_or_merge( ${2:\\$entry} );"
        },
        {
            "trigger": "Translations-get_header\tWP Class Method",
            "contents": "${1:Translations}->get_header( ${2:\\$header} );"
        },
        {
            "trigger": "Translations-get_plural_forms_count\tWP Class Method",
            "contents": "${1:Translations}->get_plural_forms_count();"
        },
        {
            "trigger": "Translations-merge_originals_with\tWP Class Method",
            "contents": "${1:Translations}->merge_originals_with( ${2:\\$other} );"
        },
        {
            "trigger": "Translations-merge_with\tWP Class Method",
            "contents": "${1:Translations}->merge_with( ${2:\\$other} );"
        },
        {
            "trigger": "Translations-select_plural_form\tWP Class Method",
            "contents": "${1:Translations}->select_plural_form( ${2:\\$count} );"
        },
        {
            "trigger": "Translations-set_header\tWP Class Method",
            "contents": "${1:Translations}->set_header( ${2:\\$header}, ${3:\\$value} );"
        },
        {
            "trigger": "Translations-set_headers\tWP Class Method",
            "contents": "${1:Translations}->set_headers( ${2:\\$headers} );"
        },
        {
            "trigger": "Translations-translate\tWP Class Method",
            "contents": "${1:Translations}->translate( ${2:\\$singular}, ${3:\\$context} );"
        },
        {
            "trigger": "Translations-translate_entry\tWP Class Method",
            "contents": "${1:Translations}->translate_entry( ${2:\\$entry} );"
        },
        {
            "trigger": "Translations-translate_plural\tWP Class Method",
            "contents": "${1:Translations}->translate_plural( ${2:\\$singular}, ${3:\\$plural}, ${4:\\$count}, ${5:\\$context} );"
        },
        {
            "trigger": "Walker_Category_Checklist-end_el\tWP Class Method",
            "contents": "${1:Walker_Category_Checklist}->end_el( ${2:\\$output}, ${3:\\$category}, ${4:\\$depth}, ${5:\\$args} );"
        },
        {
            "trigger": "Walker_Category_Checklist-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Category_Checklist}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Category_Checklist-start_el\tWP Class Method",
            "contents": "${1:Walker_Category_Checklist}->start_el( ${2:\\$output}, ${3:\\$category}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Category_Checklist-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Category_Checklist}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Category-end_el\tWP Class Method",
            "contents": "${1:Walker_Category}->end_el( ${2:\\$output}, ${3:\\$page}, ${4:\\$depth}, ${5:\\$args} );"
        },
        {
            "trigger": "Walker_Category-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Category}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Category-start_el\tWP Class Method",
            "contents": "${1:Walker_Category}->start_el( ${2:\\$output}, ${3:\\$category}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Category-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Category}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_CategoryDropdown-start_el\tWP Class Method",
            "contents": "${1:Walker_CategoryDropdown}->start_el( ${2:\\$output}, ${3:\\$category}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Comment-display_element\tWP Class Method",
            "contents": "${1:Walker_Comment}->display_element( ${2:\\$element}, ${3:\\$children_elements}, ${4:\\$max_depth}, ${5:\\$depth}, ${6:\\$args}, ${7:\\$output} );"
        },
        {
            "trigger": "Walker_Comment-end_el\tWP Class Method",
            "contents": "${1:Walker_Comment}->end_el( ${2:\\$output}, ${3:\\$comment}, ${4:\\$depth}, ${5:\\$args} );"
        },
        {
            "trigger": "Walker_Comment-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Comment}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Comment-start_el\tWP Class Method",
            "contents": "${1:Walker_Comment}->start_el( ${2:\\$output}, ${3:\\$comment}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Comment-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Comment}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Checklist-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new Walker_Nav_Menu_Checklist( ${3:\\$fields} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Checklist-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu_Checklist}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Checklist-start_el\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu_Checklist}->start_el( ${2:\\$output}, ${3:\\$item}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Checklist-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu_Checklist}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Edit-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu_Edit}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Edit-start_el\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu_Edit}->start_el( ${2:\\$output}, ${3:\\$item}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Nav_Menu_Edit-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu_Edit}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu-end_el\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu}->end_el( ${2:\\$output}, ${3:\\$item}, ${4:\\$depth}, ${5:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Nav_Menu-start_el\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu}->start_el( ${2:\\$output}, ${3:\\$item}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker_Nav_Menu-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Nav_Menu}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Page-end_el\tWP Class Method",
            "contents": "${1:Walker_Page}->end_el( ${2:\\$output}, ${3:\\$page}, ${4:\\$depth}, ${5:\\$args} );"
        },
        {
            "trigger": "Walker_Page-end_lvl\tWP Class Method",
            "contents": "${1:Walker_Page}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_Page-start_el\tWP Class Method",
            "contents": "${1:Walker_Page}->start_el( ${2:\\$output}, ${3:\\$page}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$current_page} );"
        },
        {
            "trigger": "Walker_Page-start_lvl\tWP Class Method",
            "contents": "${1:Walker_Page}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker_PageDropdown-start_el\tWP Class Method",
            "contents": "${1:Walker_PageDropdown}->start_el( ${2:\\$output}, ${3:\\$page}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$id} );"
        },
        {
            "trigger": "Walker-display_element\tWP Class Method",
            "contents": "${1:Walker}->display_element( ${2:\\$element}, ${3:\\$children_elements}, ${4:\\$max_depth}, ${5:\\$depth}, ${6:\\$args}, ${7:\\$output} );"
        },
        {
            "trigger": "Walker-end_el\tWP Class Method",
            "contents": "${1:Walker}->end_el( ${2:\\$output}, ${3:\\$object}, ${4:\\$depth}, ${5:\\$args} );"
        },
        {
            "trigger": "Walker-end_lvl\tWP Class Method",
            "contents": "${1:Walker}->end_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker-get_number_of_root_elements\tWP Class Method",
            "contents": "${1:Walker}->get_number_of_root_elements( ${2:\\$elements} );"
        },
        {
            "trigger": "Walker-paged_walk\tWP Class Method",
            "contents": "${1:Walker}->paged_walk( ${2:\\$elements}, ${3:\\$max_depth}, ${4:\\$page_num}, ${5:\\$per_page}, ${6:\\$args} );"
        },
        {
            "trigger": "Walker-start_el\tWP Class Method",
            "contents": "${1:Walker}->start_el( ${2:\\$output}, ${3:\\$object}, ${4:\\$depth}, ${5:\\$args}, ${6:\\$current_object_id} );"
        },
        {
            "trigger": "Walker-start_lvl\tWP Class Method",
            "contents": "${1:Walker}->start_lvl( ${2:\\$output}, ${3:\\$depth}, ${4:\\$args} );"
        },
        {
            "trigger": "Walker-unset_children\tWP Class Method",
            "contents": "${1:Walker}->unset_children( ${2:\\$e}, ${3:\\$children_elements} );"
        },
        {
            "trigger": "Walker-walk\tWP Class Method",
            "contents": "${1:Walker}->walk( ${2:\\$elements}, ${3:\\$max_depth}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_Admin_Bar-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Admin_Bar}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Admin_Bar-add_group\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->add_group( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Admin_Bar-add_menu\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->add_menu( ${2:\\$node} );"
        },
        {
            "trigger": "WP_Admin_Bar-add_menus\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->add_menus();"
        },
        {
            "trigger": "WP_Admin_Bar-add_node\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->add_node( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Admin_Bar-get_node\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->get_node( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Admin_Bar-get_nodes\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->get_nodes();"
        },
        {
            "trigger": "WP_Admin_Bar-initialize\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->initialize();"
        },
        {
            "trigger": "WP_Admin_Bar-remove_menu\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->remove_menu( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Admin_Bar-remove_node\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->remove_node( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Admin_Bar-render\tWP Class Method",
            "contents": "${1:WP_Admin_Bar}->render();"
        },
        {
            "trigger": "WP_Ajax_Response-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Ajax_Response( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Ajax_Response-add\tWP Class Method",
            "contents": "${1:WP_Ajax_Response}->add( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Ajax_Response-send\tWP Class Method",
            "contents": "${1:WP_Ajax_Response}->send();"
        },
        {
            "trigger": "WP_Ajax_Upgrader_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Ajax_Upgrader_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Ajax_Upgrader_Skin-error\tWP Class Method",
            "contents": "${1:WP_Ajax_Upgrader_Skin}->error( ${2:\\$errors}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Ajax_Upgrader_Skin-feedback\tWP Class Method",
            "contents": "${1:WP_Ajax_Upgrader_Skin}->feedback( ${2:\\$data}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Ajax_Upgrader_Skin-get_error_messages\tWP Class Method",
            "contents": "${1:WP_Ajax_Upgrader_Skin}->get_error_messages();"
        },
        {
            "trigger": "WP_Ajax_Upgrader_Skin-get_errors\tWP Class Method",
            "contents": "${1:WP_Ajax_Upgrader_Skin}->get_errors();"
        },
        {
            "trigger": "WP_Automatic_Updater-is_disabled\tWP Class Method",
            "contents": "${1:WP_Automatic_Updater}->is_disabled();"
        },
        {
            "trigger": "WP_Automatic_Updater-is_vcs_checkout\tWP Class Method",
            "contents": "${1:WP_Automatic_Updater}->is_vcs_checkout( ${2:\\$context} );"
        },
        {
            "trigger": "WP_Automatic_Updater-run\tWP Class Method",
            "contents": "${1:WP_Automatic_Updater}->run();"
        },
        {
            "trigger": "WP_Automatic_Updater-should_update\tWP Class Method",
            "contents": "${1:WP_Automatic_Updater}->should_update( ${2:\\$type}, ${3:\\$item}, ${4:\\$context} );"
        },
        {
            "trigger": "WP_Automatic_Updater-update\tWP Class Method",
            "contents": "${1:WP_Automatic_Updater}->update( ${2:\\$type}, ${3:\\$item} );"
        },
        {
            "trigger": "WP_Block_Parser_Block-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Block_Parser_Block( ${3:\\$name}, ${4:\\$attrs}, ${5:\\$innerBlocks}, ${6:\\$innerHTML}, ${7:\\$innerContent} );"
        },
        {
            "trigger": "WP_Block_Parser_Frame-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Block_Parser_Frame( ${3:\\$block}, ${4:\\$token_start}, ${5:\\$token_length}, ${6:\\$prev_offset}, ${7:\\$leading_html_start} );"
        },
        {
            "trigger": "WP_Block_Parser-add_block_from_stack\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->add_block_from_stack( ${2:\\$end_offset} );"
        },
        {
            "trigger": "WP_Block_Parser-add_freeform\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->add_freeform( ${2:\\$length} );"
        },
        {
            "trigger": "WP_Block_Parser-add_inner_block\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->add_inner_block( ${2:\\$block}, ${3:\\$token_start}, ${4:\\$token_length}, ${5:\\$last_offset} );"
        },
        {
            "trigger": "WP_Block_Parser-freeform\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->freeform( ${2:\\$innerHTML} );"
        },
        {
            "trigger": "WP_Block_Parser-next_token\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->next_token();"
        },
        {
            "trigger": "WP_Block_Parser-parse\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->parse( ${2:\\$document} );"
        },
        {
            "trigger": "WP_Block_Parser-proceed\tWP Class Method",
            "contents": "${1:WP_Block_Parser}->proceed();"
        },
        {
            "trigger": "WP_Block_Styles_Registry-get_all_registered\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}->get_all_registered();"
        },
        {
            "trigger": "WP_Block_Styles_Registry-get_instance\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}::get_instance();"
        },
        {
            "trigger": "WP_Block_Styles_Registry-get_registered\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}->get_registered( ${2:\\$block_name}, ${3:\\$block_style_name} );"
        },
        {
            "trigger": "WP_Block_Styles_Registry-get_registered_styles_for_block\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}->get_registered_styles_for_block( ${2:\\$block_name} );"
        },
        {
            "trigger": "WP_Block_Styles_Registry-is_registered\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}->is_registered( ${2:\\$block_name}, ${3:\\$block_style_name} );"
        },
        {
            "trigger": "WP_Block_Styles_Registry-register\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}->register( ${2:\\$block_name}, ${3:\\$style_properties} );"
        },
        {
            "trigger": "WP_Block_Styles_Registry-unregister\tWP Class Method",
            "contents": "${1:WP_Block_Styles_Registry}->unregister( ${2:\\$block_name}, ${3:\\$block_style_name} );"
        },
        {
            "trigger": "WP_Block_Type_Registry-get_all_registered\tWP Class Method",
            "contents": "${1:WP_Block_Type_Registry}->get_all_registered();"
        },
        {
            "trigger": "WP_Block_Type_Registry-get_instance\tWP Class Method",
            "contents": "${1:WP_Block_Type_Registry}::get_instance();"
        },
        {
            "trigger": "WP_Block_Type_Registry-get_registered\tWP Class Method",
            "contents": "${1:WP_Block_Type_Registry}->get_registered( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Block_Type_Registry-is_registered\tWP Class Method",
            "contents": "${1:WP_Block_Type_Registry}->is_registered( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Block_Type_Registry-register\tWP Class Method",
            "contents": "${1:WP_Block_Type_Registry}->register( ${2:\\$name}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Block_Type_Registry-unregister\tWP Class Method",
            "contents": "${1:WP_Block_Type_Registry}->unregister( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Block_Type-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Block_Type( ${3:\\$block_type}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_Block_Type-get_attributes\tWP Class Method",
            "contents": "${1:WP_Block_Type}->get_attributes();"
        },
        {
            "trigger": "WP_Block_Type-is_dynamic\tWP Class Method",
            "contents": "${1:WP_Block_Type}->is_dynamic();"
        },
        {
            "trigger": "WP_Block_Type-prepare_attributes_for_render\tWP Class Method",
            "contents": "${1:WP_Block_Type}->prepare_attributes_for_render( ${2:\\$attributes} );"
        },
        {
            "trigger": "WP_Block_Type-render\tWP Class Method",
            "contents": "${1:WP_Block_Type}->render( ${2:\\$attributes}, ${3:\\$content} );"
        },
        {
            "trigger": "WP_Block_Type-set_props\tWP Class Method",
            "contents": "${1:WP_Block_Type}->set_props( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Comment_Query-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Comment_Query}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_Comment_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Comment_Query( ${3:\\$query} );"
        },
        {
            "trigger": "WP_Comment_Query-get_comments\tWP Class Method",
            "contents": "${1:WP_Comment_Query}->get_comments();"
        },
        {
            "trigger": "WP_Comment_Query-parse_query\tWP Class Method",
            "contents": "${1:WP_Comment_Query}->parse_query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Comment_Query-query\tWP Class Method",
            "contents": "${1:WP_Comment_Query}->query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Comment-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Comment( ${3:\\$comment} );"
        },
        {
            "trigger": "WP_Comment-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Comment}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Comment-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Comment}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Comment-add_child\tWP Class Method",
            "contents": "${1:WP_Comment}->add_child( ${2:\\$child} );"
        },
        {
            "trigger": "WP_Comment-get_child\tWP Class Method",
            "contents": "${1:WP_Comment}->get_child( ${2:\\$child_id} );"
        },
        {
            "trigger": "WP_Comment-get_children\tWP Class Method",
            "contents": "${1:WP_Comment}->get_children( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Comment-get_instance\tWP Class Method",
            "contents": "${1:WP_Comment}::get_instance( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Comment-populated_children\tWP Class Method",
            "contents": "${1:WP_Comment}->populated_children( ${2:\\$set} );"
        },
        {
            "trigger": "WP_Comment-to_array\tWP Class Method",
            "contents": "${1:WP_Comment}->to_array();"
        },
        {
            "trigger": "WP_Comments_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Comments_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Comments_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Comments_List_Table-column_author\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->column_author( ${2:\\$comment} );"
        },
        {
            "trigger": "WP_Comments_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->column_cb( ${2:\\$comment} );"
        },
        {
            "trigger": "WP_Comments_List_Table-column_comment\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->column_comment( ${2:\\$comment} );"
        },
        {
            "trigger": "WP_Comments_List_Table-column_date\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->column_date( ${2:\\$comment} );"
        },
        {
            "trigger": "WP_Comments_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->column_default( ${2:\\$comment}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_Comments_List_Table-column_response\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->column_response( ${2:\\$comment} );"
        },
        {
            "trigger": "WP_Comments_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->current_action();"
        },
        {
            "trigger": "WP_Comments_List_Table-display\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->display();"
        },
        {
            "trigger": "WP_Comments_List_Table-floated_admin_avatar\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->floated_admin_avatar( ${2:\\$name}, ${3:\\$comment_ID} );"
        },
        {
            "trigger": "WP_Comments_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Comments_List_Table-get_per_page\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->get_per_page( ${2:\\$comment_status} );"
        },
        {
            "trigger": "WP_Comments_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Comments_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Comments_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Comments_List_Table}->single_row( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Community_Events-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Community_Events( ${3:\\$user_id}, ${4:\\$user_location} );"
        },
        {
            "trigger": "WP_Community_Events-get_cached_events\tWP Class Method",
            "contents": "${1:WP_Community_Events}->get_cached_events();"
        },
        {
            "trigger": "WP_Community_Events-get_events\tWP Class Method",
            "contents": "${1:WP_Community_Events}->get_events( ${2:\\$location_search}, ${3:\\$timezone} );"
        },
        {
            "trigger": "WP_Community_Events-get_unsafe_client_ip\tWP Class Method",
            "contents": "${1:WP_Community_Events}::get_unsafe_client_ip();"
        },
        {
            "trigger": "WP_Customize_Background_Image_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Background_Image_Control( ${3:\\$manager} );"
        },
        {
            "trigger": "WP_Customize_Background_Image_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Background_Image_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Background_Image_Setting-update\tWP Class Method",
            "contents": "${1:WP_Customize_Background_Image_Setting}->update( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Background_Position_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Background_Position_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Background_Position_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Background_Position_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Code_Editor_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Code_Editor_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Code_Editor_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Code_Editor_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Code_Editor_Control-json\tWP Class Method",
            "contents": "${1:WP_Customize_Code_Editor_Control}->json();"
        },
        {
            "trigger": "WP_Customize_Code_Editor_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Code_Editor_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Color_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Color_Control( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Color_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Color_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Color_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Color_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Color_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Color_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Color_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Color_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Control( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Control-active\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->active();"
        },
        {
            "trigger": "WP_Customize_Control-active_callback\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->active_callback();"
        },
        {
            "trigger": "WP_Customize_Control-check_capabilities\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->check_capabilities();"
        },
        {
            "trigger": "WP_Customize_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Control-get_content\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->get_content();"
        },
        {
            "trigger": "WP_Customize_Control-get_link\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->get_link( ${2:\\$setting_key} );"
        },
        {
            "trigger": "WP_Customize_Control-input_attrs\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->input_attrs();"
        },
        {
            "trigger": "WP_Customize_Control-json\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->json();"
        },
        {
            "trigger": "WP_Customize_Control-link\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->link( ${2:\\$setting_key} );"
        },
        {
            "trigger": "WP_Customize_Control-maybe_render\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->maybe_render();"
        },
        {
            "trigger": "WP_Customize_Control-print_template\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->print_template();"
        },
        {
            "trigger": "WP_Customize_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Control-value\tWP Class Method",
            "contents": "${1:WP_Customize_Control}->value( ${2:\\$setting_key} );"
        },
        {
            "trigger": "WP_Customize_Cropped_Image_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Cropped_Image_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Cropped_Image_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Cropped_Image_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Custom_CSS_Setting-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Custom_CSS_Setting( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Custom_CSS_Setting-filter_previewed_wp_get_custom_css\tWP Class Method",
            "contents": "${1:WP_Customize_Custom_CSS_Setting}->filter_previewed_wp_get_custom_css( ${2:\\$css}, ${3:\\$stylesheet} );"
        },
        {
            "trigger": "WP_Customize_Custom_CSS_Setting-preview\tWP Class Method",
            "contents": "${1:WP_Customize_Custom_CSS_Setting}->preview();"
        },
        {
            "trigger": "WP_Customize_Custom_CSS_Setting-update\tWP Class Method",
            "contents": "${1:WP_Customize_Custom_CSS_Setting}->update( ${2:\\$css} );"
        },
        {
            "trigger": "WP_Customize_Custom_CSS_Setting-validate\tWP Class Method",
            "contents": "${1:WP_Customize_Custom_CSS_Setting}->validate( ${2:\\$css} );"
        },
        {
            "trigger": "WP_Customize_Custom_CSS_Setting-value\tWP Class Method",
            "contents": "${1:WP_Customize_Custom_CSS_Setting}->value();"
        },
        {
            "trigger": "WP_Customize_Date_Time_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Date_Time_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Date_Time_Control-format_gmt_offset\tWP Class Method",
            "contents": "${1:WP_Customize_Date_Time_Control}->format_gmt_offset( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Customize_Date_Time_Control-get_month_choices\tWP Class Method",
            "contents": "${1:WP_Customize_Date_Time_Control}->get_month_choices();"
        },
        {
            "trigger": "WP_Customize_Date_Time_Control-get_timezone_info\tWP Class Method",
            "contents": "${1:WP_Customize_Date_Time_Control}->get_timezone_info();"
        },
        {
            "trigger": "WP_Customize_Date_Time_Control-json\tWP Class Method",
            "contents": "${1:WP_Customize_Date_Time_Control}->json();"
        },
        {
            "trigger": "WP_Customize_Date_Time_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Date_Time_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Filter_Setting-update\tWP Class Method",
            "contents": "${1:WP_Customize_Filter_Setting}->update( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Header_Image_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Header_Image_Control( ${3:\\$manager} );"
        },
        {
            "trigger": "WP_Customize_Header_Image_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Header_Image_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Header_Image_Control-get_current_image_src\tWP Class Method",
            "contents": "${1:WP_Customize_Header_Image_Control}->get_current_image_src();"
        },
        {
            "trigger": "WP_Customize_Header_Image_Control-prepare_control\tWP Class Method",
            "contents": "${1:WP_Customize_Header_Image_Control}->prepare_control();"
        },
        {
            "trigger": "WP_Customize_Header_Image_Control-print_header_image_template\tWP Class Method",
            "contents": "${1:WP_Customize_Header_Image_Control}->print_header_image_template();"
        },
        {
            "trigger": "WP_Customize_Header_Image_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Header_Image_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Header_Image_Setting-update\tWP Class Method",
            "contents": "${1:WP_Customize_Header_Image_Setting}->update( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Manager-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Manager( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-_filter_revision_post_has_changed\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_filter_revision_post_has_changed( ${2:\\$post_has_changed}, ${3:\\$last_revision}, ${4:\\$post} );"
        },
        {
            "trigger": "WP_Customize_Manager-_publish_changeset_values\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_publish_changeset_values( ${2:\\$changeset_post_id} );"
        },
        {
            "trigger": "WP_Customize_Manager-_render_custom_logo_partial\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_render_custom_logo_partial();"
        },
        {
            "trigger": "WP_Customize_Manager-_sanitize_background_setting\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_sanitize_background_setting( ${2:\\$value}, ${3:\\$setting} );"
        },
        {
            "trigger": "WP_Customize_Manager-_sanitize_external_header_video\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_sanitize_external_header_video( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Manager-_sanitize_header_textcolor\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_sanitize_header_textcolor( ${2:\\$color} );"
        },
        {
            "trigger": "WP_Customize_Manager-_save_starter_content_changeset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_save_starter_content_changeset();"
        },
        {
            "trigger": "WP_Customize_Manager-_validate_external_header_video\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_validate_external_header_video( ${2:\\$validity}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Manager-_validate_header_video\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Manager}->_validate_header_video( ${2:\\$validity}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_control\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_control( ${2:\\$id}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_customize_screen_to_heartbeat_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_customize_screen_to_heartbeat_settings( ${2:\\$settings} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_dynamic_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_dynamic_settings( ${2:\\$setting_ids} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_panel\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_panel( ${2:\\$id}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_section\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_section( ${2:\\$id}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_setting\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_setting( ${2:\\$id}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-add_state_query_params\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->add_state_query_params( ${2:\\$url} );"
        },
        {
            "trigger": "WP_Customize_Manager-after_setup_theme\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->after_setup_theme();"
        },
        {
            "trigger": "WP_Customize_Manager-autosaved\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->autosaved();"
        },
        {
            "trigger": "WP_Customize_Manager-branching\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->branching();"
        },
        {
            "trigger": "WP_Customize_Manager-changeset_data\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->changeset_data();"
        },
        {
            "trigger": "WP_Customize_Manager-changeset_post_id\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->changeset_post_id();"
        },
        {
            "trigger": "WP_Customize_Manager-changeset_uuid\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->changeset_uuid();"
        },
        {
            "trigger": "WP_Customize_Manager-check_changeset_lock_with_heartbeat\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->check_changeset_lock_with_heartbeat( ${2:\\$response}, ${3:\\$data}, ${4:\\$screen_id} );"
        },
        {
            "trigger": "WP_Customize_Manager-containers\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->containers();"
        },
        {
            "trigger": "WP_Customize_Manager-controls\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->controls();"
        },
        {
            "trigger": "WP_Customize_Manager-current_theme\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->current_theme( ${2:\\$current_theme} );"
        },
        {
            "trigger": "WP_Customize_Manager-customize_pane_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->customize_pane_settings();"
        },
        {
            "trigger": "WP_Customize_Manager-customize_preview_init\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->customize_preview_init();"
        },
        {
            "trigger": "WP_Customize_Manager-customize_preview_loading_style\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->customize_preview_loading_style();"
        },
        {
            "trigger": "WP_Customize_Manager-customize_preview_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->customize_preview_settings();"
        },
        {
            "trigger": "WP_Customize_Manager-doing_ajax\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->doing_ajax( ${2:\\$action} );"
        },
        {
            "trigger": "WP_Customize_Manager-enqueue_control_scripts\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->enqueue_control_scripts();"
        },
        {
            "trigger": "WP_Customize_Manager-establish_loaded_changeset\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->establish_loaded_changeset();"
        },
        {
            "trigger": "WP_Customize_Manager-export_header_video_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->export_header_video_settings( ${2:\\$response}, ${3:\\$selective_refresh}, ${4:\\$partials} );"
        },
        {
            "trigger": "WP_Customize_Manager-filter_iframe_security_headers\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->filter_iframe_security_headers( ${2:\\$headers} );"
        },
        {
            "trigger": "WP_Customize_Manager-find_changeset_post_id\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->find_changeset_post_id( ${2:\\$uuid} );"
        },
        {
            "trigger": "WP_Customize_Manager-get_allowed_urls\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_allowed_urls();"
        },
        {
            "trigger": "WP_Customize_Manager-get_autofocus\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_autofocus();"
        },
        {
            "trigger": "WP_Customize_Manager-get_control\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_control( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-get_document_title_template\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_document_title_template();"
        },
        {
            "trigger": "WP_Customize_Manager-get_messenger_channel\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_messenger_channel();"
        },
        {
            "trigger": "WP_Customize_Manager-get_nonces\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_nonces();"
        },
        {
            "trigger": "WP_Customize_Manager-get_panel\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_panel( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-get_preview_url\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_preview_url();"
        },
        {
            "trigger": "WP_Customize_Manager-get_previewable_devices\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_previewable_devices();"
        },
        {
            "trigger": "WP_Customize_Manager-get_return_url\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_return_url();"
        },
        {
            "trigger": "WP_Customize_Manager-get_section\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_section( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-get_setting\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_setting( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-get_stylesheet\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_stylesheet();"
        },
        {
            "trigger": "WP_Customize_Manager-get_stylesheet_root\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_stylesheet_root();"
        },
        {
            "trigger": "WP_Customize_Manager-get_template\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_template();"
        },
        {
            "trigger": "WP_Customize_Manager-get_template_root\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->get_template_root();"
        },
        {
            "trigger": "WP_Customize_Manager-grant_edit_post_capability_for_changeset\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->grant_edit_post_capability_for_changeset( ${2:\\$caps}, ${3:\\$cap}, ${4:\\$user_id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-handle_changeset_trash_request\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->handle_changeset_trash_request();"
        },
        {
            "trigger": "WP_Customize_Manager-handle_dismiss_autosave_or_lock_request\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->handle_dismiss_autosave_or_lock_request();"
        },
        {
            "trigger": "WP_Customize_Manager-handle_load_themes_request\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->handle_load_themes_request();"
        },
        {
            "trigger": "WP_Customize_Manager-handle_override_changeset_lock_request\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->handle_override_changeset_lock_request();"
        },
        {
            "trigger": "WP_Customize_Manager-has_published_pages\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->has_published_pages();"
        },
        {
            "trigger": "WP_Customize_Manager-import_theme_starter_content\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->import_theme_starter_content( ${2:\\$starter_content} );"
        },
        {
            "trigger": "WP_Customize_Manager-is_cross_domain\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->is_cross_domain();"
        },
        {
            "trigger": "WP_Customize_Manager-is_ios\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->is_ios();"
        },
        {
            "trigger": "WP_Customize_Manager-is_preview\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->is_preview();"
        },
        {
            "trigger": "WP_Customize_Manager-is_theme_active\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->is_theme_active();"
        },
        {
            "trigger": "WP_Customize_Manager-panels\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->panels();"
        },
        {
            "trigger": "WP_Customize_Manager-post_value\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->post_value( ${2:\\$setting}, ${3:\\$default} );"
        },
        {
            "trigger": "WP_Customize_Manager-prepare_controls\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->prepare_controls();"
        },
        {
            "trigger": "WP_Customize_Manager-prepare_setting_validity_for_js\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->prepare_setting_validity_for_js( ${2:\\$validity} );"
        },
        {
            "trigger": "WP_Customize_Manager-refresh_changeset_lock\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->refresh_changeset_lock( ${2:\\$changeset_post_id} );"
        },
        {
            "trigger": "WP_Customize_Manager-refresh_nonces\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->refresh_nonces();"
        },
        {
            "trigger": "WP_Customize_Manager-register_control_type\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->register_control_type( ${2:\\$control} );"
        },
        {
            "trigger": "WP_Customize_Manager-register_controls\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->register_controls();"
        },
        {
            "trigger": "WP_Customize_Manager-register_dynamic_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->register_dynamic_settings();"
        },
        {
            "trigger": "WP_Customize_Manager-register_panel_type\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->register_panel_type( ${2:\\$panel} );"
        },
        {
            "trigger": "WP_Customize_Manager-register_section_type\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->register_section_type( ${2:\\$section} );"
        },
        {
            "trigger": "WP_Customize_Manager-remove_control\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->remove_control( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-remove_frameless_preview_messenger_channel\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->remove_frameless_preview_messenger_channel();"
        },
        {
            "trigger": "WP_Customize_Manager-remove_panel\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->remove_panel( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-remove_section\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->remove_section( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-remove_setting\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->remove_setting( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Manager-render_control_templates\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->render_control_templates();"
        },
        {
            "trigger": "WP_Customize_Manager-render_panel_templates\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->render_panel_templates();"
        },
        {
            "trigger": "WP_Customize_Manager-render_section_templates\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->render_section_templates();"
        },
        {
            "trigger": "WP_Customize_Manager-save\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->save();"
        },
        {
            "trigger": "WP_Customize_Manager-save_changeset_post\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->save_changeset_post( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-sections\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->sections();"
        },
        {
            "trigger": "WP_Customize_Manager-set_autofocus\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->set_autofocus( ${2:\\$autofocus} );"
        },
        {
            "trigger": "WP_Customize_Manager-set_changeset_lock\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->set_changeset_lock( ${2:\\$changeset_post_id}, ${3:\\$take_over} );"
        },
        {
            "trigger": "WP_Customize_Manager-set_post_value\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->set_post_value( ${2:\\$setting_id}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Manager-set_preview_url\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->set_preview_url( ${2:\\$preview_url} );"
        },
        {
            "trigger": "WP_Customize_Manager-set_return_url\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->set_return_url( ${2:\\$return_url} );"
        },
        {
            "trigger": "WP_Customize_Manager-settings\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->settings();"
        },
        {
            "trigger": "WP_Customize_Manager-settings_previewed\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->settings_previewed();"
        },
        {
            "trigger": "WP_Customize_Manager-setup_theme\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->setup_theme();"
        },
        {
            "trigger": "WP_Customize_Manager-start_previewing_theme\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->start_previewing_theme();"
        },
        {
            "trigger": "WP_Customize_Manager-stop_previewing_theme\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->stop_previewing_theme();"
        },
        {
            "trigger": "WP_Customize_Manager-theme\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->theme();"
        },
        {
            "trigger": "WP_Customize_Manager-trash_changeset_post\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->trash_changeset_post( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Customize_Manager-unsanitized_post_values\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->unsanitized_post_values( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Manager-validate_setting_values\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->validate_setting_values( ${2:\\$setting_values}, ${3:\\$options} );"
        },
        {
            "trigger": "WP_Customize_Manager-wp_loaded\tWP Class Method",
            "contents": "${1:WP_Customize_Manager}->wp_loaded();"
        },
        {
            "trigger": "WP_Customize_Media_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Media_Control( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Media_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Media_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Media_Control-enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Media_Control}->enqueue();"
        },
        {
            "trigger": "WP_Customize_Media_Control-get_default_button_labels\tWP Class Method",
            "contents": "${1:WP_Customize_Media_Control}->get_default_button_labels();"
        },
        {
            "trigger": "WP_Customize_Media_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Media_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Media_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Media_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Control-json\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Control}->json();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Nav_Menu_Item_Control( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Control-json\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Control}->json();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Nav_Menu_Item_Setting( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-amend_customize_save_response\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->amend_customize_save_response( ${2:\\$data} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-filter_wp_get_nav_menu_items\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->filter_wp_get_nav_menu_items( ${2:\\$items}, ${3:\\$menu}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-flush_cached_value\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->flush_cached_value( ${2:\\$menu_id}, ${3:\\$menu_item_id} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-preview\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->preview();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-sanitize\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->sanitize( ${2:\\$menu_item_value} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-sort_wp_get_nav_menu_items\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}::sort_wp_get_nav_menu_items( ${2:\\$items}, ${3:\\$menu}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-value\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->value();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Item_Setting-value_as_wp_post_nav_menu_item\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Item_Setting}->value_as_wp_post_nav_menu_item();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Location_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Location_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Location_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Location_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Locations_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Locations_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Locations_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Locations_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Section-json\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Section}->json();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Nav_Menu_Setting( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-amend_customize_save_response\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->amend_customize_save_response( ${2:\\$data} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-filter_nav_menu_options\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->filter_nav_menu_options( ${2:\\$nav_menu_options} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-filter_wp_get_nav_menu_object\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->filter_wp_get_nav_menu_object( ${2:\\$menu_obj}, ${3:\\$menu_id} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-filter_wp_get_nav_menus\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->filter_wp_get_nav_menus( ${2:\\$menus}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-preview\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->preview();"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-sanitize\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->sanitize( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menu_Setting-value\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menu_Setting}->value();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus_Panel-render_screen_options\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus_Panel}->render_screen_options();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Nav_Menus( ${3:\\$manager} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-ajax_insert_auto_draft_post\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->ajax_insert_auto_draft_post();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-ajax_load_available_items\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->ajax_load_available_items();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-ajax_search_available_items\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->ajax_search_available_items();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-available_item_types\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->available_item_types();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-available_items_template\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->available_items_template();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-customize_dynamic_partial_args\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->customize_dynamic_partial_args( ${2:\\$partial_args}, ${3:\\$partial_id} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-customize_preview_enqueue_deps\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->customize_preview_enqueue_deps();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-customize_preview_init\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->customize_preview_init();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-customize_register\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->customize_register();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-enqueue_scripts\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->enqueue_scripts();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-export_partial_rendered_nav_menu_instances\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->export_partial_rendered_nav_menu_instances( ${2:\\$response} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-export_preview_data\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->export_preview_data();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-filter_dynamic_setting_args\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->filter_dynamic_setting_args( ${2:\\$setting_args}, ${3:\\$setting_id} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-filter_dynamic_setting_class\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->filter_dynamic_setting_class( ${2:\\$setting_class}, ${3:\\$setting_id}, ${4:\\$setting_args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-filter_nonces\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->filter_nonces( ${2:\\$nonces} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-filter_wp_nav_menu\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->filter_wp_nav_menu( ${2:\\$nav_menu_content}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-filter_wp_nav_menu_args\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->filter_wp_nav_menu_args( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-hash_nav_menu_args\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->hash_nav_menu_args( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-insert_auto_draft_post\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->insert_auto_draft_post( ${2:\\$postarr} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-intval_base10\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->intval_base10( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-load_available_items_query\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->load_available_items_query( ${2:\\$type}, ${3:\\$object}, ${4:\\$page} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-make_auto_draft_status_previewable\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->make_auto_draft_status_previewable();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-print_templates\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->print_templates();"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-render_nav_menu_partial\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->render_nav_menu_partial( ${2:\\$partial}, ${3:\\$nav_menu_args} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-sanitize_nav_menus_created_posts\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->sanitize_nav_menus_created_posts( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-save_nav_menus_created_posts\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->save_nav_menus_created_posts( ${2:\\$setting} );"
        },
        {
            "trigger": "WP_Customize_Nav_Menus-search_available_items_query\tWP Class Method",
            "contents": "${1:WP_Customize_Nav_Menus}->search_available_items_query( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Panel-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Panel( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Panel-active\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->active();"
        },
        {
            "trigger": "WP_Customize_Panel-active_callback\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->active_callback();"
        },
        {
            "trigger": "WP_Customize_Panel-check_capabilities\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->check_capabilities();"
        },
        {
            "trigger": "WP_Customize_Panel-get_content\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->get_content();"
        },
        {
            "trigger": "WP_Customize_Panel-json\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->json();"
        },
        {
            "trigger": "WP_Customize_Panel-maybe_render\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->maybe_render();"
        },
        {
            "trigger": "WP_Customize_Panel-print_template\tWP Class Method",
            "contents": "${1:WP_Customize_Panel}->print_template();"
        },
        {
            "trigger": "WP_Customize_Partial-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Partial( ${3:\\$component}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Partial-check_capabilities\tWP Class Method",
            "contents": "${1:WP_Customize_Partial}->check_capabilities();"
        },
        {
            "trigger": "WP_Customize_Partial-id_data\tWP Class Method",
            "contents": "${1:WP_Customize_Partial}->id_data();"
        },
        {
            "trigger": "WP_Customize_Partial-json\tWP Class Method",
            "contents": "${1:WP_Customize_Partial}->json();"
        },
        {
            "trigger": "WP_Customize_Partial-render\tWP Class Method",
            "contents": "${1:WP_Customize_Partial}->render( ${2:\\$container_context} );"
        },
        {
            "trigger": "WP_Customize_Partial-render_callback\tWP Class Method",
            "contents": "${1:WP_Customize_Partial}->render_callback( ${2:\\$partial}, ${3:\\$context} );"
        },
        {
            "trigger": "WP_Customize_Section-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Section( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Section-active\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->active();"
        },
        {
            "trigger": "WP_Customize_Section-active_callback\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->active_callback();"
        },
        {
            "trigger": "WP_Customize_Section-check_capabilities\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->check_capabilities();"
        },
        {
            "trigger": "WP_Customize_Section-get_content\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->get_content();"
        },
        {
            "trigger": "WP_Customize_Section-json\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->json();"
        },
        {
            "trigger": "WP_Customize_Section-maybe_render\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->maybe_render();"
        },
        {
            "trigger": "WP_Customize_Section-print_template\tWP Class Method",
            "contents": "${1:WP_Customize_Section}->print_template();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Selective_Refresh( ${3:\\$manager} );"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-add_dynamic_partials\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->add_dynamic_partials( ${2:\\$partial_ids} );"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-add_partial\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->add_partial( ${2:\\$id}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-enqueue_preview_scripts\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->enqueue_preview_scripts();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-export_preview_data\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->export_preview_data();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-get_partial\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->get_partial( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-handle_error\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->handle_error( ${2:\\$errno}, ${3:\\$errstr}, ${4:\\$errfile}, ${5:\\$errline} );"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-handle_render_partials_request\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->handle_render_partials_request();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-init_preview\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->init_preview();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-is_render_partials_request\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->is_render_partials_request();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-partials\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->partials();"
        },
        {
            "trigger": "WP_Customize_Selective_Refresh-remove_partial\tWP Class Method",
            "contents": "${1:WP_Customize_Selective_Refresh}->remove_partial( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Customize_Setting-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Setting( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Setting-_clear_aggregated_multidimensional_preview_applied_flag\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Setting}->_clear_aggregated_multidimensional_preview_applied_flag();"
        },
        {
            "trigger": "WP_Customize_Setting-_multidimensional_preview_filter\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Setting}->_multidimensional_preview_filter( ${2:\\$original} );"
        },
        {
            "trigger": "WP_Customize_Setting-_preview_filter\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Customize_Setting}->_preview_filter( ${2:\\$original} );"
        },
        {
            "trigger": "WP_Customize_Setting-check_capabilities\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->check_capabilities();"
        },
        {
            "trigger": "WP_Customize_Setting-id_data\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->id_data();"
        },
        {
            "trigger": "WP_Customize_Setting-is_current_blog_previewed\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->is_current_blog_previewed();"
        },
        {
            "trigger": "WP_Customize_Setting-js_value\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->js_value();"
        },
        {
            "trigger": "WP_Customize_Setting-json\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->json();"
        },
        {
            "trigger": "WP_Customize_Setting-post_value\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->post_value( ${2:\\$default} );"
        },
        {
            "trigger": "WP_Customize_Setting-preview\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->preview();"
        },
        {
            "trigger": "WP_Customize_Setting-sanitize\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->sanitize( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Setting-save\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->save();"
        },
        {
            "trigger": "WP_Customize_Setting-validate\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->validate( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Setting-value\tWP Class Method",
            "contents": "${1:WP_Customize_Setting}->value();"
        },
        {
            "trigger": "WP_Customize_Sidebar_Section-active_callback\tWP Class Method",
            "contents": "${1:WP_Customize_Sidebar_Section}->active_callback();"
        },
        {
            "trigger": "WP_Customize_Sidebar_Section-json\tWP Class Method",
            "contents": "${1:WP_Customize_Sidebar_Section}->json();"
        },
        {
            "trigger": "WP_Customize_Site_Icon_Control-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Site_Icon_Control( ${3:\\$manager}, ${4:\\$id}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Site_Icon_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Site_Icon_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Theme_Control-content_template\tWP Class Method",
            "contents": "${1:WP_Customize_Theme_Control}->content_template();"
        },
        {
            "trigger": "WP_Customize_Theme_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Customize_Theme_Control}->render_content();"
        },
        {
            "trigger": "WP_Customize_Theme_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Theme_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Themes_Section-json\tWP Class Method",
            "contents": "${1:WP_Customize_Themes_Section}->json();"
        },
        {
            "trigger": "WP_Customize_Upload_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Customize_Upload_Control}->to_json();"
        },
        {
            "trigger": "WP_Customize_Widgets-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Customize_Widgets( ${3:\\$manager} );"
        },
        {
            "trigger": "WP_Customize_Widgets-call_widget_update\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->call_widget_update( ${2:\\$widget_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-capture_filter_pre_get_option\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->capture_filter_pre_get_option( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Widgets-capture_filter_pre_update_option\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->capture_filter_pre_update_option( ${2:\\$new_value}, ${3:\\$option_name}, ${4:\\$old_value} );"
        },
        {
            "trigger": "WP_Customize_Widgets-customize_controls_init\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->customize_controls_init();"
        },
        {
            "trigger": "WP_Customize_Widgets-customize_dynamic_partial_args\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->customize_dynamic_partial_args( ${2:\\$partial_args}, ${3:\\$partial_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-customize_preview_enqueue\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->customize_preview_enqueue();"
        },
        {
            "trigger": "WP_Customize_Widgets-customize_preview_init\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->customize_preview_init();"
        },
        {
            "trigger": "WP_Customize_Widgets-customize_register\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->customize_register();"
        },
        {
            "trigger": "WP_Customize_Widgets-end_dynamic_sidebar\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->end_dynamic_sidebar( ${2:\\$index} );"
        },
        {
            "trigger": "WP_Customize_Widgets-enqueue_scripts\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->enqueue_scripts();"
        },
        {
            "trigger": "WP_Customize_Widgets-export_preview_data\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->export_preview_data();"
        },
        {
            "trigger": "WP_Customize_Widgets-filter_customize_dynamic_setting_args\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->filter_customize_dynamic_setting_args( ${2:\\$args}, ${3:\\$setting_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-filter_customize_value_old_sidebars_widgets_data\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->filter_customize_value_old_sidebars_widgets_data( ${2:\\$old_sidebars_widgets} );"
        },
        {
            "trigger": "WP_Customize_Widgets-filter_dynamic_sidebar_params\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->filter_dynamic_sidebar_params( ${2:\\$params} );"
        },
        {
            "trigger": "WP_Customize_Widgets-filter_option_sidebars_widgets_for_theme_switch\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->filter_option_sidebars_widgets_for_theme_switch( ${2:\\$sidebars_widgets} );"
        },
        {
            "trigger": "WP_Customize_Widgets-filter_sidebars_widgets_for_rendering_widget\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->filter_sidebars_widgets_for_rendering_widget( ${2:\\$sidebars_widgets} );"
        },
        {
            "trigger": "WP_Customize_Widgets-filter_wp_kses_allowed_data_attributes\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->filter_wp_kses_allowed_data_attributes( ${2:\\$allowed_html} );"
        },
        {
            "trigger": "WP_Customize_Widgets-get_available_widgets\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->get_available_widgets();"
        },
        {
            "trigger": "WP_Customize_Widgets-get_selective_refreshable_widgets\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->get_selective_refreshable_widgets();"
        },
        {
            "trigger": "WP_Customize_Widgets-get_setting_args\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->get_setting_args( ${2:\\$id}, ${3:\\$overrides} );"
        },
        {
            "trigger": "WP_Customize_Widgets-get_setting_id\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->get_setting_id( ${2:\\$widget_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-get_widget_control\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->get_widget_control( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Widgets-get_widget_control_parts\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->get_widget_control_parts( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Customize_Widgets-is_panel_active\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->is_panel_active();"
        },
        {
            "trigger": "WP_Customize_Widgets-is_sidebar_rendered\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->is_sidebar_rendered( ${2:\\$sidebar_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-is_wide_widget\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->is_wide_widget( ${2:\\$widget_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-is_widget_rendered\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->is_widget_rendered( ${2:\\$widget_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-is_widget_selective_refreshable\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->is_widget_selective_refreshable( ${2:\\$id_base} );"
        },
        {
            "trigger": "WP_Customize_Widgets-output_widget_control_templates\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->output_widget_control_templates();"
        },
        {
            "trigger": "WP_Customize_Widgets-override_sidebars_widgets_for_theme_switch\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->override_sidebars_widgets_for_theme_switch();"
        },
        {
            "trigger": "WP_Customize_Widgets-parse_widget_id\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->parse_widget_id( ${2:\\$widget_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-parse_widget_setting_id\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->parse_widget_setting_id( ${2:\\$setting_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-preview_sidebars_widgets\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->preview_sidebars_widgets( ${2:\\$sidebars_widgets} );"
        },
        {
            "trigger": "WP_Customize_Widgets-print_footer_scripts\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->print_footer_scripts();"
        },
        {
            "trigger": "WP_Customize_Widgets-print_preview_css\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->print_preview_css();"
        },
        {
            "trigger": "WP_Customize_Widgets-print_scripts\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->print_scripts();"
        },
        {
            "trigger": "WP_Customize_Widgets-print_styles\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->print_styles();"
        },
        {
            "trigger": "WP_Customize_Widgets-refresh_nonces\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->refresh_nonces( ${2:\\$nonces} );"
        },
        {
            "trigger": "WP_Customize_Widgets-register_settings\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->register_settings();"
        },
        {
            "trigger": "WP_Customize_Widgets-render_widget_partial\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->render_widget_partial( ${2:\\$partial}, ${3:\\$context} );"
        },
        {
            "trigger": "WP_Customize_Widgets-sanitize_sidebar_widgets\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->sanitize_sidebar_widgets( ${2:\\$widget_ids} );"
        },
        {
            "trigger": "WP_Customize_Widgets-sanitize_sidebar_widgets_js_instance\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->sanitize_sidebar_widgets_js_instance( ${2:\\$widget_ids} );"
        },
        {
            "trigger": "WP_Customize_Widgets-sanitize_widget_instance\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->sanitize_widget_instance( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Widgets-sanitize_widget_js_instance\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->sanitize_widget_js_instance( ${2:\\$value} );"
        },
        {
            "trigger": "WP_Customize_Widgets-schedule_customize_register\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->schedule_customize_register();"
        },
        {
            "trigger": "WP_Customize_Widgets-selective_refresh_init\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->selective_refresh_init();"
        },
        {
            "trigger": "WP_Customize_Widgets-start_dynamic_sidebar\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->start_dynamic_sidebar( ${2:\\$index} );"
        },
        {
            "trigger": "WP_Customize_Widgets-tally_rendered_widgets\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->tally_rendered_widgets( ${2:\\$widget} );"
        },
        {
            "trigger": "WP_Customize_Widgets-tally_sidebars_via_dynamic_sidebar_calls\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->tally_sidebars_via_dynamic_sidebar_calls( ${2:\\$has_widgets}, ${3:\\$sidebar_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-tally_sidebars_via_is_active_sidebar_calls\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->tally_sidebars_via_is_active_sidebar_calls( ${2:\\$is_active}, ${3:\\$sidebar_id} );"
        },
        {
            "trigger": "WP_Customize_Widgets-wp_ajax_update_widget\tWP Class Method",
            "contents": "${1:WP_Customize_Widgets}->wp_ajax_update_widget();"
        },
        {
            "trigger": "WP_Date_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Date_Query( ${3:\\$date_query}, ${4:\\$default_column} );"
        },
        {
            "trigger": "WP_Date_Query-build_mysql_datetime\tWP Class Method",
            "contents": "${1:WP_Date_Query}->build_mysql_datetime( ${2:\\$datetime}, ${3:\\$default_to_max} );"
        },
        {
            "trigger": "WP_Date_Query-build_time_query\tWP Class Method",
            "contents": "${1:WP_Date_Query}->build_time_query( ${2:\\$column}, ${3:\\$compare}, ${4:\\$hour}, ${5:\\$minute}, ${6:\\$second} );"
        },
        {
            "trigger": "WP_Date_Query-build_value\tWP Class Method",
            "contents": "${1:WP_Date_Query}->build_value( ${2:\\$compare}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Date_Query-get_compare\tWP Class Method",
            "contents": "${1:WP_Date_Query}->get_compare( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Date_Query-get_sql\tWP Class Method",
            "contents": "${1:WP_Date_Query}->get_sql();"
        },
        {
            "trigger": "WP_Date_Query-sanitize_query\tWP Class Method",
            "contents": "${1:WP_Date_Query}->sanitize_query( ${2:\\$queries}, ${3:\\$parent_query} );"
        },
        {
            "trigger": "WP_Date_Query-validate_column\tWP Class Method",
            "contents": "${1:WP_Date_Query}->validate_column( ${2:\\$column} );"
        },
        {
            "trigger": "WP_Date_Query-validate_date_values\tWP Class Method",
            "contents": "${1:WP_Date_Query}->validate_date_values( ${2:\\$date_query} );"
        },
        {
            "trigger": "WP_Debug_Data-check_for_updates\tWP Class Method",
            "contents": "${1:WP_Debug_Data}::check_for_updates();"
        },
        {
            "trigger": "WP_Debug_Data-debug_data\tWP Class Method",
            "contents": "${1:WP_Debug_Data}::debug_data();"
        },
        {
            "trigger": "WP_Debug_Data-format\tWP Class Method",
            "contents": "${1:WP_Debug_Data}::format( ${2:\\$info_array}, ${3:\\$type} );"
        },
        {
            "trigger": "WP_Debug_Data-get_database_size\tWP Class Method",
            "contents": "${1:WP_Debug_Data}::get_database_size();"
        },
        {
            "trigger": "WP_Debug_Data-get_sizes\tWP Class Method",
            "contents": "${1:WP_Debug_Data}::get_sizes();"
        },
        {
            "trigger": "WP_Dependencies-add\tWP Class Method",
            "contents": "${1:WP_Dependencies}->add( ${2:\\$handle}, ${3:\\$src}, ${4:\\$deps}, ${5:\\$ver}, ${6:\\$args} );"
        },
        {
            "trigger": "WP_Dependencies-add_data\tWP Class Method",
            "contents": "${1:WP_Dependencies}->add_data( ${2:\\$handle}, ${3:\\$key}, ${4:\\$value} );"
        },
        {
            "trigger": "WP_Dependencies-all_deps\tWP Class Method",
            "contents": "${1:WP_Dependencies}->all_deps( ${2:\\$handles}, ${3:\\$recursion}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Dependencies-dequeue\tWP Class Method",
            "contents": "${1:WP_Dependencies}->dequeue( ${2:\\$handles} );"
        },
        {
            "trigger": "WP_Dependencies-do_item\tWP Class Method",
            "contents": "${1:WP_Dependencies}->do_item( ${2:\\$handle} );"
        },
        {
            "trigger": "WP_Dependencies-do_items\tWP Class Method",
            "contents": "${1:WP_Dependencies}->do_items( ${2:\\$handles}, ${3:\\$group} );"
        },
        {
            "trigger": "WP_Dependencies-enqueue\tWP Class Method",
            "contents": "${1:WP_Dependencies}->enqueue( ${2:\\$handles} );"
        },
        {
            "trigger": "WP_Dependencies-get_data\tWP Class Method",
            "contents": "${1:WP_Dependencies}->get_data( ${2:\\$handle}, ${3:\\$key} );"
        },
        {
            "trigger": "WP_Dependencies-query\tWP Class Method",
            "contents": "${1:WP_Dependencies}->query( ${2:\\$handle}, ${3:\\$list} );"
        },
        {
            "trigger": "WP_Dependencies-remove\tWP Class Method",
            "contents": "${1:WP_Dependencies}->remove( ${2:\\$handles} );"
        },
        {
            "trigger": "WP_Dependencies-set_group\tWP Class Method",
            "contents": "${1:WP_Dependencies}->set_group( ${2:\\$handle}, ${3:\\$recursion}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Embed-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Embed();"
        },
        {
            "trigger": "WP_Embed-autoembed\tWP Class Method",
            "contents": "${1:WP_Embed}->autoembed( ${2:\\$content} );"
        },
        {
            "trigger": "WP_Embed-autoembed_callback\tWP Class Method",
            "contents": "${1:WP_Embed}->autoembed_callback( ${2:\\$match} );"
        },
        {
            "trigger": "WP_Embed-cache_oembed\tWP Class Method",
            "contents": "${1:WP_Embed}->cache_oembed( ${2:\\$post_ID} );"
        },
        {
            "trigger": "WP_Embed-delete_oembed_caches\tWP Class Method",
            "contents": "${1:WP_Embed}->delete_oembed_caches( ${2:\\$post_ID} );"
        },
        {
            "trigger": "WP_Embed-find_oembed_post_id\tWP Class Method",
            "contents": "${1:WP_Embed}->find_oembed_post_id( ${2:\\$cache_key} );"
        },
        {
            "trigger": "WP_Embed-maybe_make_link\tWP Class Method",
            "contents": "${1:WP_Embed}->maybe_make_link( ${2:\\$url} );"
        },
        {
            "trigger": "WP_Embed-maybe_run_ajax_cache\tWP Class Method",
            "contents": "${1:WP_Embed}->maybe_run_ajax_cache();"
        },
        {
            "trigger": "WP_Embed-register_handler\tWP Class Method",
            "contents": "${1:WP_Embed}->register_handler( ${2:\\$id}, ${3:\\$regex}, ${4:\\$callback}, ${5:\\$priority} );"
        },
        {
            "trigger": "WP_Embed-run_shortcode\tWP Class Method",
            "contents": "${1:WP_Embed}->run_shortcode( ${2:\\$content} );"
        },
        {
            "trigger": "WP_Embed-shortcode\tWP Class Method",
            "contents": "${1:WP_Embed}->shortcode( ${2:\\$attr}, ${3:\\$url} );"
        },
        {
            "trigger": "WP_Embed-unregister_handler\tWP Class Method",
            "contents": "${1:WP_Embed}->unregister_handler( ${2:\\$id}, ${3:\\$priority} );"
        },
        {
            "trigger": "WP_Error-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Error( ${3:\\$code}, ${4:\\$message}, ${5:\\$data} );"
        },
        {
            "trigger": "WP_Error-add\tWP Class Method",
            "contents": "${1:WP_Error}->add( ${2:\\$code}, ${3:\\$message}, ${4:\\$data} );"
        },
        {
            "trigger": "WP_Error-add_data\tWP Class Method",
            "contents": "${1:WP_Error}->add_data( ${2:\\$data}, ${3:\\$code} );"
        },
        {
            "trigger": "WP_Error-get_error_code\tWP Class Method",
            "contents": "${1:WP_Error}->get_error_code();"
        },
        {
            "trigger": "WP_Error-get_error_codes\tWP Class Method",
            "contents": "${1:WP_Error}->get_error_codes();"
        },
        {
            "trigger": "WP_Error-get_error_data\tWP Class Method",
            "contents": "${1:WP_Error}->get_error_data( ${2:\\$code} );"
        },
        {
            "trigger": "WP_Error-get_error_message\tWP Class Method",
            "contents": "${1:WP_Error}->get_error_message( ${2:\\$code} );"
        },
        {
            "trigger": "WP_Error-get_error_messages\tWP Class Method",
            "contents": "${1:WP_Error}->get_error_messages( ${2:\\$code} );"
        },
        {
            "trigger": "WP_Error-has_errors\tWP Class Method",
            "contents": "${1:WP_Error}->has_errors();"
        },
        {
            "trigger": "WP_Error-remove\tWP Class Method",
            "contents": "${1:WP_Error}->remove( ${2:\\$code} );"
        },
        {
            "trigger": "WP_Fatal_Error_Handler-handle\tWP Class Method",
            "contents": "${1:WP_Fatal_Error_Handler}->handle();"
        },
        {
            "trigger": "WP_Feed_Cache_Transient-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Feed_Cache_Transient( ${3:\\$location}, ${4:\\$filename}, ${5:\\$extension} );"
        },
        {
            "trigger": "WP_Feed_Cache_Transient-load\tWP Class Method",
            "contents": "${1:WP_Feed_Cache_Transient}->load();"
        },
        {
            "trigger": "WP_Feed_Cache_Transient-mtime\tWP Class Method",
            "contents": "${1:WP_Feed_Cache_Transient}->mtime();"
        },
        {
            "trigger": "WP_Feed_Cache_Transient-save\tWP Class Method",
            "contents": "${1:WP_Feed_Cache_Transient}->save( ${2:\\$data} );"
        },
        {
            "trigger": "WP_Feed_Cache_Transient-touch\tWP Class Method",
            "contents": "${1:WP_Feed_Cache_Transient}->touch();"
        },
        {
            "trigger": "WP_Feed_Cache_Transient-unlink\tWP Class Method",
            "contents": "${1:WP_Feed_Cache_Transient}->unlink();"
        },
        {
            "trigger": "WP_Feed_Cache-create\tWP Class Method",
            "contents": "${1:WP_Feed_Cache}->create( ${2:\\$location}, ${3:\\$filename}, ${4:\\$extension} );"
        },
        {
            "trigger": "WP_Filesystem_Base-abspath\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->abspath();"
        },
        {
            "trigger": "WP_Filesystem_Base-atime\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->atime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-chdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->chdir( ${2:\\$dir} );"
        },
        {
            "trigger": "WP_Filesystem_Base-chgrp\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->chgrp( ${2:\\$file}, ${3:\\$group}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Base-chmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->chmod( ${2:\\$file}, ${3:\\$mode}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Base-chown\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->chown( ${2:\\$file}, ${3:\\$owner}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Base-connect\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->connect();"
        },
        {
            "trigger": "WP_Filesystem_Base-copy\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->copy( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite}, ${5:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_Base-cwd\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->cwd();"
        },
        {
            "trigger": "WP_Filesystem_Base-delete\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->delete( ${2:\\$file}, ${3:\\$recursive}, ${4:\\$type} );"
        },
        {
            "trigger": "WP_Filesystem_Base-dirlist\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->dirlist( ${2:\\$path}, ${3:\\$include_hidden}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Base-exists\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->exists( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-find_folder\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->find_folder( ${2:\\$folder} );"
        },
        {
            "trigger": "WP_Filesystem_Base-get_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->get_contents( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-get_contents_array\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->get_contents_array( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-getchmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->getchmod( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-gethchmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->gethchmod( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-getnumchmodfromh\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->getnumchmodfromh( ${2:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_Base-group\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->group( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-is_binary\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->is_binary( ${2:\\$text} );"
        },
        {
            "trigger": "WP_Filesystem_Base-is_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->is_dir( ${2:\\$path} );"
        },
        {
            "trigger": "WP_Filesystem_Base-is_file\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->is_file( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-is_readable\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->is_readable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-is_writable\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->is_writable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-mkdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->mkdir( ${2:\\$path}, ${3:\\$chmod}, ${4:\\$chown}, ${5:\\$chgrp} );"
        },
        {
            "trigger": "WP_Filesystem_Base-move\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->move( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite} );"
        },
        {
            "trigger": "WP_Filesystem_Base-mtime\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->mtime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-owner\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->owner( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-put_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->put_contents( ${2:\\$file}, ${3:\\$contents}, ${4:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_Base-rmdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->rmdir( ${2:\\$path}, ${3:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Base-search_for_folder\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->search_for_folder( ${2:\\$folder}, ${3:\\$base}, ${4:\\$loop} );"
        },
        {
            "trigger": "WP_Filesystem_Base-size\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->size( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Base-touch\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->touch( ${2:\\$file}, ${3:\\$time}, ${4:\\$atime} );"
        },
        {
            "trigger": "WP_Filesystem_Base-wp_content_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->wp_content_dir();"
        },
        {
            "trigger": "WP_Filesystem_Base-wp_lang_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->wp_lang_dir();"
        },
        {
            "trigger": "WP_Filesystem_Base-wp_plugins_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->wp_plugins_dir();"
        },
        {
            "trigger": "WP_Filesystem_Base-wp_themes_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Base}->wp_themes_dir( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Filesystem_Direct( ${3:\\$arg} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-atime\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->atime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-chdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->chdir( ${2:\\$dir} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-chgrp\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->chgrp( ${2:\\$file}, ${3:\\$group}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-chmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->chmod( ${2:\\$file}, ${3:\\$mode}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-chown\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->chown( ${2:\\$file}, ${3:\\$owner}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-copy\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->copy( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite}, ${5:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-cwd\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->cwd();"
        },
        {
            "trigger": "WP_Filesystem_Direct-delete\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->delete( ${2:\\$file}, ${3:\\$recursive}, ${4:\\$type} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-dirlist\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->dirlist( ${2:\\$path}, ${3:\\$include_hidden}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-exists\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->exists( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-get_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->get_contents( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-get_contents_array\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->get_contents_array( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-getchmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->getchmod( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-group\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->group( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-is_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->is_dir( ${2:\\$path} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-is_file\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->is_file( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-is_readable\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->is_readable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-is_writable\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->is_writable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-mkdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->mkdir( ${2:\\$path}, ${3:\\$chmod}, ${4:\\$chown}, ${5:\\$chgrp} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-move\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->move( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-mtime\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->mtime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-owner\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->owner( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-put_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->put_contents( ${2:\\$file}, ${3:\\$contents}, ${4:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-rmdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->rmdir( ${2:\\$path}, ${3:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-size\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->size( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_Direct-touch\tWP Class Method",
            "contents": "${1:WP_Filesystem_Direct}->touch( ${2:\\$file}, ${3:\\$time}, ${4:\\$atime} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Filesystem_FTPext( ${3:\\$opt} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-__destruct\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->__destruct();"
        },
        {
            "trigger": "WP_Filesystem_FTPext-atime\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->atime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-chdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->chdir( ${2:\\$dir} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-chmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->chmod( ${2:\\$file}, ${3:\\$mode}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-connect\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->connect();"
        },
        {
            "trigger": "WP_Filesystem_FTPext-copy\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->copy( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite}, ${5:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-cwd\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->cwd();"
        },
        {
            "trigger": "WP_Filesystem_FTPext-delete\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->delete( ${2:\\$file}, ${3:\\$recursive}, ${4:\\$type} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-dirlist\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->dirlist( ${2:\\$path}, ${3:\\$include_hidden}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-exists\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->exists( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-get_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->get_contents( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-get_contents_array\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->get_contents_array( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-getchmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->getchmod( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-group\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->group( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-is_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->is_dir( ${2:\\$path} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-is_file\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->is_file( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-is_readable\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->is_readable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-is_writable\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->is_writable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-mkdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->mkdir( ${2:\\$path}, ${3:\\$chmod}, ${4:\\$chown}, ${5:\\$chgrp} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-move\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->move( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-mtime\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->mtime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-owner\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->owner( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-parselisting\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->parselisting( ${2:\\$line} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-put_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->put_contents( ${2:\\$file}, ${3:\\$contents}, ${4:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-rmdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->rmdir( ${2:\\$path}, ${3:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-size\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->size( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_FTPext-touch\tWP Class Method",
            "contents": "${1:WP_Filesystem_FTPext}->touch( ${2:\\$file}, ${3:\\$time}, ${4:\\$atime} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Filesystem_ftpsockets( ${3:\\$opt} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-__destruct\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->__destruct();"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-atime\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->atime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-chdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->chdir( ${2:\\$dir} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-chmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->chmod( ${2:\\$file}, ${3:\\$mode}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-connect\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->connect();"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-copy\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->copy( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite}, ${5:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-cwd\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->cwd();"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-delete\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->delete( ${2:\\$file}, ${3:\\$recursive}, ${4:\\$type} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-dirlist\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->dirlist( ${2:\\$path}, ${3:\\$include_hidden}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-exists\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->exists( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-get_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->get_contents( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-get_contents_array\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->get_contents_array( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-getchmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->getchmod( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-group\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->group( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-is_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->is_dir( ${2:\\$path} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-is_file\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->is_file( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-is_readable\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->is_readable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-is_writable\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->is_writable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-mkdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->mkdir( ${2:\\$path}, ${3:\\$chmod}, ${4:\\$chown}, ${5:\\$chgrp} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-move\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->move( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-mtime\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->mtime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-owner\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->owner( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-put_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->put_contents( ${2:\\$file}, ${3:\\$contents}, ${4:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-rmdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->rmdir( ${2:\\$path}, ${3:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-size\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->size( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_ftpsockets-touch\tWP Class Method",
            "contents": "${1:WP_Filesystem_ftpsockets}->touch( ${2:\\$file}, ${3:\\$time}, ${4:\\$atime} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Filesystem_SSH2( ${3:\\$opt} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-atime\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->atime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-chdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->chdir( ${2:\\$dir} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-chgrp\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->chgrp( ${2:\\$file}, ${3:\\$group}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-chmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->chmod( ${2:\\$file}, ${3:\\$mode}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-chown\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->chown( ${2:\\$file}, ${3:\\$owner}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-connect\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->connect();"
        },
        {
            "trigger": "WP_Filesystem_SSH2-copy\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->copy( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite}, ${5:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-cwd\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->cwd();"
        },
        {
            "trigger": "WP_Filesystem_SSH2-delete\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->delete( ${2:\\$file}, ${3:\\$recursive}, ${4:\\$type} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-dirlist\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->dirlist( ${2:\\$path}, ${3:\\$include_hidden}, ${4:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-exists\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->exists( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-get_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->get_contents( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-get_contents_array\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->get_contents_array( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-getchmod\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->getchmod( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-group\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->group( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-is_dir\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->is_dir( ${2:\\$path} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-is_file\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->is_file( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-is_readable\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->is_readable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-is_writable\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->is_writable( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-mkdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->mkdir( ${2:\\$path}, ${3:\\$chmod}, ${4:\\$chown}, ${5:\\$chgrp} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-move\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->move( ${2:\\$source}, ${3:\\$destination}, ${4:\\$overwrite} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-mtime\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->mtime( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-owner\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->owner( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-put_contents\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->put_contents( ${2:\\$file}, ${3:\\$contents}, ${4:\\$mode} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-rmdir\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->rmdir( ${2:\\$path}, ${3:\\$recursive} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-run_command\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->run_command( ${2:\\$command}, ${3:\\$returnbool} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-sftp_path\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->sftp_path( ${2:\\$path} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-size\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->size( ${2:\\$file} );"
        },
        {
            "trigger": "WP_Filesystem_SSH2-touch\tWP Class Method",
            "contents": "${1:WP_Filesystem_SSH2}->touch( ${2:\\$file}, ${3:\\$time}, ${4:\\$atime} );"
        },
        {
            "trigger": "WP_Hook-add_filter\tWP Class Method",
            "contents": "${1:WP_Hook}->add_filter( ${2:\\$tag}, ${3:\\$function_to_add}, ${4:\\$priority}, ${5:\\$accepted_args} );"
        },
        {
            "trigger": "WP_Hook-apply_filters\tWP Class Method",
            "contents": "${1:WP_Hook}->apply_filters( ${2:\\$value}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Hook-build_preinitialized_hooks\tWP Class Method",
            "contents": "${1:WP_Hook}::build_preinitialized_hooks( ${2:\\$filters} );"
        },
        {
            "trigger": "WP_Hook-current\tWP Class Method",
            "contents": "${1:WP_Hook}->current();"
        },
        {
            "trigger": "WP_Hook-current_priority\tWP Class Method",
            "contents": "${1:WP_Hook}->current_priority();"
        },
        {
            "trigger": "WP_Hook-do_action\tWP Class Method",
            "contents": "${1:WP_Hook}->do_action( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Hook-do_all_hook\tWP Class Method",
            "contents": "${1:WP_Hook}->do_all_hook( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Hook-has_filter\tWP Class Method",
            "contents": "${1:WP_Hook}->has_filter( ${2:\\$tag}, ${3:\\$function_to_check} );"
        },
        {
            "trigger": "WP_Hook-has_filters\tWP Class Method",
            "contents": "${1:WP_Hook}->has_filters();"
        },
        {
            "trigger": "WP_Hook-key\tWP Class Method",
            "contents": "${1:WP_Hook}->key();"
        },
        {
            "trigger": "WP_Hook-next\tWP Class Method",
            "contents": "${1:WP_Hook}->next();"
        },
        {
            "trigger": "WP_Hook-offsetExists\tWP Class Method",
            "contents": "${1:WP_Hook}->offsetExists( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Hook-offsetGet\tWP Class Method",
            "contents": "${1:WP_Hook}->offsetGet( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Hook-offsetSet\tWP Class Method",
            "contents": "${1:WP_Hook}->offsetSet( ${2:\\$offset}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Hook-offsetUnset\tWP Class Method",
            "contents": "${1:WP_Hook}->offsetUnset( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Hook-remove_all_filters\tWP Class Method",
            "contents": "${1:WP_Hook}->remove_all_filters( ${2:\\$priority} );"
        },
        {
            "trigger": "WP_Hook-remove_filter\tWP Class Method",
            "contents": "${1:WP_Hook}->remove_filter( ${2:\\$tag}, ${3:\\$function_to_remove}, ${4:\\$priority} );"
        },
        {
            "trigger": "WP_Hook-rewind\tWP Class Method",
            "contents": "${1:WP_Hook}->rewind();"
        },
        {
            "trigger": "WP_Hook-valid\tWP Class Method",
            "contents": "${1:WP_Hook}->valid();"
        },
        {
            "trigger": "WP_Http_Cookie-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Http_Cookie( ${3:\\$data}, ${4:\\$requested_url} );"
        },
        {
            "trigger": "WP_Http_Cookie-get_attributes\tWP Class Method",
            "contents": "${1:WP_Http_Cookie}->get_attributes();"
        },
        {
            "trigger": "WP_Http_Cookie-getFullHeader\tWP Class Method",
            "contents": "${1:WP_Http_Cookie}->getFullHeader();"
        },
        {
            "trigger": "WP_Http_Cookie-getHeaderValue\tWP Class Method",
            "contents": "${1:WP_Http_Cookie}->getHeaderValue();"
        },
        {
            "trigger": "WP_Http_Cookie-test\tWP Class Method",
            "contents": "${1:WP_Http_Cookie}->test( ${2:\\$url} );"
        },
        {
            "trigger": "WP_Http_Curl-request\tWP Class Method",
            "contents": "${1:WP_Http_Curl}->request( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http_Curl-test\tWP Class Method",
            "contents": "${1:WP_Http_Curl}::test( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Http_Encoding-accept_encoding\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::accept_encoding( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http_Encoding-compatible_gzinflate\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::compatible_gzinflate( ${2:\\$gzData} );"
        },
        {
            "trigger": "WP_Http_Encoding-compress\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::compress( ${2:\\$raw}, ${3:\\$level}, ${4:\\$supports} );"
        },
        {
            "trigger": "WP_Http_Encoding-content_encoding\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::content_encoding();"
        },
        {
            "trigger": "WP_Http_Encoding-decompress\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::decompress( ${2:\\$compressed}, ${3:\\$length} );"
        },
        {
            "trigger": "WP_Http_Encoding-is_available\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::is_available();"
        },
        {
            "trigger": "WP_Http_Encoding-should_decode\tWP Class Method",
            "contents": "${1:WP_Http_Encoding}::should_decode( ${2:\\$headers} );"
        },
        {
            "trigger": "WP_HTTP_IXR_Client-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_HTTP_IXR_Client( ${3:\\$server}, ${4:\\$path}, ${5:\\$port}, ${6:\\$timeout} );"
        },
        {
            "trigger": "WP_HTTP_IXR_Client-query\tWP Class Method",
            "contents": "${1:WP_HTTP_IXR_Client}->query();"
        },
        {
            "trigger": "WP_HTTP_Proxy-authentication\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->authentication();"
        },
        {
            "trigger": "WP_HTTP_Proxy-authentication_header\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->authentication_header();"
        },
        {
            "trigger": "WP_HTTP_Proxy-host\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->host();"
        },
        {
            "trigger": "WP_HTTP_Proxy-is_enabled\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->is_enabled();"
        },
        {
            "trigger": "WP_HTTP_Proxy-password\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->password();"
        },
        {
            "trigger": "WP_HTTP_Proxy-port\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->port();"
        },
        {
            "trigger": "WP_HTTP_Proxy-send_through_proxy\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->send_through_proxy( ${2:\\$uri} );"
        },
        {
            "trigger": "WP_HTTP_Proxy-use_authentication\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->use_authentication();"
        },
        {
            "trigger": "WP_HTTP_Proxy-username\tWP Class Method",
            "contents": "${1:WP_HTTP_Proxy}->username();"
        },
        {
            "trigger": "WP_HTTP_Requests_Hooks-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_HTTP_Requests_Hooks( ${3:\\$url}, ${4:\\$request} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Hooks-dispatch\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Hooks}->dispatch( ${2:\\$hook}, ${3:\\$parameters} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_HTTP_Requests_Response( ${3:\\$response}, ${4:\\$filename} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-get_cookies\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->get_cookies();"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-get_data\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->get_data();"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-get_headers\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->get_headers();"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-get_response_object\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->get_response_object();"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-get_status\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->get_status();"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-header\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->header( ${2:\\$key}, ${3:\\$value}, ${4:\\$replace} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-set_data\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->set_data( ${2:\\$data} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-set_headers\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->set_headers( ${2:\\$headers} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-set_status\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->set_status( ${2:\\$code} );"
        },
        {
            "trigger": "WP_HTTP_Requests_Response-to_array\tWP Class Method",
            "contents": "${1:WP_HTTP_Requests_Response}->to_array();"
        },
        {
            "trigger": "WP_HTTP_Response-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_HTTP_Response( ${3:\\$data}, ${4:\\$status}, ${5:\\$headers} );"
        },
        {
            "trigger": "WP_HTTP_Response-get_data\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->get_data();"
        },
        {
            "trigger": "WP_HTTP_Response-get_headers\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->get_headers();"
        },
        {
            "trigger": "WP_HTTP_Response-get_status\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->get_status();"
        },
        {
            "trigger": "WP_HTTP_Response-header\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->header( ${2:\\$key}, ${3:\\$value}, ${4:\\$replace} );"
        },
        {
            "trigger": "WP_HTTP_Response-jsonSerialize\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->jsonSerialize();"
        },
        {
            "trigger": "WP_HTTP_Response-set_data\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->set_data( ${2:\\$data} );"
        },
        {
            "trigger": "WP_HTTP_Response-set_headers\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->set_headers( ${2:\\$headers} );"
        },
        {
            "trigger": "WP_HTTP_Response-set_status\tWP Class Method",
            "contents": "${1:WP_HTTP_Response}->set_status( ${2:\\$code} );"
        },
        {
            "trigger": "WP_Http_Streams-request\tWP Class Method",
            "contents": "${1:WP_Http_Streams}->request( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http_Streams-test\tWP Class Method",
            "contents": "${1:WP_Http_Streams}::test( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Http_Streams-verify_ssl_certificate\tWP Class Method",
            "contents": "${1:WP_Http_Streams}::verify_ssl_certificate( ${2:\\$stream}, ${3:\\$host} );"
        },
        {
            "trigger": "WP_Http-_get_first_available_transport\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Http}->_get_first_available_transport( ${2:\\$args}, ${3:\\$url} );"
        },
        {
            "trigger": "WP_Http-block_request\tWP Class Method",
            "contents": "${1:WP_Http}->block_request( ${2:\\$uri} );"
        },
        {
            "trigger": "WP_Http-browser_redirect_compatibility\tWP Class Method",
            "contents": "${1:WP_Http}::browser_redirect_compatibility( ${2:\\$location}, ${3:\\$headers}, ${4:\\$data}, ${5:\\$options}, ${6:\\$original} );"
        },
        {
            "trigger": "WP_Http-buildCookieHeader\tWP Class Method",
            "contents": "${1:WP_Http}::buildCookieHeader( ${2:\\$r} );"
        },
        {
            "trigger": "WP_Http-chunkTransferDecode\tWP Class Method",
            "contents": "${1:WP_Http}::chunkTransferDecode( ${2:\\$body} );"
        },
        {
            "trigger": "WP_Http-get\tWP Class Method",
            "contents": "${1:WP_Http}->get( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http-handle_redirects\tWP Class Method",
            "contents": "${1:WP_Http}::handle_redirects( ${2:\\$url}, ${3:\\$args}, ${4:\\$response} );"
        },
        {
            "trigger": "WP_Http-head\tWP Class Method",
            "contents": "${1:WP_Http}->head( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http-is_ip_address\tWP Class Method",
            "contents": "${1:WP_Http}::is_ip_address( ${2:\\$maybe_ip} );"
        },
        {
            "trigger": "WP_Http-make_absolute_url\tWP Class Method",
            "contents": "${1:WP_Http}::make_absolute_url( ${2:\\$maybe_relative_path}, ${3:\\$url} );"
        },
        {
            "trigger": "WP_Http-normalize_cookies\tWP Class Method",
            "contents": "${1:WP_Http}::normalize_cookies( ${2:\\$cookies} );"
        },
        {
            "trigger": "WP_Http-post\tWP Class Method",
            "contents": "${1:WP_Http}->post( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http-processHeaders\tWP Class Method",
            "contents": "${1:WP_Http}::processHeaders( ${2:\\$headers}, ${3:\\$url} );"
        },
        {
            "trigger": "WP_Http-processResponse\tWP Class Method",
            "contents": "${1:WP_Http}::processResponse( ${2:\\$strResponse} );"
        },
        {
            "trigger": "WP_Http-request\tWP Class Method",
            "contents": "${1:WP_Http}->request( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Http-validate_redirects\tWP Class Method",
            "contents": "${1:WP_Http}::validate_redirects( ${2:\\$location} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-__destruct\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->__destruct();"
        },
        {
            "trigger": "WP_Image_Editor_GD-crop\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->crop( ${2:\\$src_x}, ${3:\\$src_y}, ${4:\\$src_w}, ${5:\\$src_h}, ${6:\\$dst_w}, ${7:\\$dst_h}, ${8:\\$src_abs} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-flip\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->flip( ${2:\\$horz}, ${3:\\$vert} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-load\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->load();"
        },
        {
            "trigger": "WP_Image_Editor_GD-make_subsize\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->make_subsize( ${2:\\$size_data} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-multi_resize\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->multi_resize( ${2:\\$sizes} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-resize\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->resize( ${2:\\$max_w}, ${3:\\$max_h}, ${4:\\$crop} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-rotate\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->rotate( ${2:\\$angle} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-save\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->save( ${2:\\$filename}, ${3:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-stream\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}->stream( ${2:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-supports_mime_type\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}::supports_mime_type( ${2:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor_GD-test\tWP Class Method",
            "contents": "${1:WP_Image_Editor_GD}::test( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-__destruct\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->__destruct();"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-crop\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->crop( ${2:\\$src_x}, ${3:\\$src_y}, ${4:\\$src_w}, ${5:\\$src_h}, ${6:\\$dst_w}, ${7:\\$dst_h}, ${8:\\$src_abs} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-flip\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->flip( ${2:\\$horz}, ${3:\\$vert} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-load\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->load();"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-make_subsize\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->make_subsize( ${2:\\$size_data} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-maybe_exif_rotate\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->maybe_exif_rotate();"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-multi_resize\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->multi_resize( ${2:\\$sizes} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-resize\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->resize( ${2:\\$max_w}, ${3:\\$max_h}, ${4:\\$crop} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-rotate\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->rotate( ${2:\\$angle} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-save\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->save( ${2:\\$destfilename}, ${3:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-set_quality\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->set_quality( ${2:\\$quality} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-stream\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}->stream( ${2:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-supports_mime_type\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}::supports_mime_type( ${2:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor_Imagick-test\tWP Class Method",
            "contents": "${1:WP_Image_Editor_Imagick}::test( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Image_Editor-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Image_Editor( ${3:\\$file} );"
        },
        {
            "trigger": "WP_Image_Editor-crop\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->crop( ${2:\\$src_x}, ${3:\\$src_y}, ${4:\\$src_w}, ${5:\\$src_h}, ${6:\\$dst_w}, ${7:\\$dst_h}, ${8:\\$src_abs} );"
        },
        {
            "trigger": "WP_Image_Editor-flip\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->flip( ${2:\\$horz}, ${3:\\$vert} );"
        },
        {
            "trigger": "WP_Image_Editor-generate_filename\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->generate_filename( ${2:\\$suffix}, ${3:\\$dest_path}, ${4:\\$extension} );"
        },
        {
            "trigger": "WP_Image_Editor-get_quality\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->get_quality();"
        },
        {
            "trigger": "WP_Image_Editor-get_size\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->get_size();"
        },
        {
            "trigger": "WP_Image_Editor-get_suffix\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->get_suffix();"
        },
        {
            "trigger": "WP_Image_Editor-load\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->load();"
        },
        {
            "trigger": "WP_Image_Editor-maybe_exif_rotate\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->maybe_exif_rotate();"
        },
        {
            "trigger": "WP_Image_Editor-multi_resize\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->multi_resize( ${2:\\$sizes} );"
        },
        {
            "trigger": "WP_Image_Editor-resize\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->resize( ${2:\\$max_w}, ${3:\\$max_h}, ${4:\\$crop} );"
        },
        {
            "trigger": "WP_Image_Editor-rotate\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->rotate( ${2:\\$angle} );"
        },
        {
            "trigger": "WP_Image_Editor-save\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->save( ${2:\\$destfilename}, ${3:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor-set_quality\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->set_quality( ${2:\\$quality} );"
        },
        {
            "trigger": "WP_Image_Editor-stream\tWP Class Method",
            "contents": "${1:WP_Image_Editor}->stream( ${2:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor-supports_mime_type\tWP Class Method",
            "contents": "${1:WP_Image_Editor}::supports_mime_type( ${2:\\$mime_type} );"
        },
        {
            "trigger": "WP_Image_Editor-test\tWP Class Method",
            "contents": "${1:WP_Image_Editor}::test( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Importer-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Importer();"
        },
        {
            "trigger": "WP_Importer-bump_request_timeout\tWP Class Method",
            "contents": "${1:WP_Importer}->bump_request_timeout( ${2:\\$val} );"
        },
        {
            "trigger": "WP_Importer-cmpr_strlen\tWP Class Method",
            "contents": "${1:WP_Importer}->cmpr_strlen( ${2:\\$a}, ${3:\\$b} );"
        },
        {
            "trigger": "WP_Importer-count_imported_posts\tWP Class Method",
            "contents": "${1:WP_Importer}->count_imported_posts( ${2:\\$importer_name}, ${3:\\$bid} );"
        },
        {
            "trigger": "WP_Importer-get_imported_comments\tWP Class Method",
            "contents": "${1:WP_Importer}->get_imported_comments( ${2:\\$bid} );"
        },
        {
            "trigger": "WP_Importer-get_imported_posts\tWP Class Method",
            "contents": "${1:WP_Importer}->get_imported_posts( ${2:\\$importer_name}, ${3:\\$bid} );"
        },
        {
            "trigger": "WP_Importer-get_page\tWP Class Method",
            "contents": "${1:WP_Importer}->get_page( ${2:\\$url}, ${3:\\$username}, ${4:\\$password}, ${5:\\$head} );"
        },
        {
            "trigger": "WP_Importer-is_user_over_quota\tWP Class Method",
            "contents": "${1:WP_Importer}->is_user_over_quota();"
        },
        {
            "trigger": "WP_Importer-min_whitespace\tWP Class Method",
            "contents": "${1:WP_Importer}->min_whitespace( ${2:\\$string} );"
        },
        {
            "trigger": "WP_Importer-set_blog\tWP Class Method",
            "contents": "${1:WP_Importer}->set_blog( ${2:\\$blog_id} );"
        },
        {
            "trigger": "WP_Importer-set_user\tWP Class Method",
            "contents": "${1:WP_Importer}->set_user( ${2:\\$user_id} );"
        },
        {
            "trigger": "WP_Importer-stop_the_insanity\tWP Class Method",
            "contents": "${1:WP_Importer}->stop_the_insanity();"
        },
        {
            "trigger": "WP_Internal_Pointers-dismiss_pointers_for_new_users\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::dismiss_pointers_for_new_users( ${2:\\$user_id} );"
        },
        {
            "trigger": "WP_Internal_Pointers-enqueue_scripts\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::enqueue_scripts( ${2:\\$hook_suffix} );"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp330_media_uploader\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp330_media_uploader();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp330_saving_widgets\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp330_saving_widgets();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp330_toolbar\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp330_toolbar();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp340_choose_image_from_library\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp340_choose_image_from_library();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp340_customize_current_theme_link\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp340_customize_current_theme_link();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp350_media\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp350_media();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp360_locks\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp360_locks();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp360_revisions\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp360_revisions();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp390_widgets\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp390_widgets();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp410_dfw\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp410_dfw();"
        },
        {
            "trigger": "WP_Internal_Pointers-pointer_wp496_privacy\tWP Class Method",
            "contents": "${1:WP_Internal_Pointers}::pointer_wp496_privacy();"
        },
        {
            "trigger": "WP_Links_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Links_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Links_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Links_List_Table-column_categories\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_categories( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_cb( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_default( ${2:\\$link}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_name\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_name( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_rating\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_rating( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_rel\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_rel( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_url\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_url( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-column_visible\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->column_visible( ${2:\\$link} );"
        },
        {
            "trigger": "WP_Links_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Links_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Links_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Links_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Links_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_List_Table-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_List_Table}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_List_Table-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_List_Table}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_List_Table-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_List_Table}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_List_Table-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_List_Table}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_List_Table-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_List_Table}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_List_Table-_js_vars\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_List_Table}->_js_vars();"
        },
        {
            "trigger": "WP_List_Table-ajax_response\tWP Class Method",
            "contents": "${1:WP_List_Table}->ajax_response();"
        },
        {
            "trigger": "WP_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_List_Table}->current_action();"
        },
        {
            "trigger": "WP_List_Table-display\tWP Class Method",
            "contents": "${1:WP_List_Table}->display();"
        },
        {
            "trigger": "WP_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_List_Table-display_rows_or_placeholder\tWP Class Method",
            "contents": "${1:WP_List_Table}->display_rows_or_placeholder();"
        },
        {
            "trigger": "WP_List_Table-get_column_count\tWP Class Method",
            "contents": "${1:WP_List_Table}->get_column_count();"
        },
        {
            "trigger": "WP_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_List_Table-get_pagenum\tWP Class Method",
            "contents": "${1:WP_List_Table}->get_pagenum();"
        },
        {
            "trigger": "WP_List_Table-get_pagination_arg\tWP Class Method",
            "contents": "${1:WP_List_Table}->get_pagination_arg( ${2:\\$key} );"
        },
        {
            "trigger": "WP_List_Table-get_primary_column\tWP Class Method",
            "contents": "${1:WP_List_Table}->get_primary_column();"
        },
        {
            "trigger": "WP_List_Table-has_items\tWP Class Method",
            "contents": "${1:WP_List_Table}->has_items();"
        },
        {
            "trigger": "WP_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_List_Table}->no_items();"
        },
        {
            "trigger": "WP_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_List_Table-print_column_headers\tWP Class Method",
            "contents": "${1:WP_List_Table}->print_column_headers( ${2:\\$with_id} );"
        },
        {
            "trigger": "WP_List_Table-search_box\tWP Class Method",
            "contents": "${1:WP_List_Table}->search_box( ${2:\\$text}, ${3:\\$input_id} );"
        },
        {
            "trigger": "WP_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_List_Table}->single_row( ${2:\\$item} );"
        },
        {
            "trigger": "WP_List_Table-views\tWP Class Method",
            "contents": "${1:WP_List_Table}->views();"
        },
        {
            "trigger": "WP_List_Util-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_List_Util( ${3:\\$input} );"
        },
        {
            "trigger": "WP_List_Util-filter\tWP Class Method",
            "contents": "${1:WP_List_Util}->filter( ${2:\\$args}, ${3:\\$operator} );"
        },
        {
            "trigger": "WP_List_Util-get_input\tWP Class Method",
            "contents": "${1:WP_List_Util}->get_input();"
        },
        {
            "trigger": "WP_List_Util-get_output\tWP Class Method",
            "contents": "${1:WP_List_Util}->get_output();"
        },
        {
            "trigger": "WP_List_Util-pluck\tWP Class Method",
            "contents": "${1:WP_List_Util}->pluck( ${2:\\$field}, ${3:\\$index_key} );"
        },
        {
            "trigger": "WP_List_Util-sort\tWP Class Method",
            "contents": "${1:WP_List_Util}->sort( ${2:\\$orderby}, ${3:\\$order}, ${4:\\$preserve_keys} );"
        },
        {
            "trigger": "WP_Locale_Switcher-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Locale_Switcher();"
        },
        {
            "trigger": "WP_Locale_Switcher-filter_locale\tWP Class Method",
            "contents": "${1:WP_Locale_Switcher}->filter_locale( ${2:\\$locale} );"
        },
        {
            "trigger": "WP_Locale_Switcher-init\tWP Class Method",
            "contents": "${1:WP_Locale_Switcher}->init();"
        },
        {
            "trigger": "WP_Locale_Switcher-is_switched\tWP Class Method",
            "contents": "${1:WP_Locale_Switcher}->is_switched();"
        },
        {
            "trigger": "WP_Locale_Switcher-restore_current_locale\tWP Class Method",
            "contents": "${1:WP_Locale_Switcher}->restore_current_locale();"
        },
        {
            "trigger": "WP_Locale_Switcher-restore_previous_locale\tWP Class Method",
            "contents": "${1:WP_Locale_Switcher}->restore_previous_locale();"
        },
        {
            "trigger": "WP_Locale_Switcher-switch_to_locale\tWP Class Method",
            "contents": "${1:WP_Locale_Switcher}->switch_to_locale( ${2:\\$locale} );"
        },
        {
            "trigger": "WP_Locale-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Locale();"
        },
        {
            "trigger": "WP_Locale-_strings_for_pot\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Locale}->_strings_for_pot();"
        },
        {
            "trigger": "WP_Locale-get_meridiem\tWP Class Method",
            "contents": "${1:WP_Locale}->get_meridiem( ${2:\\$meridiem} );"
        },
        {
            "trigger": "WP_Locale-get_month\tWP Class Method",
            "contents": "${1:WP_Locale}->get_month( ${2:\\$month_number} );"
        },
        {
            "trigger": "WP_Locale-get_month_abbrev\tWP Class Method",
            "contents": "${1:WP_Locale}->get_month_abbrev( ${2:\\$month_name} );"
        },
        {
            "trigger": "WP_Locale-get_weekday\tWP Class Method",
            "contents": "${1:WP_Locale}->get_weekday( ${2:\\$weekday_number} );"
        },
        {
            "trigger": "WP_Locale-get_weekday_abbrev\tWP Class Method",
            "contents": "${1:WP_Locale}->get_weekday_abbrev( ${2:\\$weekday_name} );"
        },
        {
            "trigger": "WP_Locale-get_weekday_initial\tWP Class Method",
            "contents": "${1:WP_Locale}->get_weekday_initial( ${2:\\$weekday_name} );"
        },
        {
            "trigger": "WP_Locale-init\tWP Class Method",
            "contents": "${1:WP_Locale}->init();"
        },
        {
            "trigger": "WP_Locale-is_rtl\tWP Class Method",
            "contents": "${1:WP_Locale}->is_rtl();"
        },
        {
            "trigger": "WP_MatchesMapRegex-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_MatchesMapRegex( ${3:\\$subject}, ${4:\\$matches} );"
        },
        {
            "trigger": "WP_MatchesMapRegex-apply\tWP Class Method",
            "contents": "${1:WP_MatchesMapRegex}::apply( ${2:\\$subject}, ${3:\\$matches} );"
        },
        {
            "trigger": "WP_MatchesMapRegex-callback\tWP Class Method",
            "contents": "${1:WP_MatchesMapRegex}->callback( ${2:\\$matches} );"
        },
        {
            "trigger": "WP_Media_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Media_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Media_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Media_List_Table-column_author\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_author( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_cb( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_comments\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_comments( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_date\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_date( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_default( ${2:\\$post}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_desc\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_desc( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_parent\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_parent( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-column_title\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->column_title( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Media_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->current_action();"
        },
        {
            "trigger": "WP_Media_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Media_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Media_List_Table-has_items\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->has_items();"
        },
        {
            "trigger": "WP_Media_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Media_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Media_List_Table-views\tWP Class Method",
            "contents": "${1:WP_Media_List_Table}->views();"
        },
        {
            "trigger": "WP_Meta_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Meta_Query( ${3:\\$meta_query} );"
        },
        {
            "trigger": "WP_Meta_Query-get_cast_for_type\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->get_cast_for_type( ${2:\\$type} );"
        },
        {
            "trigger": "WP_Meta_Query-get_clauses\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->get_clauses();"
        },
        {
            "trigger": "WP_Meta_Query-get_sql\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->get_sql( ${2:\\$type}, ${3:\\$primary_table}, ${4:\\$primary_id_column}, ${5:\\$context} );"
        },
        {
            "trigger": "WP_Meta_Query-get_sql_for_clause\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->get_sql_for_clause( ${2:\\$clause}, ${3:\\$parent_query}, ${4:\\$clause_key} );"
        },
        {
            "trigger": "WP_Meta_Query-has_or_relation\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->has_or_relation();"
        },
        {
            "trigger": "WP_Meta_Query-parse_query_vars\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->parse_query_vars( ${2:\\$qv} );"
        },
        {
            "trigger": "WP_Meta_Query-sanitize_query\tWP Class Method",
            "contents": "${1:WP_Meta_Query}->sanitize_query( ${2:\\$queries} );"
        },
        {
            "trigger": "WP_Metadata_Lazyloader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Metadata_Lazyloader();"
        },
        {
            "trigger": "WP_Metadata_Lazyloader-lazyload_comment_meta\tWP Class Method",
            "contents": "${1:WP_Metadata_Lazyloader}->lazyload_comment_meta( ${2:\\$check} );"
        },
        {
            "trigger": "WP_Metadata_Lazyloader-lazyload_term_meta\tWP Class Method",
            "contents": "${1:WP_Metadata_Lazyloader}->lazyload_term_meta( ${2:\\$check} );"
        },
        {
            "trigger": "WP_Metadata_Lazyloader-queue_objects\tWP Class Method",
            "contents": "${1:WP_Metadata_Lazyloader}->queue_objects( ${2:\\$object_type}, ${3:\\$object_ids} );"
        },
        {
            "trigger": "WP_Metadata_Lazyloader-reset_queue\tWP Class Method",
            "contents": "${1:WP_Metadata_Lazyloader}->reset_queue( ${2:\\$object_type} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_MS_Sites_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_blogname\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_blogname( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_cb( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_default( ${2:\\$blog}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_id\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_id( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_lastupdated\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_lastupdated( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_plugins\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_plugins( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_registered\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_registered( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-column_users\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->column_users( ${2:\\$blog} );"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->no_items();"
        },
        {
            "trigger": "WP_MS_Sites_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_MS_Sites_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_MS_Themes_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-_order_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_MS_Themes_List_Table}->_order_callback( ${2:\\$theme_a}, ${3:\\$theme_b} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-_search_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_MS_Themes_List_Table}->_search_callback( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->column_cb( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->column_default( ${2:\\$theme}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-column_description\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->column_description( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-column_name\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->column_name( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->no_items();"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->single_row( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_MS_Themes_List_Table-single_row_columns\tWP Class Method",
            "contents": "${1:WP_MS_Themes_List_Table}->single_row_columns( ${2:\\$item} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_blogs\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_blogs( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_cb( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_default( ${2:\\$user}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_email\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_email( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_id\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_id( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_name\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_name( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_registered\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_registered( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-column_username\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->column_username( ${2:\\$user} );"
        },
        {
            "trigger": "WP_MS_Users_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_MS_Users_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_MS_Users_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->no_items();"
        },
        {
            "trigger": "WP_MS_Users_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_MS_Users_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Nav_Menu_Widget-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Nav_Menu_Widget();"
        },
        {
            "trigger": "WP_Nav_Menu_Widget-form\tWP Class Method",
            "contents": "${1:WP_Nav_Menu_Widget}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Nav_Menu_Widget-update\tWP Class Method",
            "contents": "${1:WP_Nav_Menu_Widget}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Nav_Menu_Widget-widget\tWP Class Method",
            "contents": "${1:WP_Nav_Menu_Widget}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Network_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Network_Query( ${3:\\$query} );"
        },
        {
            "trigger": "WP_Network_Query-get_networks\tWP Class Method",
            "contents": "${1:WP_Network_Query}->get_networks();"
        },
        {
            "trigger": "WP_Network_Query-parse_query\tWP Class Method",
            "contents": "${1:WP_Network_Query}->parse_query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Network_Query-query\tWP Class Method",
            "contents": "${1:WP_Network_Query}->query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Network-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Network( ${3:\\$network} );"
        },
        {
            "trigger": "WP_Network-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Network}->__get( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Network-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Network}->__isset( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Network-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Network}->__set( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Network-get_by_path\tWP Class Method",
            "contents": "${1:WP_Network}::get_by_path( ${2:\\$domain}, ${3:\\$path}, ${4:\\$segments} );"
        },
        {
            "trigger": "WP_Network-get_instance\tWP Class Method",
            "contents": "${1:WP_Network}::get_instance( ${2:\\$network_id} );"
        },
        {
            "trigger": "WP_Object_Cache-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Object_Cache();"
        },
        {
            "trigger": "WP_Object_Cache-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Object_Cache}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Object_Cache-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Object_Cache}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Object_Cache-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Object_Cache}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Object_Cache-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Object_Cache}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Object_Cache-add\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->add( ${2:\\$key}, ${3:\\$data}, ${4:\\$group}, ${5:\\$expire} );"
        },
        {
            "trigger": "WP_Object_Cache-add_global_groups\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->add_global_groups( ${2:\\$groups} );"
        },
        {
            "trigger": "WP_Object_Cache-decr\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->decr( ${2:\\$key}, ${3:\\$offset}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Object_Cache-delete\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->delete( ${2:\\$key}, ${3:\\$group}, \\$deprecated );"
        },
        {
            "trigger": "WP_Object_Cache-flush\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->flush();"
        },
        {
            "trigger": "WP_Object_Cache-get\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->get( ${2:\\$key}, ${3:\\$group}, ${4:\\$force}, ${5:\\$found} );"
        },
        {
            "trigger": "WP_Object_Cache-incr\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->incr( ${2:\\$key}, ${3:\\$offset}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Object_Cache-replace\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->replace( ${2:\\$key}, ${3:\\$data}, ${4:\\$group}, ${5:\\$expire} );"
        },
        {
            "trigger": "WP_Object_Cache-set\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->set( ${2:\\$key}, ${3:\\$data}, ${4:\\$group}, ${5:\\$expire} );"
        },
        {
            "trigger": "WP_Object_Cache-stats\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->stats();"
        },
        {
            "trigger": "WP_Object_Cache-switch_to_blog\tWP Class Method",
            "contents": "${1:WP_Object_Cache}->switch_to_blog( ${2:\\$blog_id} );"
        },
        {
            "trigger": "WP_oEmbed_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_oEmbed_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_oEmbed_Controller-get_proxy_item\tWP Class Method",
            "contents": "${1:WP_oEmbed_Controller}->get_proxy_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_oEmbed_Controller-get_proxy_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_oEmbed_Controller}->get_proxy_item_permissions_check();"
        },
        {
            "trigger": "WP_oEmbed_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_oEmbed_Controller}->register_routes();"
        },
        {
            "trigger": "WP_oEmbed-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_oEmbed}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_oEmbed-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_oEmbed();"
        },
        {
            "trigger": "WP_oEmbed-_add_provider_early\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_oEmbed}::_add_provider_early( ${2:\\$format}, ${3:\\$provider}, ${4:\\$regex} );"
        },
        {
            "trigger": "WP_oEmbed-_remove_provider_early\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_oEmbed}::_remove_provider_early( ${2:\\$format} );"
        },
        {
            "trigger": "WP_oEmbed-_strip_newlines\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_oEmbed}->_strip_newlines( ${2:\\$html}, ${3:\\$data}, ${4:\\$url} );"
        },
        {
            "trigger": "WP_oEmbed-data2html\tWP Class Method",
            "contents": "${1:WP_oEmbed}->data2html( ${2:\\$data}, ${3:\\$url} );"
        },
        {
            "trigger": "WP_oEmbed-discover\tWP Class Method",
            "contents": "${1:WP_oEmbed}->discover( ${2:\\$url} );"
        },
        {
            "trigger": "WP_oEmbed-fetch\tWP Class Method",
            "contents": "${1:WP_oEmbed}->fetch( ${2:\\$provider}, ${3:\\$url}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_oEmbed-get_data\tWP Class Method",
            "contents": "${1:WP_oEmbed}->get_data( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_oEmbed-get_html\tWP Class Method",
            "contents": "${1:WP_oEmbed}->get_html( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_oEmbed-get_provider\tWP Class Method",
            "contents": "${1:WP_oEmbed}->get_provider( ${2:\\$url}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Paused_Extensions_Storage-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Paused_Extensions_Storage( ${3:\\$extension_type} );"
        },
        {
            "trigger": "WP_Paused_Extensions_Storage-delete\tWP Class Method",
            "contents": "${1:WP_Paused_Extensions_Storage}->delete( ${2:\\$extension} );"
        },
        {
            "trigger": "WP_Paused_Extensions_Storage-delete_all\tWP Class Method",
            "contents": "${1:WP_Paused_Extensions_Storage}->delete_all();"
        },
        {
            "trigger": "WP_Paused_Extensions_Storage-get\tWP Class Method",
            "contents": "${1:WP_Paused_Extensions_Storage}->get( ${2:\\$extension} );"
        },
        {
            "trigger": "WP_Paused_Extensions_Storage-get_all\tWP Class Method",
            "contents": "${1:WP_Paused_Extensions_Storage}->get_all();"
        },
        {
            "trigger": "WP_Paused_Extensions_Storage-set\tWP Class Method",
            "contents": "${1:WP_Paused_Extensions_Storage}->set( ${2:\\$extension}, ${3:\\$error} );"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-display\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->display();"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Plugin_Install_List_Table-views\tWP Class Method",
            "contents": "${1:WP_Plugin_Install_List_Table}->views();"
        },
        {
            "trigger": "WP_Plugins_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Plugins_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Plugins_List_Table-_order_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Plugins_List_Table}->_order_callback( ${2:\\$plugin_a}, ${3:\\$plugin_b} );"
        },
        {
            "trigger": "WP_Plugins_List_Table-_search_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Plugins_List_Table}->_search_callback( ${2:\\$plugin} );"
        },
        {
            "trigger": "WP_Plugins_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Plugins_List_Table-bulk_actions\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->bulk_actions( ${2:\\$which} );"
        },
        {
            "trigger": "WP_Plugins_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->current_action();"
        },
        {
            "trigger": "WP_Plugins_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Plugins_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Plugins_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Plugins_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Plugins_List_Table-search_box\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->search_box( ${2:\\$text}, ${3:\\$input_id} );"
        },
        {
            "trigger": "WP_Plugins_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Plugins_List_Table}->single_row( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Post_Comments_List_Table-display\tWP Class Method",
            "contents": "${1:WP_Post_Comments_List_Table}->display( ${2:\\$output_empty} );"
        },
        {
            "trigger": "WP_Post_Comments_List_Table-get_per_page\tWP Class Method",
            "contents": "${1:WP_Post_Comments_List_Table}->get_per_page( ${2:\\$comment_status} );"
        },
        {
            "trigger": "WP_Post_Type-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Post_Type( ${3:\\$post_type}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_Post_Type-add_hooks\tWP Class Method",
            "contents": "${1:WP_Post_Type}->add_hooks();"
        },
        {
            "trigger": "WP_Post_Type-add_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Post_Type}->add_rewrite_rules();"
        },
        {
            "trigger": "WP_Post_Type-add_supports\tWP Class Method",
            "contents": "${1:WP_Post_Type}->add_supports();"
        },
        {
            "trigger": "WP_Post_Type-get_rest_controller\tWP Class Method",
            "contents": "${1:WP_Post_Type}->get_rest_controller();"
        },
        {
            "trigger": "WP_Post_Type-register_meta_boxes\tWP Class Method",
            "contents": "${1:WP_Post_Type}->register_meta_boxes();"
        },
        {
            "trigger": "WP_Post_Type-register_taxonomies\tWP Class Method",
            "contents": "${1:WP_Post_Type}->register_taxonomies();"
        },
        {
            "trigger": "WP_Post_Type-remove_hooks\tWP Class Method",
            "contents": "${1:WP_Post_Type}->remove_hooks();"
        },
        {
            "trigger": "WP_Post_Type-remove_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Post_Type}->remove_rewrite_rules();"
        },
        {
            "trigger": "WP_Post_Type-remove_supports\tWP Class Method",
            "contents": "${1:WP_Post_Type}->remove_supports();"
        },
        {
            "trigger": "WP_Post_Type-set_props\tWP Class Method",
            "contents": "${1:WP_Post_Type}->set_props( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Post_Type-unregister_meta_boxes\tWP Class Method",
            "contents": "${1:WP_Post_Type}->unregister_meta_boxes();"
        },
        {
            "trigger": "WP_Post_Type-unregister_taxonomies\tWP Class Method",
            "contents": "${1:WP_Post_Type}->unregister_taxonomies();"
        },
        {
            "trigger": "WP_Post-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Post( ${3:\\$post} );"
        },
        {
            "trigger": "WP_Post-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Post}->__get( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Post-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Post}->__isset( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Post-filter\tWP Class Method",
            "contents": "${1:WP_Post}->filter( ${2:\\$filter} );"
        },
        {
            "trigger": "WP_Post-get_instance\tWP Class Method",
            "contents": "${1:WP_Post}::get_instance( ${2:\\$post_id} );"
        },
        {
            "trigger": "WP_Post-to_array\tWP Class Method",
            "contents": "${1:WP_Post}->to_array();"
        },
        {
            "trigger": "WP_Posts_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Posts_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Posts_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Posts_List_Table-column_author\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->column_author( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Posts_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->column_cb( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Posts_List_Table-column_comments\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->column_comments( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Posts_List_Table-column_date\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->column_date( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Posts_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->column_default( ${2:\\$post}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_Posts_List_Table-column_title\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->column_title( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Posts_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->current_action();"
        },
        {
            "trigger": "WP_Posts_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->display_rows( ${2:\\$posts}, ${3:\\$level} );"
        },
        {
            "trigger": "WP_Posts_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Posts_List_Table-has_items\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->has_items();"
        },
        {
            "trigger": "WP_Posts_List_Table-inline_edit\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->inline_edit();"
        },
        {
            "trigger": "WP_Posts_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Posts_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Posts_List_Table-set_hierarchical_display\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->set_hierarchical_display( ${2:\\$display} );"
        },
        {
            "trigger": "WP_Posts_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Posts_List_Table}->single_row( ${2:\\$post}, ${3:\\$level} );"
        },
        {
            "trigger": "WP_Privacy_Data_Export_Requests_List_Table-column_email\tWP Class Method",
            "contents": "${1:WP_Privacy_Data_Export_Requests_List_Table}->column_email( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Data_Export_Requests_List_Table-column_next_steps\tWP Class Method",
            "contents": "${1:WP_Privacy_Data_Export_Requests_List_Table}->column_next_steps( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Data_Removal_Requests_List_Table-column_email\tWP Class Method",
            "contents": "${1:WP_Privacy_Data_Removal_Requests_List_Table}->column_email( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Data_Removal_Requests_List_Table-column_next_steps\tWP Class Method",
            "contents": "${1:WP_Privacy_Data_Removal_Requests_List_Table}->column_next_steps( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-_policy_page_updated\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Privacy_Policy_Content}::_policy_page_updated( ${2:\\$post_id} );"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-add\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::add( ${2:\\$plugin_name}, ${3:\\$policy_text} );"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-add_suggested_content\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::add_suggested_content();"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-get_default_content\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::get_default_content( ${2:\\$description}, ${3:\\$blocks} );"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-get_suggested_policy_text\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::get_suggested_policy_text();"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-notice\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::notice( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-policy_text_changed_notice\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::policy_text_changed_notice();"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-privacy_policy_guide\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::privacy_policy_guide();"
        },
        {
            "trigger": "WP_Privacy_Policy_Content-text_change_check\tWP Class Method",
            "contents": "${1:WP_Privacy_Policy_Content}::text_change_check();"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->column_cb( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-column_default\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->column_default( ${2:\\$item}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-column_email\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->column_email( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-column_next_steps\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->column_next_steps( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-column_status\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->column_status( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-embed_scripts\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->embed_scripts();"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->get_columns();"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-process_bulk_action\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->process_bulk_action();"
        },
        {
            "trigger": "WP_Privacy_Requests_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Privacy_Requests_Table}->single_row( ${2:\\$item} );"
        },
        {
            "trigger": "WP_Query-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Query}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Query( ${3:\\$query} );"
        },
        {
            "trigger": "WP_Query-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Query}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Query-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Query}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Query-fill_query_vars\tWP Class Method",
            "contents": "${1:WP_Query}->fill_query_vars( ${2:\\$array} );"
        },
        {
            "trigger": "WP_Query-generate_postdata\tWP Class Method",
            "contents": "${1:WP_Query}->generate_postdata( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Query-get\tWP Class Method",
            "contents": "${1:WP_Query}->get( ${2:\\$query_var}, ${3:\\$default} );"
        },
        {
            "trigger": "WP_Query-get_posts\tWP Class Method",
            "contents": "${1:WP_Query}->get_posts();"
        },
        {
            "trigger": "WP_Query-get_queried_object\tWP Class Method",
            "contents": "${1:WP_Query}->get_queried_object();"
        },
        {
            "trigger": "WP_Query-get_queried_object_id\tWP Class Method",
            "contents": "${1:WP_Query}->get_queried_object_id();"
        },
        {
            "trigger": "WP_Query-have_comments\tWP Class Method",
            "contents": "${1:WP_Query}->have_comments();"
        },
        {
            "trigger": "WP_Query-have_posts\tWP Class Method",
            "contents": "${1:WP_Query}->have_posts();"
        },
        {
            "trigger": "WP_Query-init\tWP Class Method",
            "contents": "${1:WP_Query}->init();"
        },
        {
            "trigger": "WP_Query-is_404\tWP Class Method",
            "contents": "${1:WP_Query}->is_404();"
        },
        {
            "trigger": "WP_Query-is_archive\tWP Class Method",
            "contents": "${1:WP_Query}->is_archive();"
        },
        {
            "trigger": "WP_Query-is_attachment\tWP Class Method",
            "contents": "${1:WP_Query}->is_attachment( ${2:\\$attachment} );"
        },
        {
            "trigger": "WP_Query-is_author\tWP Class Method",
            "contents": "${1:WP_Query}->is_author( ${2:\\$author} );"
        },
        {
            "trigger": "WP_Query-is_category\tWP Class Method",
            "contents": "${1:WP_Query}->is_category( ${2:\\$category} );"
        },
        {
            "trigger": "WP_Query-is_comment_feed\tWP Class Method",
            "contents": "${1:WP_Query}->is_comment_feed();"
        },
        {
            "trigger": "WP_Query-is_date\tWP Class Method",
            "contents": "${1:WP_Query}->is_date();"
        },
        {
            "trigger": "WP_Query-is_day\tWP Class Method",
            "contents": "${1:WP_Query}->is_day();"
        },
        {
            "trigger": "WP_Query-is_embed\tWP Class Method",
            "contents": "${1:WP_Query}->is_embed();"
        },
        {
            "trigger": "WP_Query-is_favicon\tWP Class Method",
            "contents": "${1:WP_Query}->is_favicon();"
        },
        {
            "trigger": "WP_Query-is_feed\tWP Class Method",
            "contents": "${1:WP_Query}->is_feed( ${2:\\$feeds} );"
        },
        {
            "trigger": "WP_Query-is_front_page\tWP Class Method",
            "contents": "${1:WP_Query}->is_front_page();"
        },
        {
            "trigger": "WP_Query-is_home\tWP Class Method",
            "contents": "${1:WP_Query}->is_home();"
        },
        {
            "trigger": "WP_Query-is_main_query\tWP Class Method",
            "contents": "${1:WP_Query}->is_main_query();"
        },
        {
            "trigger": "WP_Query-is_month\tWP Class Method",
            "contents": "${1:WP_Query}->is_month();"
        },
        {
            "trigger": "WP_Query-is_page\tWP Class Method",
            "contents": "${1:WP_Query}->is_page( ${2:\\$page} );"
        },
        {
            "trigger": "WP_Query-is_paged\tWP Class Method",
            "contents": "${1:WP_Query}->is_paged();"
        },
        {
            "trigger": "WP_Query-is_post_type_archive\tWP Class Method",
            "contents": "${1:WP_Query}->is_post_type_archive( ${2:\\$post_types} );"
        },
        {
            "trigger": "WP_Query-is_preview\tWP Class Method",
            "contents": "${1:WP_Query}->is_preview();"
        },
        {
            "trigger": "WP_Query-is_privacy_policy\tWP Class Method",
            "contents": "${1:WP_Query}->is_privacy_policy();"
        },
        {
            "trigger": "WP_Query-is_robots\tWP Class Method",
            "contents": "${1:WP_Query}->is_robots();"
        },
        {
            "trigger": "WP_Query-is_search\tWP Class Method",
            "contents": "${1:WP_Query}->is_search();"
        },
        {
            "trigger": "WP_Query-is_single\tWP Class Method",
            "contents": "${1:WP_Query}->is_single( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Query-is_singular\tWP Class Method",
            "contents": "${1:WP_Query}->is_singular( ${2:\\$post_types} );"
        },
        {
            "trigger": "WP_Query-is_tag\tWP Class Method",
            "contents": "${1:WP_Query}->is_tag( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Query-is_tax\tWP Class Method",
            "contents": "${1:WP_Query}->is_tax( ${2:\\$taxonomy}, ${3:\\$term} );"
        },
        {
            "trigger": "WP_Query-is_time\tWP Class Method",
            "contents": "${1:WP_Query}->is_time();"
        },
        {
            "trigger": "WP_Query-is_trackback\tWP Class Method",
            "contents": "${1:WP_Query}->is_trackback();"
        },
        {
            "trigger": "WP_Query-is_year\tWP Class Method",
            "contents": "${1:WP_Query}->is_year();"
        },
        {
            "trigger": "WP_Query-next_comment\tWP Class Method",
            "contents": "${1:WP_Query}->next_comment();"
        },
        {
            "trigger": "WP_Query-next_post\tWP Class Method",
            "contents": "${1:WP_Query}->next_post();"
        },
        {
            "trigger": "WP_Query-parse_query\tWP Class Method",
            "contents": "${1:WP_Query}->parse_query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Query-parse_query_vars\tWP Class Method",
            "contents": "${1:WP_Query}->parse_query_vars();"
        },
        {
            "trigger": "WP_Query-parse_tax_query\tWP Class Method",
            "contents": "${1:WP_Query}->parse_tax_query( ${2:\\$q} );"
        },
        {
            "trigger": "WP_Query-query\tWP Class Method",
            "contents": "${1:WP_Query}->query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Query-reset_postdata\tWP Class Method",
            "contents": "${1:WP_Query}->reset_postdata();"
        },
        {
            "trigger": "WP_Query-rewind_comments\tWP Class Method",
            "contents": "${1:WP_Query}->rewind_comments();"
        },
        {
            "trigger": "WP_Query-rewind_posts\tWP Class Method",
            "contents": "${1:WP_Query}->rewind_posts();"
        },
        {
            "trigger": "WP_Query-set\tWP Class Method",
            "contents": "${1:WP_Query}->set( ${2:\\$query_var}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Query-set_404\tWP Class Method",
            "contents": "${1:WP_Query}->set_404();"
        },
        {
            "trigger": "WP_Query-setup_postdata\tWP Class Method",
            "contents": "${1:WP_Query}->setup_postdata( ${2:\\$post} );"
        },
        {
            "trigger": "WP_Query-the_comment\tWP Class Method",
            "contents": "${1:WP_Query}->the_comment();"
        },
        {
            "trigger": "WP_Query-the_post\tWP Class Method",
            "contents": "${1:WP_Query}->the_post();"
        },
        {
            "trigger": "WP_Recovery_Mode_Cookie_Service-clear_cookie\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Cookie_Service}->clear_cookie();"
        },
        {
            "trigger": "WP_Recovery_Mode_Cookie_Service-get_session_id_from_cookie\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Cookie_Service}->get_session_id_from_cookie( ${2:\\$cookie} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Cookie_Service-is_cookie_set\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Cookie_Service}->is_cookie_set();"
        },
        {
            "trigger": "WP_Recovery_Mode_Cookie_Service-set_cookie\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Cookie_Service}->set_cookie();"
        },
        {
            "trigger": "WP_Recovery_Mode_Cookie_Service-validate_cookie\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Cookie_Service}->validate_cookie( ${2:\\$cookie} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Email_Service-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Recovery_Mode_Email_Service( ${3:\\$link_service} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Email_Service-clear_rate_limit\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Email_Service}->clear_rate_limit();"
        },
        {
            "trigger": "WP_Recovery_Mode_Email_Service-maybe_send_recovery_mode_email\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Email_Service}->maybe_send_recovery_mode_email( ${2:\\$rate_limit}, ${3:\\$error}, ${4:\\$extension} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Key_Service-clean_expired_keys\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Key_Service}->clean_expired_keys( ${2:\\$ttl} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Key_Service-generate_and_store_recovery_mode_key\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Key_Service}->generate_and_store_recovery_mode_key( ${2:\\$token} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Key_Service-generate_recovery_mode_token\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Key_Service}->generate_recovery_mode_token();"
        },
        {
            "trigger": "WP_Recovery_Mode_Key_Service-validate_recovery_mode_key\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Key_Service}->validate_recovery_mode_key( ${2:\\$token}, ${3:\\$key}, ${4:\\$ttl} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Link_Service-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Recovery_Mode_Link_Service( ${3:\\$cookie_service}, ${4:\\$key_service} );"
        },
        {
            "trigger": "WP_Recovery_Mode_Link_Service-generate_url\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Link_Service}->generate_url();"
        },
        {
            "trigger": "WP_Recovery_Mode_Link_Service-handle_begin_link\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode_Link_Service}->handle_begin_link( ${2:\\$ttl} );"
        },
        {
            "trigger": "WP_Recovery_Mode-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Recovery_Mode();"
        },
        {
            "trigger": "WP_Recovery_Mode-clean_expired_keys\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->clean_expired_keys();"
        },
        {
            "trigger": "WP_Recovery_Mode-exit_recovery_mode\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->exit_recovery_mode();"
        },
        {
            "trigger": "WP_Recovery_Mode-get_session_id\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->get_session_id();"
        },
        {
            "trigger": "WP_Recovery_Mode-handle_error\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->handle_error( ${2:\\$error} );"
        },
        {
            "trigger": "WP_Recovery_Mode-handle_exit_recovery_mode\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->handle_exit_recovery_mode();"
        },
        {
            "trigger": "WP_Recovery_Mode-initialize\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->initialize();"
        },
        {
            "trigger": "WP_Recovery_Mode-is_active\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->is_active();"
        },
        {
            "trigger": "WP_Recovery_Mode-is_initialized\tWP Class Method",
            "contents": "${1:WP_Recovery_Mode}->is_initialized();"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-get_filename_from_disposition\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}::get_filename_from_disposition( ${2:\\$disposition_header} );"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-post_process_item\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->post_process_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-post_process_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->post_process_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->prepare_item_for_response( ${2:\\$post}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Attachments_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Attachments_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Autosaves_Controller( ${3:\\$parent_post_type} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-create_post_autosave\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->create_post_autosave( ${2:\\$post_data} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->prepare_item_for_response( ${2:\\$post}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Autosaves_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Autosaves_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Block_Renderer_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Block_Renderer_Controller();"
        },
        {
            "trigger": "WP_REST_Block_Renderer_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Block_Renderer_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Block_Renderer_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Block_Renderer_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Block_Renderer_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Block_Renderer_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Block_Renderer_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Block_Renderer_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Blocks_Controller-check_read_permission\tWP Class Method",
            "contents": "${1:WP_REST_Blocks_Controller}->check_read_permission( ${2:\\$post} );"
        },
        {
            "trigger": "WP_REST_Blocks_Controller-filter_response_by_context\tWP Class Method",
            "contents": "${1:WP_REST_Blocks_Controller}->filter_response_by_context( ${2:\\$data}, ${3:\\$context} );"
        },
        {
            "trigger": "WP_REST_Blocks_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Blocks_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Comment_Meta_Fields-get_rest_field_type\tWP Class Method",
            "contents": "${1:WP_REST_Comment_Meta_Fields}->get_rest_field_type();"
        },
        {
            "trigger": "WP_REST_Comments_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Comments_Controller();"
        },
        {
            "trigger": "WP_REST_Comments_Controller-check_comment_author_email\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->check_comment_author_email( ${2:\\$value}, ${3:\\$request}, ${4:\\$param} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-delete_item\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->delete_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-delete_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->delete_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Comments_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Comments_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->prepare_item_for_response( ${2:\\$comment}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Comments_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Comments_Controller-update_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Comments_Controller}->update_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-delete_item\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->delete_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-delete_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->delete_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-filter_response_by_context\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->filter_response_by_context( ${2:\\$data}, ${3:\\$context} );"
        },
        {
            "trigger": "WP_REST_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Controller-get_context_param\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_context_param( ${2:\\$args} );"
        },
        {
            "trigger": "WP_REST_Controller-get_endpoint_args_for_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_endpoint_args_for_item_schema( ${2:\\$method} );"
        },
        {
            "trigger": "WP_REST_Controller-get_fields_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_fields_for_response( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-get_public_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->get_public_item_schema();"
        },
        {
            "trigger": "WP_REST_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->prepare_item_for_response( ${2:\\$item}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-prepare_response_for_collection\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->prepare_response_for_collection( ${2:\\$response} );"
        },
        {
            "trigger": "WP_REST_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Controller-sanitize_slug\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->sanitize_slug( ${2:\\$slug} );"
        },
        {
            "trigger": "WP_REST_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Controller-update_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Controller}->update_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Meta_Fields-check_meta_is_array\tWP Class Method",
            "contents": "${1:WP_REST_Meta_Fields}->check_meta_is_array( ${2:\\$value}, ${3:\\$request}, ${4:\\$param} );"
        },
        {
            "trigger": "WP_REST_Meta_Fields-get_field_schema\tWP Class Method",
            "contents": "${1:WP_REST_Meta_Fields}->get_field_schema();"
        },
        {
            "trigger": "WP_REST_Meta_Fields-get_value\tWP Class Method",
            "contents": "${1:WP_REST_Meta_Fields}->get_value( ${2:\\$object_id}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Meta_Fields-prepare_value\tWP Class Method",
            "contents": "${1:WP_REST_Meta_Fields}::prepare_value( ${2:\\$value}, ${3:\\$request}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_REST_Meta_Fields-register_field\tWP Class Method",
            "contents": "${1:WP_REST_Meta_Fields}->register_field();"
        },
        {
            "trigger": "WP_REST_Meta_Fields-update_value\tWP Class Method",
            "contents": "${1:WP_REST_Meta_Fields}->update_value( ${2:\\$meta}, ${3:\\$object_id} );"
        },
        {
            "trigger": "WP_REST_Post_Meta_Fields-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Post_Meta_Fields( ${3:\\$post_type} );"
        },
        {
            "trigger": "WP_REST_Post_Meta_Fields-get_rest_field_type\tWP Class Method",
            "contents": "${1:WP_REST_Post_Meta_Fields}->get_rest_field_type();"
        },
        {
            "trigger": "WP_REST_Post_Search_Handler-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Post_Search_Handler();"
        },
        {
            "trigger": "WP_REST_Post_Search_Handler-prepare_item\tWP Class Method",
            "contents": "${1:WP_REST_Post_Search_Handler}->prepare_item( ${2:\\$id}, ${3:\\$fields} );"
        },
        {
            "trigger": "WP_REST_Post_Search_Handler-prepare_item_links\tWP Class Method",
            "contents": "${1:WP_REST_Post_Search_Handler}->prepare_item_links( ${2:\\$id} );"
        },
        {
            "trigger": "WP_REST_Post_Search_Handler-protected_title_format\tWP Class Method",
            "contents": "${1:WP_REST_Post_Search_Handler}->protected_title_format();"
        },
        {
            "trigger": "WP_REST_Post_Search_Handler-search_items\tWP Class Method",
            "contents": "${1:WP_REST_Post_Search_Handler}->search_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Post_Statuses_Controller();"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->prepare_item_for_response( ${2:\\$status}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Statuses_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Post_Statuses_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Post_Types_Controller();"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->prepare_item_for_response( ${2:\\$post_type}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Post_Types_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Post_Types_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Posts_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Posts_Controller( ${3:\\$post_type} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-can_access_password_content\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->can_access_password_content( ${2:\\$post}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-check_read_permission\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->check_read_permission( ${2:\\$post} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-check_template\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->check_template( ${2:\\$template}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-delete_item\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->delete_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-delete_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->delete_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Posts_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Posts_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-handle_template\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->handle_template( ${2:\\$template}, ${3:\\$post_id}, ${4:\\$validate} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->prepare_item_for_response( ${2:\\$post}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-protected_title_format\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->protected_title_format();"
        },
        {
            "trigger": "WP_REST_Posts_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Posts_Controller-sanitize_post_statuses\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->sanitize_post_statuses( ${2:\\$statuses}, ${3:\\$request}, ${4:\\$parameter} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Posts_Controller-update_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Posts_Controller}->update_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Request-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Request( ${3:\\$method}, ${4:\\$route}, ${5:\\$attributes} );"
        },
        {
            "trigger": "WP_REST_Request-add_header\tWP Class Method",
            "contents": "${1:WP_REST_Request}->add_header( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_REST_Request-canonicalize_header_name\tWP Class Method",
            "contents": "${1:WP_REST_Request}::canonicalize_header_name( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Request-from_url\tWP Class Method",
            "contents": "${1:WP_REST_Request}::from_url( ${2:\\$url} );"
        },
        {
            "trigger": "WP_REST_Request-get_attributes\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_attributes();"
        },
        {
            "trigger": "WP_REST_Request-get_body\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_body();"
        },
        {
            "trigger": "WP_REST_Request-get_body_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_body_params();"
        },
        {
            "trigger": "WP_REST_Request-get_content_type\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_content_type();"
        },
        {
            "trigger": "WP_REST_Request-get_default_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_default_params();"
        },
        {
            "trigger": "WP_REST_Request-get_file_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_file_params();"
        },
        {
            "trigger": "WP_REST_Request-get_header\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_header( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Request-get_header_as_array\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_header_as_array( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Request-get_headers\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_headers();"
        },
        {
            "trigger": "WP_REST_Request-get_json_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_json_params();"
        },
        {
            "trigger": "WP_REST_Request-get_method\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_method();"
        },
        {
            "trigger": "WP_REST_Request-get_param\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_param( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Request-get_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_params();"
        },
        {
            "trigger": "WP_REST_Request-get_query_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_query_params();"
        },
        {
            "trigger": "WP_REST_Request-get_route\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_route();"
        },
        {
            "trigger": "WP_REST_Request-get_url_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->get_url_params();"
        },
        {
            "trigger": "WP_REST_Request-has_param\tWP Class Method",
            "contents": "${1:WP_REST_Request}->has_param( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Request-has_valid_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->has_valid_params();"
        },
        {
            "trigger": "WP_REST_Request-offsetExists\tWP Class Method",
            "contents": "${1:WP_REST_Request}->offsetExists( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_REST_Request-offsetGet\tWP Class Method",
            "contents": "${1:WP_REST_Request}->offsetGet( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_REST_Request-offsetSet\tWP Class Method",
            "contents": "${1:WP_REST_Request}->offsetSet( ${2:\\$offset}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_REST_Request-offsetUnset\tWP Class Method",
            "contents": "${1:WP_REST_Request}->offsetUnset( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_REST_Request-remove_header\tWP Class Method",
            "contents": "${1:WP_REST_Request}->remove_header( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Request-sanitize_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->sanitize_params();"
        },
        {
            "trigger": "WP_REST_Request-set_attributes\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_attributes( ${2:\\$attributes} );"
        },
        {
            "trigger": "WP_REST_Request-set_body\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_body( ${2:\\$data} );"
        },
        {
            "trigger": "WP_REST_Request-set_body_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_body_params( ${2:\\$params} );"
        },
        {
            "trigger": "WP_REST_Request-set_default_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_default_params( ${2:\\$params} );"
        },
        {
            "trigger": "WP_REST_Request-set_file_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_file_params( ${2:\\$params} );"
        },
        {
            "trigger": "WP_REST_Request-set_header\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_header( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_REST_Request-set_headers\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_headers( ${2:\\$headers}, ${3:\\$override} );"
        },
        {
            "trigger": "WP_REST_Request-set_method\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_method( ${2:\\$method} );"
        },
        {
            "trigger": "WP_REST_Request-set_param\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_param( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_REST_Request-set_query_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_query_params( ${2:\\$params} );"
        },
        {
            "trigger": "WP_REST_Request-set_route\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_route( ${2:\\$route} );"
        },
        {
            "trigger": "WP_REST_Request-set_url_params\tWP Class Method",
            "contents": "${1:WP_REST_Request}->set_url_params( ${2:\\$params} );"
        },
        {
            "trigger": "WP_REST_Response-add_link\tWP Class Method",
            "contents": "${1:WP_REST_Response}->add_link( ${2:\\$rel}, ${3:\\$href}, ${4:\\$attributes} );"
        },
        {
            "trigger": "WP_REST_Response-add_links\tWP Class Method",
            "contents": "${1:WP_REST_Response}->add_links( ${2:\\$links} );"
        },
        {
            "trigger": "WP_REST_Response-as_error\tWP Class Method",
            "contents": "${1:WP_REST_Response}->as_error();"
        },
        {
            "trigger": "WP_REST_Response-get_curies\tWP Class Method",
            "contents": "${1:WP_REST_Response}->get_curies();"
        },
        {
            "trigger": "WP_REST_Response-get_links\tWP Class Method",
            "contents": "${1:WP_REST_Response}->get_links();"
        },
        {
            "trigger": "WP_REST_Response-get_matched_handler\tWP Class Method",
            "contents": "${1:WP_REST_Response}->get_matched_handler();"
        },
        {
            "trigger": "WP_REST_Response-get_matched_route\tWP Class Method",
            "contents": "${1:WP_REST_Response}->get_matched_route();"
        },
        {
            "trigger": "WP_REST_Response-is_error\tWP Class Method",
            "contents": "${1:WP_REST_Response}->is_error();"
        },
        {
            "trigger": "WP_REST_Response-link_header\tWP Class Method",
            "contents": "${1:WP_REST_Response}->link_header( ${2:\\$rel}, ${3:\\$link}, ${4:\\$other} );"
        },
        {
            "trigger": "WP_REST_Response-remove_link\tWP Class Method",
            "contents": "${1:WP_REST_Response}->remove_link( ${2:\\$rel}, ${3:\\$href} );"
        },
        {
            "trigger": "WP_REST_Response-set_matched_handler\tWP Class Method",
            "contents": "${1:WP_REST_Response}->set_matched_handler( ${2:\\$handler} );"
        },
        {
            "trigger": "WP_REST_Response-set_matched_route\tWP Class Method",
            "contents": "${1:WP_REST_Response}->set_matched_route( ${2:\\$route} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Revisions_Controller( ${3:\\$parent_post_type} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-delete_item\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->delete_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-delete_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->delete_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->prepare_item_for_response( ${2:\\$post}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Revisions_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Revisions_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Search_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Search_Controller( ${3:\\$search_handlers} );"
        },
        {
            "trigger": "WP_REST_Search_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Search_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Search_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Search_Controller-get_items_permission_check\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->get_items_permission_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Search_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->prepare_item_for_response( ${2:\\$id}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Search_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Search_Controller-sanitize_subtypes\tWP Class Method",
            "contents": "${1:WP_REST_Search_Controller}->sanitize_subtypes( ${2:\\$subtypes}, ${3:\\$request}, ${4:\\$parameter} );"
        },
        {
            "trigger": "WP_REST_Search_Handler-get_subtypes\tWP Class Method",
            "contents": "${1:WP_REST_Search_Handler}->get_subtypes();"
        },
        {
            "trigger": "WP_REST_Search_Handler-get_type\tWP Class Method",
            "contents": "${1:WP_REST_Search_Handler}->get_type();"
        },
        {
            "trigger": "WP_REST_Search_Handler-prepare_item\tWP Class Method",
            "contents": "${1:WP_REST_Search_Handler}->prepare_item( ${2:\\$id}, ${3:\\$fields} );"
        },
        {
            "trigger": "WP_REST_Search_Handler-prepare_item_links\tWP Class Method",
            "contents": "${1:WP_REST_Search_Handler}->prepare_item_links( ${2:\\$id} );"
        },
        {
            "trigger": "WP_REST_Search_Handler-search_items\tWP Class Method",
            "contents": "${1:WP_REST_Search_Handler}->search_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Server-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Server();"
        },
        {
            "trigger": "WP_REST_Server-check_authentication\tWP Class Method",
            "contents": "${1:WP_REST_Server}->check_authentication();"
        },
        {
            "trigger": "WP_REST_Server-dispatch\tWP Class Method",
            "contents": "${1:WP_REST_Server}->dispatch( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Server-envelope_response\tWP Class Method",
            "contents": "${1:WP_REST_Server}->envelope_response( ${2:\\$response}, ${3:\\$embed} );"
        },
        {
            "trigger": "WP_REST_Server-get_compact_response_links\tWP Class Method",
            "contents": "${1:WP_REST_Server}::get_compact_response_links( ${2:\\$response} );"
        },
        {
            "trigger": "WP_REST_Server-get_data_for_route\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_data_for_route( ${2:\\$route}, ${3:\\$callbacks}, ${4:\\$context} );"
        },
        {
            "trigger": "WP_REST_Server-get_data_for_routes\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_data_for_routes( ${2:\\$routes}, ${3:\\$context} );"
        },
        {
            "trigger": "WP_REST_Server-get_headers\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_headers( ${2:\\$server} );"
        },
        {
            "trigger": "WP_REST_Server-get_index\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_index( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Server-get_namespace_index\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_namespace_index( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Server-get_namespaces\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_namespaces();"
        },
        {
            "trigger": "WP_REST_Server-get_raw_data\tWP Class Method",
            "contents": "${1:WP_REST_Server}::get_raw_data();"
        },
        {
            "trigger": "WP_REST_Server-get_response_links\tWP Class Method",
            "contents": "${1:WP_REST_Server}::get_response_links( ${2:\\$response} );"
        },
        {
            "trigger": "WP_REST_Server-get_route_options\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_route_options( ${2:\\$route} );"
        },
        {
            "trigger": "WP_REST_Server-get_routes\tWP Class Method",
            "contents": "${1:WP_REST_Server}->get_routes( ${2:\\$namespace} );"
        },
        {
            "trigger": "WP_REST_Server-register_route\tWP Class Method",
            "contents": "${1:WP_REST_Server}->register_route( ${2:\\$namespace}, ${3:\\$route}, ${4:\\$route_args}, ${5:\\$override} );"
        },
        {
            "trigger": "WP_REST_Server-remove_header\tWP Class Method",
            "contents": "${1:WP_REST_Server}->remove_header( ${2:\\$key} );"
        },
        {
            "trigger": "WP_REST_Server-response_to_data\tWP Class Method",
            "contents": "${1:WP_REST_Server}->response_to_data( ${2:\\$response}, ${3:\\$embed} );"
        },
        {
            "trigger": "WP_REST_Server-send_header\tWP Class Method",
            "contents": "${1:WP_REST_Server}->send_header( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_REST_Server-send_headers\tWP Class Method",
            "contents": "${1:WP_REST_Server}->send_headers( ${2:\\$headers} );"
        },
        {
            "trigger": "WP_REST_Server-serve_request\tWP Class Method",
            "contents": "${1:WP_REST_Server}->serve_request( ${2:\\$path} );"
        },
        {
            "trigger": "WP_REST_Settings_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Settings_Controller();"
        },
        {
            "trigger": "WP_REST_Settings_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Settings_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Settings_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Settings_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Settings_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Settings_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Settings_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Settings_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Settings_Controller-sanitize_callback\tWP Class Method",
            "contents": "${1:WP_REST_Settings_Controller}->sanitize_callback( ${2:\\$value}, ${3:\\$request}, ${4:\\$param} );"
        },
        {
            "trigger": "WP_REST_Settings_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Settings_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Taxonomies_Controller();"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->prepare_item_for_response( ${2:\\$taxonomy}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Taxonomies_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Taxonomies_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Term_Meta_Fields-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Term_Meta_Fields( ${3:\\$taxonomy} );"
        },
        {
            "trigger": "WP_REST_Term_Meta_Fields-get_rest_field_type\tWP Class Method",
            "contents": "${1:WP_REST_Term_Meta_Fields}->get_rest_field_type();"
        },
        {
            "trigger": "WP_REST_Terms_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Terms_Controller( ${3:\\$taxonomy} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-delete_item\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->delete_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-delete_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->delete_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Terms_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Terms_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-prepare_item_for_database\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->prepare_item_for_database( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->prepare_item_for_response( ${2:\\$item}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Terms_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Terms_Controller-update_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Terms_Controller}->update_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Themes_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Themes_Controller();"
        },
        {
            "trigger": "WP_REST_Themes_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Themes_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Themes_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Themes_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Themes_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->prepare_item_for_response( ${2:\\$theme}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Themes_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Themes_Controller-sanitize_theme_status\tWP Class Method",
            "contents": "${1:WP_REST_Themes_Controller}->sanitize_theme_status( ${2:\\$statuses}, ${3:\\$request}, ${4:\\$parameter} );"
        },
        {
            "trigger": "WP_REST_User_Meta_Fields-get_rest_field_type\tWP Class Method",
            "contents": "${1:WP_REST_User_Meta_Fields}->get_rest_field_type();"
        },
        {
            "trigger": "WP_REST_Users_Controller-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_REST_Users_Controller();"
        },
        {
            "trigger": "WP_REST_Users_Controller-check_reassign\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->check_reassign( ${2:\\$value}, ${3:\\$request}, ${4:\\$param} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-check_user_password\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->check_user_password( ${2:\\$value}, ${3:\\$request}, ${4:\\$param} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-check_username\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->check_username( ${2:\\$value}, ${3:\\$request}, ${4:\\$param} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-create_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->create_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-create_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->create_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-delete_current_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->delete_current_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-delete_current_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->delete_current_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-delete_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->delete_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-delete_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->delete_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_collection_params\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_collection_params();"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_current_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_current_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_item_schema\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_item_schema();"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_items\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_items( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-get_items_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->get_items_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-prepare_item_for_response\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->prepare_item_for_response( ${2:\\$user}, ${3:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-register_routes\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->register_routes();"
        },
        {
            "trigger": "WP_REST_Users_Controller-update_current_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->update_current_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-update_current_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->update_current_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-update_item\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->update_item( ${2:\\$request} );"
        },
        {
            "trigger": "WP_REST_Users_Controller-update_item_permissions_check\tWP Class Method",
            "contents": "${1:WP_REST_Users_Controller}->update_item_permissions_check( ${2:\\$request} );"
        },
        {
            "trigger": "WP_Rewrite-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Rewrite();"
        },
        {
            "trigger": "WP_Rewrite-add_endpoint\tWP Class Method",
            "contents": "${1:WP_Rewrite}->add_endpoint( ${2:\\$name}, ${3:\\$places}, ${4:\\$query_var} );"
        },
        {
            "trigger": "WP_Rewrite-add_external_rule\tWP Class Method",
            "contents": "${1:WP_Rewrite}->add_external_rule( ${2:\\$regex}, ${3:\\$query} );"
        },
        {
            "trigger": "WP_Rewrite-add_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->add_permastruct( ${2:\\$name}, ${3:\\$struct}, ${4:\\$args} );"
        },
        {
            "trigger": "WP_Rewrite-add_rewrite_tag\tWP Class Method",
            "contents": "${1:WP_Rewrite}->add_rewrite_tag( ${2:\\$tag}, ${3:\\$regex}, ${4:\\$query} );"
        },
        {
            "trigger": "WP_Rewrite-add_rule\tWP Class Method",
            "contents": "${1:WP_Rewrite}->add_rule( ${2:\\$regex}, ${3:\\$query}, ${4:\\$after} );"
        },
        {
            "trigger": "WP_Rewrite-flush_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->flush_rules( ${2:\\$hard} );"
        },
        {
            "trigger": "WP_Rewrite-generate_rewrite_rule\tWP Class Method",
            "contents": "${1:WP_Rewrite}->generate_rewrite_rule( ${2:\\$permalink_structure}, ${3:\\$walk_dirs} );"
        },
        {
            "trigger": "WP_Rewrite-generate_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->generate_rewrite_rules( ${2:\\$permalink_structure}, ${3:\\$ep_mask}, ${4:\\$paged}, ${5:\\$feed}, ${6:\\$forcomments}, ${7:\\$walk_dirs}, ${8:\\$endpoints} );"
        },
        {
            "trigger": "WP_Rewrite-get_author_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_author_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_category_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_category_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_comment_feed_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_comment_feed_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_date_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_date_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_day_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_day_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_extra_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_extra_permastruct( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Rewrite-get_feed_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_feed_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_month_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_month_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_page_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_page_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_search_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_search_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_tag_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_tag_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-get_year_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->get_year_permastruct();"
        },
        {
            "trigger": "WP_Rewrite-iis7_url_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->iis7_url_rewrite_rules( ${2:\\$add_parent_tags} );"
        },
        {
            "trigger": "WP_Rewrite-init\tWP Class Method",
            "contents": "${1:WP_Rewrite}->init();"
        },
        {
            "trigger": "WP_Rewrite-mod_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->mod_rewrite_rules();"
        },
        {
            "trigger": "WP_Rewrite-page_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->page_rewrite_rules();"
        },
        {
            "trigger": "WP_Rewrite-page_uri_index\tWP Class Method",
            "contents": "${1:WP_Rewrite}->page_uri_index();"
        },
        {
            "trigger": "WP_Rewrite-preg_index\tWP Class Method",
            "contents": "${1:WP_Rewrite}->preg_index( ${2:\\$number} );"
        },
        {
            "trigger": "WP_Rewrite-remove_permastruct\tWP Class Method",
            "contents": "${1:WP_Rewrite}->remove_permastruct( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Rewrite-remove_rewrite_tag\tWP Class Method",
            "contents": "${1:WP_Rewrite}->remove_rewrite_tag( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Rewrite-rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->rewrite_rules();"
        },
        {
            "trigger": "WP_Rewrite-set_category_base\tWP Class Method",
            "contents": "${1:WP_Rewrite}->set_category_base( ${2:\\$category_base} );"
        },
        {
            "trigger": "WP_Rewrite-set_permalink_structure\tWP Class Method",
            "contents": "${1:WP_Rewrite}->set_permalink_structure( ${2:\\$permalink_structure} );"
        },
        {
            "trigger": "WP_Rewrite-set_tag_base\tWP Class Method",
            "contents": "${1:WP_Rewrite}->set_tag_base( ${2:\\$tag_base} );"
        },
        {
            "trigger": "WP_Rewrite-using_index_permalinks\tWP Class Method",
            "contents": "${1:WP_Rewrite}->using_index_permalinks();"
        },
        {
            "trigger": "WP_Rewrite-using_mod_rewrite_permalinks\tWP Class Method",
            "contents": "${1:WP_Rewrite}->using_mod_rewrite_permalinks();"
        },
        {
            "trigger": "WP_Rewrite-using_permalinks\tWP Class Method",
            "contents": "${1:WP_Rewrite}->using_permalinks();"
        },
        {
            "trigger": "WP_Rewrite-wp_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Rewrite}->wp_rewrite_rules();"
        },
        {
            "trigger": "WP_Role-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Role( ${3:\\$role}, ${4:\\$capabilities} );"
        },
        {
            "trigger": "WP_Role-add_cap\tWP Class Method",
            "contents": "${1:WP_Role}->add_cap( ${2:\\$cap}, ${3:\\$grant} );"
        },
        {
            "trigger": "WP_Role-has_cap\tWP Class Method",
            "contents": "${1:WP_Role}->has_cap( ${2:\\$cap} );"
        },
        {
            "trigger": "WP_Role-remove_cap\tWP Class Method",
            "contents": "${1:WP_Role}->remove_cap( ${2:\\$cap} );"
        },
        {
            "trigger": "WP_Roles-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Roles}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_Roles-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Roles( ${3:\\$site_id} );"
        },
        {
            "trigger": "WP_Roles-add_cap\tWP Class Method",
            "contents": "${1:WP_Roles}->add_cap( ${2:\\$role}, ${3:\\$cap}, ${4:\\$grant} );"
        },
        {
            "trigger": "WP_Roles-add_role\tWP Class Method",
            "contents": "${1:WP_Roles}->add_role( ${2:\\$role}, ${3:\\$display_name}, ${4:\\$capabilities} );"
        },
        {
            "trigger": "WP_Roles-for_site\tWP Class Method",
            "contents": "${1:WP_Roles}->for_site( ${2:\\$site_id} );"
        },
        {
            "trigger": "WP_Roles-get_names\tWP Class Method",
            "contents": "${1:WP_Roles}->get_names();"
        },
        {
            "trigger": "WP_Roles-get_role\tWP Class Method",
            "contents": "${1:WP_Roles}->get_role( ${2:\\$role} );"
        },
        {
            "trigger": "WP_Roles-get_site_id\tWP Class Method",
            "contents": "${1:WP_Roles}->get_site_id();"
        },
        {
            "trigger": "WP_Roles-init_roles\tWP Class Method",
            "contents": "${1:WP_Roles}->init_roles();"
        },
        {
            "trigger": "WP_Roles-is_role\tWP Class Method",
            "contents": "${1:WP_Roles}->is_role( ${2:\\$role} );"
        },
        {
            "trigger": "WP_Roles-remove_cap\tWP Class Method",
            "contents": "${1:WP_Roles}->remove_cap( ${2:\\$role}, ${3:\\$cap} );"
        },
        {
            "trigger": "WP_Roles-remove_role\tWP Class Method",
            "contents": "${1:WP_Roles}->remove_role( ${2:\\$role} );"
        },
        {
            "trigger": "WP_Screen-add_help_tab\tWP Class Method",
            "contents": "${1:WP_Screen}->add_help_tab( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Screen-add_old_compat_help\tWP Class Method",
            "contents": "${1:WP_Screen}::add_old_compat_help( ${2:\\$screen}, ${3:\\$help} );"
        },
        {
            "trigger": "WP_Screen-add_option\tWP Class Method",
            "contents": "${1:WP_Screen}->add_option( ${2:\\$option}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Screen-get\tWP Class Method",
            "contents": "${1:WP_Screen}::get( ${2:\\$hook_name} );"
        },
        {
            "trigger": "WP_Screen-get_columns\tWP Class Method",
            "contents": "${1:WP_Screen}->get_columns();"
        },
        {
            "trigger": "WP_Screen-get_help_sidebar\tWP Class Method",
            "contents": "${1:WP_Screen}->get_help_sidebar();"
        },
        {
            "trigger": "WP_Screen-get_help_tab\tWP Class Method",
            "contents": "${1:WP_Screen}->get_help_tab( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Screen-get_help_tabs\tWP Class Method",
            "contents": "${1:WP_Screen}->get_help_tabs();"
        },
        {
            "trigger": "WP_Screen-get_option\tWP Class Method",
            "contents": "${1:WP_Screen}->get_option( ${2:\\$option}, ${3:\\$key} );"
        },
        {
            "trigger": "WP_Screen-get_options\tWP Class Method",
            "contents": "${1:WP_Screen}->get_options();"
        },
        {
            "trigger": "WP_Screen-get_screen_reader_content\tWP Class Method",
            "contents": "${1:WP_Screen}->get_screen_reader_content();"
        },
        {
            "trigger": "WP_Screen-get_screen_reader_text\tWP Class Method",
            "contents": "${1:WP_Screen}->get_screen_reader_text( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Screen-in_admin\tWP Class Method",
            "contents": "${1:WP_Screen}->in_admin( ${2:\\$admin} );"
        },
        {
            "trigger": "WP_Screen-is_block_editor\tWP Class Method",
            "contents": "${1:WP_Screen}->is_block_editor( ${2:\\$set} );"
        },
        {
            "trigger": "WP_Screen-remove_help_tab\tWP Class Method",
            "contents": "${1:WP_Screen}->remove_help_tab( ${2:\\$id} );"
        },
        {
            "trigger": "WP_Screen-remove_help_tabs\tWP Class Method",
            "contents": "${1:WP_Screen}->remove_help_tabs();"
        },
        {
            "trigger": "WP_Screen-remove_option\tWP Class Method",
            "contents": "${1:WP_Screen}->remove_option( ${2:\\$option} );"
        },
        {
            "trigger": "WP_Screen-remove_options\tWP Class Method",
            "contents": "${1:WP_Screen}->remove_options();"
        },
        {
            "trigger": "WP_Screen-remove_screen_reader_content\tWP Class Method",
            "contents": "${1:WP_Screen}->remove_screen_reader_content();"
        },
        {
            "trigger": "WP_Screen-render_list_table_columns_preferences\tWP Class Method",
            "contents": "${1:WP_Screen}->render_list_table_columns_preferences();"
        },
        {
            "trigger": "WP_Screen-render_meta_boxes_preferences\tWP Class Method",
            "contents": "${1:WP_Screen}->render_meta_boxes_preferences();"
        },
        {
            "trigger": "WP_Screen-render_per_page_options\tWP Class Method",
            "contents": "${1:WP_Screen}->render_per_page_options();"
        },
        {
            "trigger": "WP_Screen-render_screen_layout\tWP Class Method",
            "contents": "${1:WP_Screen}->render_screen_layout();"
        },
        {
            "trigger": "WP_Screen-render_screen_meta\tWP Class Method",
            "contents": "${1:WP_Screen}->render_screen_meta();"
        },
        {
            "trigger": "WP_Screen-render_screen_options\tWP Class Method",
            "contents": "${1:WP_Screen}->render_screen_options( ${2:\\$options} );"
        },
        {
            "trigger": "WP_Screen-render_screen_reader_content\tWP Class Method",
            "contents": "${1:WP_Screen}->render_screen_reader_content( ${2:\\$key}, ${3:\\$tag} );"
        },
        {
            "trigger": "WP_Screen-render_view_mode\tWP Class Method",
            "contents": "${1:WP_Screen}->render_view_mode();"
        },
        {
            "trigger": "WP_Screen-set_current_screen\tWP Class Method",
            "contents": "${1:WP_Screen}->set_current_screen();"
        },
        {
            "trigger": "WP_Screen-set_help_sidebar\tWP Class Method",
            "contents": "${1:WP_Screen}->set_help_sidebar( ${2:\\$content} );"
        },
        {
            "trigger": "WP_Screen-set_parentage\tWP Class Method",
            "contents": "${1:WP_Screen}->set_parentage( ${2:\\$parent_file} );"
        },
        {
            "trigger": "WP_Screen-set_screen_reader_content\tWP Class Method",
            "contents": "${1:WP_Screen}->set_screen_reader_content( ${2:\\$content} );"
        },
        {
            "trigger": "WP_Screen-show_screen_options\tWP Class Method",
            "contents": "${1:WP_Screen}->show_screen_options();"
        },
        {
            "trigger": "WP_Scripts-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Scripts();"
        },
        {
            "trigger": "WP_Scripts-add_inline_script\tWP Class Method",
            "contents": "${1:WP_Scripts}->add_inline_script( ${2:\\$handle}, ${3:\\$data}, ${4:\\$position} );"
        },
        {
            "trigger": "WP_Scripts-all_deps\tWP Class Method",
            "contents": "${1:WP_Scripts}->all_deps( ${2:\\$handles}, ${3:\\$recursion}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Scripts-do_footer_items\tWP Class Method",
            "contents": "${1:WP_Scripts}->do_footer_items();"
        },
        {
            "trigger": "WP_Scripts-do_head_items\tWP Class Method",
            "contents": "${1:WP_Scripts}->do_head_items();"
        },
        {
            "trigger": "WP_Scripts-do_item\tWP Class Method",
            "contents": "${1:WP_Scripts}->do_item( ${2:\\$handle}, ${3:\\$group} );"
        },
        {
            "trigger": "WP_Scripts-in_default_dir\tWP Class Method",
            "contents": "${1:WP_Scripts}->in_default_dir( ${2:\\$src} );"
        },
        {
            "trigger": "WP_Scripts-init\tWP Class Method",
            "contents": "${1:WP_Scripts}->init();"
        },
        {
            "trigger": "WP_Scripts-localize\tWP Class Method",
            "contents": "${1:WP_Scripts}->localize( ${2:\\$handle}, ${3:\\$object_name}, ${4:\\$l10n} );"
        },
        {
            "trigger": "WP_Scripts-print_extra_script\tWP Class Method",
            "contents": "${1:WP_Scripts}->print_extra_script( ${2:\\$handle}, ${3:\\$echo} );"
        },
        {
            "trigger": "WP_Scripts-print_inline_script\tWP Class Method",
            "contents": "${1:WP_Scripts}->print_inline_script( ${2:\\$handle}, ${3:\\$position}, ${4:\\$echo} );"
        },
        {
            "trigger": "WP_Scripts-print_scripts\tWP Class Method",
            "contents": "${1:WP_Scripts}->print_scripts( ${2:\\$handles}, ${3:\\$group} );"
        },
        {
            "trigger": "WP_Scripts-print_translations\tWP Class Method",
            "contents": "${1:WP_Scripts}->print_translations( ${2:\\$handle}, ${3:\\$echo} );"
        },
        {
            "trigger": "WP_Scripts-reset\tWP Class Method",
            "contents": "${1:WP_Scripts}->reset();"
        },
        {
            "trigger": "WP_Scripts-set_group\tWP Class Method",
            "contents": "${1:WP_Scripts}->set_group( ${2:\\$handle}, ${3:\\$recursion}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Scripts-set_translations\tWP Class Method",
            "contents": "${1:WP_Scripts}->set_translations( ${2:\\$handle}, ${3:\\$domain}, ${4:\\$path} );"
        },
        {
            "trigger": "WP_Session_Tokens-create\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->create( ${2:\\$expiration} );"
        },
        {
            "trigger": "WP_Session_Tokens-destroy\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->destroy( ${2:\\$token} );"
        },
        {
            "trigger": "WP_Session_Tokens-destroy_all\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->destroy_all();"
        },
        {
            "trigger": "WP_Session_Tokens-destroy_all_for_all_users\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}::destroy_all_for_all_users();"
        },
        {
            "trigger": "WP_Session_Tokens-destroy_others\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->destroy_others( ${2:\\$token_to_keep} );"
        },
        {
            "trigger": "WP_Session_Tokens-drop_sessions\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}::drop_sessions();"
        },
        {
            "trigger": "WP_Session_Tokens-get\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->get( ${2:\\$token} );"
        },
        {
            "trigger": "WP_Session_Tokens-get_all\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->get_all();"
        },
        {
            "trigger": "WP_Session_Tokens-get_instance\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}::get_instance( ${2:\\$user_id} );"
        },
        {
            "trigger": "WP_Session_Tokens-update\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->update( ${2:\\$token}, ${3:\\$session} );"
        },
        {
            "trigger": "WP_Session_Tokens-verify\tWP Class Method",
            "contents": "${1:WP_Session_Tokens}->verify( ${2:\\$token} );"
        },
        {
            "trigger": "WP_SimplePie_File-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_SimplePie_File( ${3:\\$url}, ${4:\\$timeout}, ${5:\\$redirects}, ${6:\\$headers}, ${7:\\$useragent}, ${8:\\$force_fsockopen} );"
        },
        {
            "trigger": "WP_SimplePie_Sanitize_KSES-sanitize\tWP Class Method",
            "contents": "${1:WP_SimplePie_Sanitize_KSES}->sanitize( ${2:\\$data}, ${3:\\$type}, ${4:\\$base} );"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Site_Health_Auto_Updates();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-run_tests\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->run_tests();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_accepts_dev_updates\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_accepts_dev_updates();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_accepts_minor_updates\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_accepts_minor_updates();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_all_files_writable\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_all_files_writable();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_check_wp_filesystem_method\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_check_wp_filesystem_method();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_constants\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_constants( ${2:\\$constant}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_filters_automatic_updater_disabled\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_filters_automatic_updater_disabled();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_if_failed_update\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_if_failed_update();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_vcs_abspath\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_vcs_abspath();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_wp_automatic_updates_disabled\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_wp_automatic_updates_disabled();"
        },
        {
            "trigger": "WP_Site_Health_Auto_Updates-test_wp_version_check_attached\tWP Class Method",
            "contents": "${1:WP_Site_Health_Auto_Updates}->test_wp_version_check_attached();"
        },
        {
            "trigger": "WP_Site_Health-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Site_Health();"
        },
        {
            "trigger": "WP_Site_Health-admin_body_class\tWP Class Method",
            "contents": "${1:WP_Site_Health}->admin_body_class( ${2:\\$body_class} );"
        },
        {
            "trigger": "WP_Site_Health-can_perform_loopback\tWP Class Method",
            "contents": "${1:WP_Site_Health}->can_perform_loopback();"
        },
        {
            "trigger": "WP_Site_Health-check_wp_version_check_exists\tWP Class Method",
            "contents": "${1:WP_Site_Health}->check_wp_version_check_exists();"
        },
        {
            "trigger": "WP_Site_Health-enqueue_scripts\tWP Class Method",
            "contents": "${1:WP_Site_Health}->enqueue_scripts();"
        },
        {
            "trigger": "WP_Site_Health-get_instance\tWP Class Method",
            "contents": "${1:WP_Site_Health}::get_instance();"
        },
        {
            "trigger": "WP_Site_Health-get_test_background_updates\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_background_updates();"
        },
        {
            "trigger": "WP_Site_Health-get_test_dotorg_communication\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_dotorg_communication();"
        },
        {
            "trigger": "WP_Site_Health-get_test_http_requests\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_http_requests();"
        },
        {
            "trigger": "WP_Site_Health-get_test_https_status\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_https_status();"
        },
        {
            "trigger": "WP_Site_Health-get_test_is_in_debug_mode\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_is_in_debug_mode();"
        },
        {
            "trigger": "WP_Site_Health-get_test_loopback_requests\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_loopback_requests();"
        },
        {
            "trigger": "WP_Site_Health-get_test_php_default_timezone\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_php_default_timezone();"
        },
        {
            "trigger": "WP_Site_Health-get_test_php_extensions\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_php_extensions();"
        },
        {
            "trigger": "WP_Site_Health-get_test_php_version\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_php_version();"
        },
        {
            "trigger": "WP_Site_Health-get_test_plugin_version\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_plugin_version();"
        },
        {
            "trigger": "WP_Site_Health-get_test_rest_availability\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_rest_availability();"
        },
        {
            "trigger": "WP_Site_Health-get_test_scheduled_events\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_scheduled_events();"
        },
        {
            "trigger": "WP_Site_Health-get_test_sql_server\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_sql_server();"
        },
        {
            "trigger": "WP_Site_Health-get_test_ssl_support\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_ssl_support();"
        },
        {
            "trigger": "WP_Site_Health-get_test_theme_version\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_theme_version();"
        },
        {
            "trigger": "WP_Site_Health-get_test_utf8mb4_support\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_utf8mb4_support();"
        },
        {
            "trigger": "WP_Site_Health-get_test_wordpress_version\tWP Class Method",
            "contents": "${1:WP_Site_Health}->get_test_wordpress_version();"
        },
        {
            "trigger": "WP_Site_Health-get_tests\tWP Class Method",
            "contents": "${1:WP_Site_Health}::get_tests();"
        },
        {
            "trigger": "WP_Site_Health-has_late_cron\tWP Class Method",
            "contents": "${1:WP_Site_Health}->has_late_cron();"
        },
        {
            "trigger": "WP_Site_Health-has_missed_cron\tWP Class Method",
            "contents": "${1:WP_Site_Health}->has_missed_cron();"
        },
        {
            "trigger": "WP_Site_Health-maybe_create_scheduled_event\tWP Class Method",
            "contents": "${1:WP_Site_Health}->maybe_create_scheduled_event();"
        },
        {
            "trigger": "WP_Site_Health-wp_cron_scheduled_check\tWP Class Method",
            "contents": "${1:WP_Site_Health}->wp_cron_scheduled_check();"
        },
        {
            "trigger": "WP_Site_Icon-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Site_Icon();"
        },
        {
            "trigger": "WP_Site_Icon-additional_sizes\tWP Class Method",
            "contents": "${1:WP_Site_Icon}->additional_sizes( ${2:\\$sizes} );"
        },
        {
            "trigger": "WP_Site_Icon-create_attachment_object\tWP Class Method",
            "contents": "${1:WP_Site_Icon}->create_attachment_object( ${2:\\$cropped}, ${3:\\$parent_attachment_id} );"
        },
        {
            "trigger": "WP_Site_Icon-delete_attachment_data\tWP Class Method",
            "contents": "${1:WP_Site_Icon}->delete_attachment_data( ${2:\\$post_id} );"
        },
        {
            "trigger": "WP_Site_Icon-get_post_metadata\tWP Class Method",
            "contents": "${1:WP_Site_Icon}->get_post_metadata( ${2:\\$value}, ${3:\\$post_id}, ${4:\\$meta_key}, ${5:\\$single} );"
        },
        {
            "trigger": "WP_Site_Icon-insert_attachment\tWP Class Method",
            "contents": "${1:WP_Site_Icon}->insert_attachment( ${2:\\$object}, ${3:\\$file} );"
        },
        {
            "trigger": "WP_Site_Icon-intermediate_image_sizes\tWP Class Method",
            "contents": "${1:WP_Site_Icon}->intermediate_image_sizes( ${2:\\$sizes} );"
        },
        {
            "trigger": "WP_Site_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Site_Query( ${3:\\$query} );"
        },
        {
            "trigger": "WP_Site_Query-get_sites\tWP Class Method",
            "contents": "${1:WP_Site_Query}->get_sites();"
        },
        {
            "trigger": "WP_Site_Query-parse_query\tWP Class Method",
            "contents": "${1:WP_Site_Query}->parse_query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Site_Query-query\tWP Class Method",
            "contents": "${1:WP_Site_Query}->query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Site-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Site( ${3:\\$site} );"
        },
        {
            "trigger": "WP_Site-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Site}->__get( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Site-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Site}->__isset( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Site-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Site}->__set( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Site-get_instance\tWP Class Method",
            "contents": "${1:WP_Site}::get_instance( ${2:\\$site_id} );"
        },
        {
            "trigger": "WP_Site-to_array\tWP Class Method",
            "contents": "${1:WP_Site}->to_array();"
        },
        {
            "trigger": "WP_Styles-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Styles();"
        },
        {
            "trigger": "WP_Styles-_css_href\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Styles}->_css_href( ${2:\\$src}, ${3:\\$ver}, ${4:\\$handle} );"
        },
        {
            "trigger": "WP_Styles-add_inline_style\tWP Class Method",
            "contents": "${1:WP_Styles}->add_inline_style( ${2:\\$handle}, ${3:\\$code} );"
        },
        {
            "trigger": "WP_Styles-all_deps\tWP Class Method",
            "contents": "${1:WP_Styles}->all_deps( ${2:\\$handles}, ${3:\\$recursion}, ${4:\\$group} );"
        },
        {
            "trigger": "WP_Styles-do_footer_items\tWP Class Method",
            "contents": "${1:WP_Styles}->do_footer_items();"
        },
        {
            "trigger": "WP_Styles-do_item\tWP Class Method",
            "contents": "${1:WP_Styles}->do_item( ${2:\\$handle} );"
        },
        {
            "trigger": "WP_Styles-in_default_dir\tWP Class Method",
            "contents": "${1:WP_Styles}->in_default_dir( ${2:\\$src} );"
        },
        {
            "trigger": "WP_Styles-print_inline_style\tWP Class Method",
            "contents": "${1:WP_Styles}->print_inline_style( ${2:\\$handle}, ${3:\\$echo} );"
        },
        {
            "trigger": "WP_Styles-reset\tWP Class Method",
            "contents": "${1:WP_Styles}->reset();"
        },
        {
            "trigger": "WP_Tax_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Tax_Query( ${3:\\$tax_query} );"
        },
        {
            "trigger": "WP_Tax_Query-get_sql\tWP Class Method",
            "contents": "${1:WP_Tax_Query}->get_sql( ${2:\\$primary_table}, ${3:\\$primary_id_column} );"
        },
        {
            "trigger": "WP_Tax_Query-get_sql_for_clause\tWP Class Method",
            "contents": "${1:WP_Tax_Query}->get_sql_for_clause( ${2:\\$clause}, ${3:\\$parent_query} );"
        },
        {
            "trigger": "WP_Tax_Query-sanitize_query\tWP Class Method",
            "contents": "${1:WP_Tax_Query}->sanitize_query( ${2:\\$queries} );"
        },
        {
            "trigger": "WP_Tax_Query-sanitize_relation\tWP Class Method",
            "contents": "${1:WP_Tax_Query}->sanitize_relation( ${2:\\$relation} );"
        },
        {
            "trigger": "WP_Tax_Query-transform_query\tWP Class Method",
            "contents": "${1:WP_Tax_Query}->transform_query( ${2:\\$query}, ${3:\\$resulting_field} );"
        },
        {
            "trigger": "WP_Taxonomy-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Taxonomy( ${3:\\$taxonomy}, ${4:\\$object_type}, ${5:\\$args} );"
        },
        {
            "trigger": "WP_Taxonomy-add_hooks\tWP Class Method",
            "contents": "${1:WP_Taxonomy}->add_hooks();"
        },
        {
            "trigger": "WP_Taxonomy-add_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Taxonomy}->add_rewrite_rules();"
        },
        {
            "trigger": "WP_Taxonomy-remove_hooks\tWP Class Method",
            "contents": "${1:WP_Taxonomy}->remove_hooks();"
        },
        {
            "trigger": "WP_Taxonomy-remove_rewrite_rules\tWP Class Method",
            "contents": "${1:WP_Taxonomy}->remove_rewrite_rules();"
        },
        {
            "trigger": "WP_Taxonomy-set_props\tWP Class Method",
            "contents": "${1:WP_Taxonomy}->set_props( ${2:\\$object_type}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Term_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Term_Query( ${3:\\$query} );"
        },
        {
            "trigger": "WP_Term_Query-get_terms\tWP Class Method",
            "contents": "${1:WP_Term_Query}->get_terms();"
        },
        {
            "trigger": "WP_Term_Query-parse_query\tWP Class Method",
            "contents": "${1:WP_Term_Query}->parse_query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Term_Query-query\tWP Class Method",
            "contents": "${1:WP_Term_Query}->query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_Term-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Term( ${3:\\$term} );"
        },
        {
            "trigger": "WP_Term-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Term}->__get( ${2:\\$key} );"
        },
        {
            "trigger": "WP_Term-filter\tWP Class Method",
            "contents": "${1:WP_Term}->filter( ${2:\\$filter} );"
        },
        {
            "trigger": "WP_Term-get_instance\tWP Class Method",
            "contents": "${1:WP_Term}::get_instance( ${2:\\$term_id}, ${3:\\$taxonomy} );"
        },
        {
            "trigger": "WP_Term-to_array\tWP Class Method",
            "contents": "${1:WP_Term}->to_array();"
        },
        {
            "trigger": "WP_Terms_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Terms_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Terms_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Terms_List_Table-column_cb\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_cb( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Terms_List_Table-column_default\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_default( ${2:\\$tag}, ${3:\\$column_name} );"
        },
        {
            "trigger": "WP_Terms_List_Table-column_description\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_description( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Terms_List_Table-column_links\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_links( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Terms_List_Table-column_name\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_name( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Terms_List_Table-column_posts\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_posts( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Terms_List_Table-column_slug\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->column_slug( ${2:\\$tag} );"
        },
        {
            "trigger": "WP_Terms_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->current_action();"
        },
        {
            "trigger": "WP_Terms_List_Table-display_rows_or_placeholder\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->display_rows_or_placeholder();"
        },
        {
            "trigger": "WP_Terms_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Terms_List_Table-has_items\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->has_items();"
        },
        {
            "trigger": "WP_Terms_List_Table-inline_edit\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->inline_edit();"
        },
        {
            "trigger": "WP_Terms_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Terms_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Terms_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Terms_List_Table}->single_row( ${2:\\$tag}, ${3:\\$level} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Text_Diff_Renderer_Table( ${3:\\$params} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Text_Diff_Renderer_Table}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Text_Diff_Renderer_Table}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Text_Diff_Renderer_Table}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Text_Diff_Renderer_Table}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-_changed\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Text_Diff_Renderer_Table}->_changed( ${2:\\$orig}, ${3:\\$final} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-compute_string_distance\tWP Class Method",
            "contents": "${1:WP_Text_Diff_Renderer_Table}->compute_string_distance( ${2:\\$string1}, ${3:\\$string2} );"
        },
        {
            "trigger": "WP_Text_Diff_Renderer_Table-interleave_changed_lines\tWP Class Method",
            "contents": "${1:WP_Text_Diff_Renderer_Table}->interleave_changed_lines( ${2:\\$orig}, ${3:\\$final} );"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-_js_vars\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Theme_Install_List_Table}->_js_vars( ${2:\\$extra_args} );"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-display\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->display();"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-install_theme_info\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->install_theme_info( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->single_row( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-theme_installer\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->theme_installer();"
        },
        {
            "trigger": "WP_Theme_Install_List_Table-theme_installer_single\tWP Class Method",
            "contents": "${1:WP_Theme_Install_List_Table}->theme_installer_single( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_Theme-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Theme( ${3:\\$theme_dir}, ${4:\\$theme_root}, ${5:\\$_child} );"
        },
        {
            "trigger": "WP_Theme-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Theme}->__get( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Theme-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Theme}->__isset( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Theme-__toString\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Theme}->__toString();"
        },
        {
            "trigger": "WP_Theme-cache_delete\tWP Class Method",
            "contents": "${1:WP_Theme}->cache_delete();"
        },
        {
            "trigger": "WP_Theme-display\tWP Class Method",
            "contents": "${1:WP_Theme}->display( ${2:\\$header}, ${3:\\$markup}, ${4:\\$translate} );"
        },
        {
            "trigger": "WP_Theme-errors\tWP Class Method",
            "contents": "${1:WP_Theme}->errors();"
        },
        {
            "trigger": "WP_Theme-exists\tWP Class Method",
            "contents": "${1:WP_Theme}->exists();"
        },
        {
            "trigger": "WP_Theme-get\tWP Class Method",
            "contents": "${1:WP_Theme}->get( ${2:\\$header} );"
        },
        {
            "trigger": "WP_Theme-get_allowed\tWP Class Method",
            "contents": "${1:WP_Theme}::get_allowed( ${2:\\$blog_id} );"
        },
        {
            "trigger": "WP_Theme-get_allowed_on_network\tWP Class Method",
            "contents": "${1:WP_Theme}::get_allowed_on_network();"
        },
        {
            "trigger": "WP_Theme-get_allowed_on_site\tWP Class Method",
            "contents": "${1:WP_Theme}::get_allowed_on_site( ${2:\\$blog_id} );"
        },
        {
            "trigger": "WP_Theme-get_core_default_theme\tWP Class Method",
            "contents": "${1:WP_Theme}::get_core_default_theme();"
        },
        {
            "trigger": "WP_Theme-get_files\tWP Class Method",
            "contents": "${1:WP_Theme}->get_files( ${2:\\$type}, ${3:\\$depth}, ${4:\\$search_parent} );"
        },
        {
            "trigger": "WP_Theme-get_page_templates\tWP Class Method",
            "contents": "${1:WP_Theme}->get_page_templates( ${2:\\$post}, ${3:\\$post_type} );"
        },
        {
            "trigger": "WP_Theme-get_post_templates\tWP Class Method",
            "contents": "${1:WP_Theme}->get_post_templates();"
        },
        {
            "trigger": "WP_Theme-get_screenshot\tWP Class Method",
            "contents": "${1:WP_Theme}->get_screenshot( ${2:\\$uri} );"
        },
        {
            "trigger": "WP_Theme-get_stylesheet\tWP Class Method",
            "contents": "${1:WP_Theme}->get_stylesheet();"
        },
        {
            "trigger": "WP_Theme-get_stylesheet_directory\tWP Class Method",
            "contents": "${1:WP_Theme}->get_stylesheet_directory();"
        },
        {
            "trigger": "WP_Theme-get_stylesheet_directory_uri\tWP Class Method",
            "contents": "${1:WP_Theme}->get_stylesheet_directory_uri();"
        },
        {
            "trigger": "WP_Theme-get_template\tWP Class Method",
            "contents": "${1:WP_Theme}->get_template();"
        },
        {
            "trigger": "WP_Theme-get_template_directory\tWP Class Method",
            "contents": "${1:WP_Theme}->get_template_directory();"
        },
        {
            "trigger": "WP_Theme-get_template_directory_uri\tWP Class Method",
            "contents": "${1:WP_Theme}->get_template_directory_uri();"
        },
        {
            "trigger": "WP_Theme-get_theme_root\tWP Class Method",
            "contents": "${1:WP_Theme}->get_theme_root();"
        },
        {
            "trigger": "WP_Theme-get_theme_root_uri\tWP Class Method",
            "contents": "${1:WP_Theme}->get_theme_root_uri();"
        },
        {
            "trigger": "WP_Theme-is_allowed\tWP Class Method",
            "contents": "${1:WP_Theme}->is_allowed( ${2:\\$check}, ${3:\\$blog_id} );"
        },
        {
            "trigger": "WP_Theme-load_textdomain\tWP Class Method",
            "contents": "${1:WP_Theme}->load_textdomain();"
        },
        {
            "trigger": "WP_Theme-network_disable_theme\tWP Class Method",
            "contents": "${1:WP_Theme}::network_disable_theme( ${2:\\$stylesheets} );"
        },
        {
            "trigger": "WP_Theme-network_enable_theme\tWP Class Method",
            "contents": "${1:WP_Theme}::network_enable_theme( ${2:\\$stylesheets} );"
        },
        {
            "trigger": "WP_Theme-offsetExists\tWP Class Method",
            "contents": "${1:WP_Theme}->offsetExists( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Theme-offsetGet\tWP Class Method",
            "contents": "${1:WP_Theme}->offsetGet( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Theme-offsetSet\tWP Class Method",
            "contents": "${1:WP_Theme}->offsetSet( ${2:\\$offset}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_Theme-offsetUnset\tWP Class Method",
            "contents": "${1:WP_Theme}->offsetUnset( ${2:\\$offset} );"
        },
        {
            "trigger": "WP_Theme-parent\tWP Class Method",
            "contents": "${1:WP_Theme}->parent();"
        },
        {
            "trigger": "WP_Theme-sort_by_name\tWP Class Method",
            "contents": "${1:WP_Theme}::sort_by_name( ${2:\\$themes} );"
        },
        {
            "trigger": "WP_Themes_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Themes_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Themes_List_Table-_js_vars\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Themes_List_Table}->_js_vars( ${2:\\$extra_args} );"
        },
        {
            "trigger": "WP_Themes_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Themes_List_Table-display\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->display();"
        },
        {
            "trigger": "WP_Themes_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Themes_List_Table-display_rows_or_placeholder\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->display_rows_or_placeholder();"
        },
        {
            "trigger": "WP_Themes_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Themes_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Themes_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Themes_List_Table-search_theme\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->search_theme( ${2:\\$theme} );"
        },
        {
            "trigger": "WP_Themes_List_Table-tablenav\tWP Class Method",
            "contents": "${1:WP_Themes_List_Table}->tablenav( ${2:\\$which} );"
        },
        {
            "trigger": "WP_Upgrader_Skin-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Upgrader_Skin( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Upgrader_Skin-add_strings\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->add_strings();"
        },
        {
            "trigger": "WP_Upgrader_Skin-after\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->after();"
        },
        {
            "trigger": "WP_Upgrader_Skin-before\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->before();"
        },
        {
            "trigger": "WP_Upgrader_Skin-bulk_footer\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->bulk_footer();"
        },
        {
            "trigger": "WP_Upgrader_Skin-bulk_header\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->bulk_header();"
        },
        {
            "trigger": "WP_Upgrader_Skin-error\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->error( ${2:\\$errors} );"
        },
        {
            "trigger": "WP_Upgrader_Skin-feedback\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->feedback( ${2:\\$string}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_Upgrader_Skin-footer\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->footer();"
        },
        {
            "trigger": "WP_Upgrader_Skin-header\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->header();"
        },
        {
            "trigger": "WP_Upgrader_Skin-request_filesystem_credentials\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->request_filesystem_credentials( ${2:\\$error}, ${3:\\$context}, ${4:\\$allow_relaxed_file_ownership} );"
        },
        {
            "trigger": "WP_Upgrader_Skin-set_result\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->set_result( ${2:\\$result} );"
        },
        {
            "trigger": "WP_Upgrader_Skin-set_upgrader\tWP Class Method",
            "contents": "${1:WP_Upgrader_Skin}->set_upgrader( ${2:\\$upgrader} );"
        },
        {
            "trigger": "WP_Upgrader-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Upgrader( ${3:\\$skin} );"
        },
        {
            "trigger": "WP_Upgrader-clear_destination\tWP Class Method",
            "contents": "${1:WP_Upgrader}->clear_destination( ${2:\\$remote_destination} );"
        },
        {
            "trigger": "WP_Upgrader-create_lock\tWP Class Method",
            "contents": "${1:WP_Upgrader}::create_lock( ${2:\\$lock_name}, ${3:\\$release_timeout} );"
        },
        {
            "trigger": "WP_Upgrader-download_package\tWP Class Method",
            "contents": "${1:WP_Upgrader}->download_package( ${2:\\$package}, ${3:\\$check_signatures} );"
        },
        {
            "trigger": "WP_Upgrader-fs_connect\tWP Class Method",
            "contents": "${1:WP_Upgrader}->fs_connect( ${2:\\$directories}, ${3:\\$allow_relaxed_file_ownership} );"
        },
        {
            "trigger": "WP_Upgrader-generic_strings\tWP Class Method",
            "contents": "${1:WP_Upgrader}->generic_strings();"
        },
        {
            "trigger": "WP_Upgrader-init\tWP Class Method",
            "contents": "${1:WP_Upgrader}->init();"
        },
        {
            "trigger": "WP_Upgrader-install_package\tWP Class Method",
            "contents": "${1:WP_Upgrader}->install_package( ${2:\\$args} );"
        },
        {
            "trigger": "WP_Upgrader-maintenance_mode\tWP Class Method",
            "contents": "${1:WP_Upgrader}->maintenance_mode( ${2:\\$enable} );"
        },
        {
            "trigger": "WP_Upgrader-release_lock\tWP Class Method",
            "contents": "${1:WP_Upgrader}::release_lock( ${2:\\$lock_name} );"
        },
        {
            "trigger": "WP_Upgrader-run\tWP Class Method",
            "contents": "${1:WP_Upgrader}->run( ${2:\\$options} );"
        },
        {
            "trigger": "WP_Upgrader-unpack_package\tWP Class Method",
            "contents": "${1:WP_Upgrader}->unpack_package( ${2:\\$package}, ${3:\\$delete_package} );"
        },
        {
            "trigger": "WP_User_Meta_Session_Tokens-drop_sessions\tWP Class Method",
            "contents": "${1:WP_User_Meta_Session_Tokens}::drop_sessions();"
        },
        {
            "trigger": "WP_User_Query-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User_Query}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_User_Query-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_User_Query( ${3:\\$query} );"
        },
        {
            "trigger": "WP_User_Query-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User_Query}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "WP_User_Query-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User_Query}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_User_Query-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User_Query}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_User_Query-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User_Query}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "WP_User_Query-fill_query_vars\tWP Class Method",
            "contents": "${1:WP_User_Query}::fill_query_vars( ${2:\\$args} );"
        },
        {
            "trigger": "WP_User_Query-get\tWP Class Method",
            "contents": "${1:WP_User_Query}->get( ${2:\\$query_var} );"
        },
        {
            "trigger": "WP_User_Query-get_results\tWP Class Method",
            "contents": "${1:WP_User_Query}->get_results();"
        },
        {
            "trigger": "WP_User_Query-get_total\tWP Class Method",
            "contents": "${1:WP_User_Query}->get_total();"
        },
        {
            "trigger": "WP_User_Query-prepare_query\tWP Class Method",
            "contents": "${1:WP_User_Query}->prepare_query( ${2:\\$query} );"
        },
        {
            "trigger": "WP_User_Query-query\tWP Class Method",
            "contents": "${1:WP_User_Query}->query();"
        },
        {
            "trigger": "WP_User_Query-set\tWP Class Method",
            "contents": "${1:WP_User_Query}->set( ${2:\\$query_var}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_User_Request-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_User_Request( ${3:\\$post} );"
        },
        {
            "trigger": "WP_User-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "WP_User-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_User( ${3:\\$id}, ${4:\\$name}, ${5:\\$site_id} );"
        },
        {
            "trigger": "WP_User-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User}->__get( ${2:\\$key} );"
        },
        {
            "trigger": "WP_User-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User}->__isset( ${2:\\$key} );"
        },
        {
            "trigger": "WP_User-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User}->__set( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_User-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_User}->__unset( ${2:\\$key} );"
        },
        {
            "trigger": "WP_User-add_cap\tWP Class Method",
            "contents": "${1:WP_User}->add_cap( ${2:\\$cap}, ${3:\\$grant} );"
        },
        {
            "trigger": "WP_User-add_role\tWP Class Method",
            "contents": "${1:WP_User}->add_role( ${2:\\$role} );"
        },
        {
            "trigger": "WP_User-exists\tWP Class Method",
            "contents": "${1:WP_User}->exists();"
        },
        {
            "trigger": "WP_User-for_site\tWP Class Method",
            "contents": "${1:WP_User}->for_site( ${2:\\$site_id} );"
        },
        {
            "trigger": "WP_User-get\tWP Class Method",
            "contents": "${1:WP_User}->get( ${2:\\$key} );"
        },
        {
            "trigger": "WP_User-get_data_by\tWP Class Method",
            "contents": "${1:WP_User}::get_data_by( ${2:\\$field}, ${3:\\$value} );"
        },
        {
            "trigger": "WP_User-get_role_caps\tWP Class Method",
            "contents": "${1:WP_User}->get_role_caps();"
        },
        {
            "trigger": "WP_User-get_site_id\tWP Class Method",
            "contents": "${1:WP_User}->get_site_id();"
        },
        {
            "trigger": "WP_User-has_cap\tWP Class Method",
            "contents": "${1:WP_User}->has_cap( ${2:\\$cap}, ${3:\\$args} );"
        },
        {
            "trigger": "WP_User-has_prop\tWP Class Method",
            "contents": "${1:WP_User}->has_prop( ${2:\\$key} );"
        },
        {
            "trigger": "WP_User-init\tWP Class Method",
            "contents": "${1:WP_User}->init( ${2:\\$data}, ${3:\\$site_id} );"
        },
        {
            "trigger": "WP_User-level_reduction\tWP Class Method",
            "contents": "${1:WP_User}->level_reduction( ${2:\\$max}, ${3:\\$item} );"
        },
        {
            "trigger": "WP_User-remove_all_caps\tWP Class Method",
            "contents": "${1:WP_User}->remove_all_caps();"
        },
        {
            "trigger": "WP_User-remove_cap\tWP Class Method",
            "contents": "${1:WP_User}->remove_cap( ${2:\\$cap} );"
        },
        {
            "trigger": "WP_User-remove_role\tWP Class Method",
            "contents": "${1:WP_User}->remove_role( ${2:\\$role} );"
        },
        {
            "trigger": "WP_User-set_role\tWP Class Method",
            "contents": "${1:WP_User}->set_role( ${2:\\$role} );"
        },
        {
            "trigger": "WP_User-to_array\tWP Class Method",
            "contents": "${1:WP_User}->to_array();"
        },
        {
            "trigger": "WP_User-translate_level_to_cap\tWP Class Method",
            "contents": "${1:WP_User}->translate_level_to_cap( ${2:\\$level} );"
        },
        {
            "trigger": "WP_User-update_user_level_from_caps\tWP Class Method",
            "contents": "${1:WP_User}->update_user_level_from_caps();"
        },
        {
            "trigger": "WP_Users_List_Table-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Users_List_Table( ${3:\\$args} );"
        },
        {
            "trigger": "WP_Users_List_Table-ajax_user_can\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->ajax_user_can();"
        },
        {
            "trigger": "WP_Users_List_Table-current_action\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->current_action();"
        },
        {
            "trigger": "WP_Users_List_Table-display_rows\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->display_rows();"
        },
        {
            "trigger": "WP_Users_List_Table-get_columns\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->get_columns();"
        },
        {
            "trigger": "WP_Users_List_Table-no_items\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->no_items();"
        },
        {
            "trigger": "WP_Users_List_Table-prepare_items\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->prepare_items();"
        },
        {
            "trigger": "WP_Users_List_Table-single_row\tWP Class Method",
            "contents": "${1:WP_Users_List_Table}->single_row( ${2:\\$user_object}, ${3:\\$style}, ${4:\\$role}, ${5:\\$numposts} );"
        },
        {
            "trigger": "WP_Widget_Archives-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Archives();"
        },
        {
            "trigger": "WP_Widget_Archives-form\tWP Class Method",
            "contents": "${1:WP_Widget_Archives}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Archives-update\tWP Class Method",
            "contents": "${1:WP_Widget_Archives}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Archives-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Archives}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Area_Customize_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Widget_Area_Customize_Control}->render_content();"
        },
        {
            "trigger": "WP_Widget_Area_Customize_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Widget_Area_Customize_Control}->to_json();"
        },
        {
            "trigger": "WP_Widget_Calendar-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Calendar();"
        },
        {
            "trigger": "WP_Widget_Calendar-form\tWP Class Method",
            "contents": "${1:WP_Widget_Calendar}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Calendar-update\tWP Class Method",
            "contents": "${1:WP_Widget_Calendar}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Calendar-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Calendar}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Categories-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Categories();"
        },
        {
            "trigger": "WP_Widget_Categories-form\tWP Class Method",
            "contents": "${1:WP_Widget_Categories}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Categories-update\tWP Class Method",
            "contents": "${1:WP_Widget_Categories}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Categories-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Categories}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Custom_HTML();"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-_filter_gallery_shortcode_attrs\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Custom_HTML}->_filter_gallery_shortcode_attrs( ${2:\\$attrs} );"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-_register_one\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Custom_HTML}->_register_one( ${2:\\$number} );"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-add_help_text\tWP Class Method",
            "contents": "${1:WP_Widget_Custom_HTML}::add_help_text();"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Custom_HTML}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-form\tWP Class Method",
            "contents": "${1:WP_Widget_Custom_HTML}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Custom_HTML}::render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-update\tWP Class Method",
            "contents": "${1:WP_Widget_Custom_HTML}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Custom_HTML-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Custom_HTML}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Factory-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Factory();"
        },
        {
            "trigger": "WP_Widget_Factory-_register_widgets\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Factory}->_register_widgets();"
        },
        {
            "trigger": "WP_Widget_Factory-register\tWP Class Method",
            "contents": "${1:WP_Widget_Factory}->register( ${2:\\$widget} );"
        },
        {
            "trigger": "WP_Widget_Factory-unregister\tWP Class Method",
            "contents": "${1:WP_Widget_Factory}->unregister( ${2:\\$widget} );"
        },
        {
            "trigger": "WP_Widget_Form_Customize_Control-active_callback\tWP Class Method",
            "contents": "${1:WP_Widget_Form_Customize_Control}->active_callback();"
        },
        {
            "trigger": "WP_Widget_Form_Customize_Control-render_content\tWP Class Method",
            "contents": "${1:WP_Widget_Form_Customize_Control}->render_content();"
        },
        {
            "trigger": "WP_Widget_Form_Customize_Control-to_json\tWP Class Method",
            "contents": "${1:WP_Widget_Form_Customize_Control}->to_json();"
        },
        {
            "trigger": "WP_Widget_Links-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Links();"
        },
        {
            "trigger": "WP_Widget_Links-form\tWP Class Method",
            "contents": "${1:WP_Widget_Links}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Links-update\tWP Class Method",
            "contents": "${1:WP_Widget_Links}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Links-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Links}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media_Audio-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Media_Audio();"
        },
        {
            "trigger": "WP_Widget_Media_Audio-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Audio}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Audio-enqueue_preview_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Audio}->enqueue_preview_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Audio-get_instance_schema\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Audio}->get_instance_schema();"
        },
        {
            "trigger": "WP_Widget_Media_Audio-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Audio}->render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Audio-render_media\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Audio}->render_media( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media_Gallery-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Media_Gallery();"
        },
        {
            "trigger": "WP_Widget_Media_Gallery-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Gallery}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Gallery-get_instance_schema\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Gallery}->get_instance_schema();"
        },
        {
            "trigger": "WP_Widget_Media_Gallery-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Gallery}->render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Gallery-render_media\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Gallery}->render_media( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media_Image-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Media_Image();"
        },
        {
            "trigger": "WP_Widget_Media_Image-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Image}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Image-get_instance_schema\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Image}->get_instance_schema();"
        },
        {
            "trigger": "WP_Widget_Media_Image-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Image}->render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Image-render_media\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Image}->render_media( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media_Video-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Media_Video();"
        },
        {
            "trigger": "WP_Widget_Media_Video-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Video}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Video-enqueue_preview_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Video}->enqueue_preview_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Video-get_instance_schema\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Video}->get_instance_schema();"
        },
        {
            "trigger": "WP_Widget_Media_Video-inject_video_max_width_style\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Video}->inject_video_max_width_style( ${2:\\$html} );"
        },
        {
            "trigger": "WP_Widget_Media_Video-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Video}->render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Media_Video-render_media\tWP Class Method",
            "contents": "${1:WP_Widget_Media_Video}->render_media( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Media( ${3:\\$id_base}, ${4:\\$name}, ${5:\\$widget_options}, ${6:\\$control_options} );"
        },
        {
            "trigger": "WP_Widget_Media-_register_one\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Media}->_register_one( ${2:\\$number} );"
        },
        {
            "trigger": "WP_Widget_Media-display_media_state\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->display_media_state( ${2:\\$states}, ${3:\\$post} );"
        },
        {
            "trigger": "WP_Widget_Media-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Media-enqueue_preview_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->enqueue_preview_scripts();"
        },
        {
            "trigger": "WP_Widget_Media-form\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media-get_instance_schema\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->get_instance_schema();"
        },
        {
            "trigger": "WP_Widget_Media-is_attachment_with_mime_type\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->is_attachment_with_mime_type( ${2:\\$attachment}, ${3:\\$mime_type} );"
        },
        {
            "trigger": "WP_Widget_Media-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Media-render_media\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->render_media( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media-sanitize_token_list\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->sanitize_token_list( ${2:\\$tokens} );"
        },
        {
            "trigger": "WP_Widget_Media-update\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->update( ${2:\\$new_instance}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Media-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Media}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Meta-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Meta();"
        },
        {
            "trigger": "WP_Widget_Meta-form\tWP Class Method",
            "contents": "${1:WP_Widget_Meta}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Meta-update\tWP Class Method",
            "contents": "${1:WP_Widget_Meta}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Meta-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Meta}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Pages-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Pages();"
        },
        {
            "trigger": "WP_Widget_Pages-form\tWP Class Method",
            "contents": "${1:WP_Widget_Pages}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Pages-update\tWP Class Method",
            "contents": "${1:WP_Widget_Pages}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Pages-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Pages}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Recent_Comments-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Recent_Comments();"
        },
        {
            "trigger": "WP_Widget_Recent_Comments-form\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Comments}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Recent_Comments-recent_comments_style\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Comments}->recent_comments_style();"
        },
        {
            "trigger": "WP_Widget_Recent_Comments-update\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Comments}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Recent_Comments-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Comments}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Recent_Posts-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Recent_Posts();"
        },
        {
            "trigger": "WP_Widget_Recent_Posts-form\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Posts}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Recent_Posts-update\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Posts}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Recent_Posts-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Recent_Posts}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_RSS-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_RSS();"
        },
        {
            "trigger": "WP_Widget_RSS-form\tWP Class Method",
            "contents": "${1:WP_Widget_RSS}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_RSS-update\tWP Class Method",
            "contents": "${1:WP_Widget_RSS}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_RSS-widget\tWP Class Method",
            "contents": "${1:WP_Widget_RSS}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Search-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Search();"
        },
        {
            "trigger": "WP_Widget_Search-form\tWP Class Method",
            "contents": "${1:WP_Widget_Search}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Search-update\tWP Class Method",
            "contents": "${1:WP_Widget_Search}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Search-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Search}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Tag_Cloud-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Tag_Cloud();"
        },
        {
            "trigger": "WP_Widget_Tag_Cloud-_get_current_taxonomy\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Tag_Cloud}->_get_current_taxonomy( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Tag_Cloud-form\tWP Class Method",
            "contents": "${1:WP_Widget_Tag_Cloud}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Tag_Cloud-update\tWP Class Method",
            "contents": "${1:WP_Widget_Tag_Cloud}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Tag_Cloud-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Tag_Cloud}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Text-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget_Text();"
        },
        {
            "trigger": "WP_Widget_Text-_filter_gallery_shortcode_attrs\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Text}->_filter_gallery_shortcode_attrs( ${2:\\$attrs} );"
        },
        {
            "trigger": "WP_Widget_Text-_register_one\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget_Text}->_register_one( ${2:\\$number} );"
        },
        {
            "trigger": "WP_Widget_Text-enqueue_admin_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->enqueue_admin_scripts();"
        },
        {
            "trigger": "WP_Widget_Text-enqueue_preview_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->enqueue_preview_scripts();"
        },
        {
            "trigger": "WP_Widget_Text-form\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Text-inject_video_max_width_style\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->inject_video_max_width_style( ${2:\\$matches} );"
        },
        {
            "trigger": "WP_Widget_Text-is_legacy_instance\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->is_legacy_instance( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget_Text-render_control_template_scripts\tWP Class Method",
            "contents": "${1:WP_Widget_Text}::render_control_template_scripts();"
        },
        {
            "trigger": "WP_Widget_Text-update\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget_Text-widget\tWP Class Method",
            "contents": "${1:WP_Widget_Text}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "WP_Widget-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new WP_Widget( ${3:\\$id_base}, ${4:\\$name}, ${5:\\$widget_options}, ${6:\\$control_options} );"
        },
        {
            "trigger": "WP_Widget-_get_display_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget}->_get_display_callback();"
        },
        {
            "trigger": "WP_Widget-_get_form_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget}->_get_form_callback();"
        },
        {
            "trigger": "WP_Widget-_get_update_callback\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget}->_get_update_callback();"
        },
        {
            "trigger": "WP_Widget-_register\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget}->_register();"
        },
        {
            "trigger": "WP_Widget-_register_one\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget}->_register_one( ${2:\\$number} );"
        },
        {
            "trigger": "WP_Widget-_set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:WP_Widget}->_set( ${2:\\$number} );"
        },
        {
            "trigger": "WP_Widget-display_callback\tWP Class Method",
            "contents": "${1:WP_Widget}->display_callback( ${2:\\$args}, ${3:\\$widget_args} );"
        },
        {
            "trigger": "WP_Widget-form\tWP Class Method",
            "contents": "${1:WP_Widget}->form( ${2:\\$instance} );"
        },
        {
            "trigger": "WP_Widget-form_callback\tWP Class Method",
            "contents": "${1:WP_Widget}->form_callback( ${2:\\$widget_args} );"
        },
        {
            "trigger": "WP_Widget-get_field_id\tWP Class Method",
            "contents": "${1:WP_Widget}->get_field_id( ${2:\\$field_name} );"
        },
        {
            "trigger": "WP_Widget-get_field_name\tWP Class Method",
            "contents": "${1:WP_Widget}->get_field_name( ${2:\\$field_name} );"
        },
        {
            "trigger": "WP_Widget-get_settings\tWP Class Method",
            "contents": "${1:WP_Widget}->get_settings();"
        },
        {
            "trigger": "WP_Widget-is_preview\tWP Class Method",
            "contents": "${1:WP_Widget}->is_preview();"
        },
        {
            "trigger": "WP_Widget-save_settings\tWP Class Method",
            "contents": "${1:WP_Widget}->save_settings( ${2:\\$settings} );"
        },
        {
            "trigger": "WP_Widget-update\tWP Class Method",
            "contents": "${1:WP_Widget}->update( ${2:\\$new_instance}, ${3:\\$old_instance} );"
        },
        {
            "trigger": "WP_Widget-update_callback\tWP Class Method",
            "contents": "${1:WP_Widget}->update_callback();"
        },
        {
            "trigger": "WP_Widget-widget\tWP Class Method",
            "contents": "${1:WP_Widget}->widget( ${2:\\$args}, ${3:\\$instance} );"
        },
        {
            "trigger": "wp_xmlrpc_server-__call\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wp_xmlrpc_server}->__call( ${2:\\$name}, ${3:\\$arguments} );"
        },
        {
            "trigger": "wp_xmlrpc_server-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new wp_xmlrpc_server();"
        },
        {
            "trigger": "wp_xmlrpc_server-_getOptions\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wp_xmlrpc_server}->_getOptions( ${2:\\$options} );"
        },
        {
            "trigger": "wp_xmlrpc_server-add_enclosure_if_new\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->add_enclosure_if_new( ${2:\\$post_ID}, ${3:\\$enclosure} );"
        },
        {
            "trigger": "wp_xmlrpc_server-addTwoNumbers\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->addTwoNumbers( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-attach_uploads\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->attach_uploads( ${2:\\$post_ID}, ${3:\\$post_content} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_deletePost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_deletePost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_editPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_editPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_getPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_getPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_getRecentPosts\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_getRecentPosts( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_getUserInfo\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_getUserInfo( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_getUsersBlogs\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_getUsersBlogs( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-blogger_newPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->blogger_newPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-escape\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->escape( ${2:\\$data} );"
        },
        {
            "trigger": "wp_xmlrpc_server-get_custom_fields\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->get_custom_fields( ${2:\\$post_id} );"
        },
        {
            "trigger": "wp_xmlrpc_server-get_term_custom_fields\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->get_term_custom_fields( ${2:\\$term_id} );"
        },
        {
            "trigger": "wp_xmlrpc_server-initialise_blog_option_info\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->initialise_blog_option_info();"
        },
        {
            "trigger": "wp_xmlrpc_server-login\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->login( ${2:\\$username}, ${3:\\$password} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_getCategoryList\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_getCategoryList( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_getPostCategories\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_getPostCategories( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_getRecentPostTitles\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_getRecentPostTitles( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_getTrackbackPings\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_getTrackbackPings( ${2:\\$post_ID} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_publishPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_publishPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_setPostCategories\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_setPostCategories( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_supportedMethods\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_supportedMethods();"
        },
        {
            "trigger": "wp_xmlrpc_server-mt_supportedTextFilters\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mt_supportedTextFilters();"
        },
        {
            "trigger": "wp_xmlrpc_server-mw_editPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mw_editPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mw_getCategories\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mw_getCategories( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mw_getPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mw_getPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mw_getRecentPosts\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mw_getRecentPosts( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mw_newMediaObject\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mw_newMediaObject( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-mw_newPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->mw_newPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-pingback_extensions_getPingbacks\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->pingback_extensions_getPingbacks( ${2:\\$url} );"
        },
        {
            "trigger": "wp_xmlrpc_server-pingback_ping\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->pingback_ping( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-sayHello\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->sayHello();"
        },
        {
            "trigger": "wp_xmlrpc_server-serve_request\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->serve_request();"
        },
        {
            "trigger": "wp_xmlrpc_server-set_custom_fields\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->set_custom_fields( ${2:\\$post_id}, ${3:\\$fields} );"
        },
        {
            "trigger": "wp_xmlrpc_server-set_term_custom_fields\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->set_term_custom_fields( ${2:\\$term_id}, ${3:\\$fields} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_deleteCategory\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_deleteCategory( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_deleteComment\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_deleteComment( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_deletePage\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_deletePage( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_deletePost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_deletePost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_deleteTerm\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_deleteTerm( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_editComment\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_editComment( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_editPage\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_editPage( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_editPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_editPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_editProfile\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_editProfile( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_editTerm\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_editTerm( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getAuthors\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getAuthors( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getComment\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getComment( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getCommentCount\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getCommentCount( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getComments\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getComments( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getCommentStatusList\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getCommentStatusList( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getMediaItem\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getMediaItem( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getMediaLibrary\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getMediaLibrary( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getOptions\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getOptions( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPage\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPage( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPageList\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPageList( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPages\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPages( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPageStatusList\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPageStatusList( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPageTemplates\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPageTemplates( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPostFormats\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPostFormats( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPosts\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPosts( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPostStatusList\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPostStatusList( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPostType\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPostType( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getPostTypes\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getPostTypes( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getProfile\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getProfile( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getRevisions\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getRevisions( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getTags\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getTags( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getTaxonomies\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getTaxonomies( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getTaxonomy\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getTaxonomy( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getTerm\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getTerm( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getTerms\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getTerms( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getUser\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getUser( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getUsers\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getUsers( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_getUsersBlogs\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_getUsersBlogs( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_newCategory\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_newCategory( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_newComment\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_newComment( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_newPage\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_newPage( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_newPost\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_newPost( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_newTerm\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_newTerm( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_restoreRevision\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_restoreRevision( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_setOptions\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_setOptions( ${2:\\$args} );"
        },
        {
            "trigger": "wp_xmlrpc_server-wp_suggestCategories\tWP Class Method",
            "contents": "${1:wp_xmlrpc_server}->wp_suggestCategories( ${2:\\$args} );"
        },
        {
            "trigger": "WP-add_query_var\tWP Class Method",
            "contents": "${1:WP}->add_query_var( ${2:\\$qv} );"
        },
        {
            "trigger": "WP-build_query_string\tWP Class Method",
            "contents": "${1:WP}->build_query_string();"
        },
        {
            "trigger": "WP-handle_404\tWP Class Method",
            "contents": "${1:WP}->handle_404();"
        },
        {
            "trigger": "WP-init\tWP Class Method",
            "contents": "${1:WP}->init();"
        },
        {
            "trigger": "WP-main\tWP Class Method",
            "contents": "${1:WP}->main( ${2:\\$query_args} );"
        },
        {
            "trigger": "WP-parse_request\tWP Class Method",
            "contents": "${1:WP}->parse_request( ${2:\\$extra_query_vars} );"
        },
        {
            "trigger": "WP-query_posts\tWP Class Method",
            "contents": "${1:WP}->query_posts();"
        },
        {
            "trigger": "WP-register_globals\tWP Class Method",
            "contents": "${1:WP}->register_globals();"
        },
        {
            "trigger": "WP-remove_query_var\tWP Class Method",
            "contents": "${1:WP}->remove_query_var( ${2:\\$name} );"
        },
        {
            "trigger": "WP-send_headers\tWP Class Method",
            "contents": "${1:WP}->send_headers();"
        },
        {
            "trigger": "WP-set_query_var\tWP Class Method",
            "contents": "${1:WP}->set_query_var( ${2:\\$key}, ${3:\\$value} );"
        },
        {
            "trigger": "wpdb-__construct\tWP Class Method",
            "contents": "${1:\\$${2:class} = }new wpdb( ${3:\\$dbuser}, ${4:\\$dbpassword}, ${5:\\$dbname}, ${6:\\$dbhost} );"
        },
        {
            "trigger": "wpdb-__get\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->__get( ${2:\\$name} );"
        },
        {
            "trigger": "wpdb-__isset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->__isset( ${2:\\$name} );"
        },
        {
            "trigger": "wpdb-__set\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->__set( ${2:\\$name}, ${3:\\$value} );"
        },
        {
            "trigger": "wpdb-__unset\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->__unset( ${2:\\$name} );"
        },
        {
            "trigger": "wpdb-_escape\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->_escape( ${2:\\$data} );"
        },
        {
            "trigger": "wpdb-_insert_replace_helper\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->_insert_replace_helper( ${2:\\$table}, ${3:\\$data}, ${4:\\$format}, ${5:\\$type} );"
        },
        {
            "trigger": "wpdb-_real_escape\tWP Class Method",
            "contents": "${0:\/** This method seems not public, check it. *\/}${1:wpdb}->_real_escape( ${2:\\$string} );"
        },
        {
            "trigger": "wpdb-add_placeholder_escape\tWP Class Method",
            "contents": "${1:wpdb}->add_placeholder_escape( ${2:\\$query} );"
        },
        {
            "trigger": "wpdb-bail\tWP Class Method",
            "contents": "${1:wpdb}->bail( ${2:\\$message}, ${3:\\$error_code} );"
        },
        {
            "trigger": "wpdb-check_connection\tWP Class Method",
            "contents": "${1:wpdb}->check_connection( ${2:\\$allow_bail} );"
        },
        {
            "trigger": "wpdb-check_database_version\tWP Class Method",
            "contents": "${1:wpdb}->check_database_version();"
        },
        {
            "trigger": "wpdb-close\tWP Class Method",
            "contents": "${1:wpdb}->close();"
        },
        {
            "trigger": "wpdb-db_connect\tWP Class Method",
            "contents": "${1:wpdb}->db_connect( ${2:\\$allow_bail} );"
        },
        {
            "trigger": "wpdb-db_version\tWP Class Method",
            "contents": "${1:wpdb}->db_version();"
        },
        {
            "trigger": "wpdb-delete\tWP Class Method",
            "contents": "${1:wpdb}->delete( ${2:\\$table}, ${3:\\$where}, ${4:\\$where_format} );"
        },
        {
            "trigger": "wpdb-determine_charset\tWP Class Method",
            "contents": "${1:wpdb}->determine_charset( ${2:\\$charset}, ${3:\\$collate} );"
        },
        {
            "trigger": "wpdb-esc_like\tWP Class Method",
            "contents": "${1:wpdb}->esc_like( ${2:\\$text} );"
        },
        {
            "trigger": "wpdb-escape_by_ref\tWP Class Method",
            "contents": "${1:wpdb}->escape_by_ref( ${2:\\$string} );"
        },
        {
            "trigger": "wpdb-flush\tWP Class Method",
            "contents": "${1:wpdb}->flush();"
        },
        {
            "trigger": "wpdb-get_blog_prefix\tWP Class Method",
            "contents": "${1:wpdb}->get_blog_prefix( ${2:\\$blog_id} );"
        },
        {
            "trigger": "wpdb-get_caller\tWP Class Method",
            "contents": "${1:wpdb}->get_caller();"
        },
        {
            "trigger": "wpdb-get_charset_collate\tWP Class Method",
            "contents": "${1:wpdb}->get_charset_collate();"
        },
        {
            "trigger": "wpdb-get_col\tWP Class Method",
            "contents": "${1:wpdb}->get_col( ${2:\\$query}, ${3:\\$x} );"
        },
        {
            "trigger": "wpdb-get_col_charset\tWP Class Method",
            "contents": "${1:wpdb}->get_col_charset( ${2:\\$table}, ${3:\\$column} );"
        },
        {
            "trigger": "wpdb-get_col_info\tWP Class Method",
            "contents": "${1:wpdb}->get_col_info( ${2:\\$info_type}, ${3:\\$col_offset} );"
        },
        {
            "trigger": "wpdb-get_col_length\tWP Class Method",
            "contents": "${1:wpdb}->get_col_length( ${2:\\$table}, ${3:\\$column} );"
        },
        {
            "trigger": "wpdb-get_results\tWP Class Method",
            "contents": "${1:wpdb}->get_results( ${2:\\$query}, ${3:\\$output} );"
        },
        {
            "trigger": "wpdb-get_row\tWP Class Method",
            "contents": "${1:wpdb}->get_row( ${2:\\$query}, ${3:\\$output}, ${4:\\$y} );"
        },
        {
            "trigger": "wpdb-get_var\tWP Class Method",
            "contents": "${1:wpdb}->get_var( ${2:\\$query}, ${3:\\$x}, ${4:\\$y} );"
        },
        {
            "trigger": "wpdb-has_cap\tWP Class Method",
            "contents": "${1:wpdb}->has_cap( ${2:\\$db_cap} );"
        },
        {
            "trigger": "wpdb-hide_errors\tWP Class Method",
            "contents": "${1:wpdb}->hide_errors();"
        },
        {
            "trigger": "wpdb-init_charset\tWP Class Method",
            "contents": "${1:wpdb}->init_charset();"
        },
        {
            "trigger": "wpdb-insert\tWP Class Method",
            "contents": "${1:wpdb}->insert( ${2:\\$table}, ${3:\\$data}, ${4:\\$format} );"
        },
        {
            "trigger": "wpdb-log_query\tWP Class Method",
            "contents": "${1:wpdb}->log_query( ${2:\\$query}, ${3:\\$query_time}, ${4:\\$query_callstack}, ${5:\\$query_start}, ${6:\\$query_data} );"
        },
        {
            "trigger": "wpdb-parse_db_host\tWP Class Method",
            "contents": "${1:wpdb}->parse_db_host( ${2:\\$host} );"
        },
        {
            "trigger": "wpdb-placeholder_escape\tWP Class Method",
            "contents": "${1:wpdb}->placeholder_escape();"
        },
        {
            "trigger": "wpdb-prepare\tWP Class Method",
            "contents": "${1:wpdb}->prepare( ${2:\\$query}, ${3:\\$args} );"
        },
        {
            "trigger": "wpdb-print_error\tWP Class Method",
            "contents": "${1:wpdb}->print_error( ${2:\\$str} );"
        },
        {
            "trigger": "wpdb-query\tWP Class Method",
            "contents": "${1:wpdb}->query( ${2:\\$query} );"
        },
        {
            "trigger": "wpdb-remove_placeholder_escape\tWP Class Method",
            "contents": "${1:wpdb}->remove_placeholder_escape( ${2:\\$query} );"
        },
        {
            "trigger": "wpdb-replace\tWP Class Method",
            "contents": "${1:wpdb}->replace( ${2:\\$table}, ${3:\\$data}, ${4:\\$format} );"
        },
        {
            "trigger": "wpdb-select\tWP Class Method",
            "contents": "${1:wpdb}->select( ${2:\\$db}, ${3:\\$dbh} );"
        },
        {
            "trigger": "wpdb-set_blog_id\tWP Class Method",
            "contents": "${1:wpdb}->set_blog_id( ${2:\\$blog_id}, ${3:\\$network_id} );"
        },
        {
            "trigger": "wpdb-set_charset\tWP Class Method",
            "contents": "${1:wpdb}->set_charset( ${2:\\$dbh}, ${3:\\$charset}, ${4:\\$collate} );"
        },
        {
            "trigger": "wpdb-set_prefix\tWP Class Method",
            "contents": "${1:wpdb}->set_prefix( ${2:\\$prefix}, ${3:\\$set_table_names} );"
        },
        {
            "trigger": "wpdb-set_sql_mode\tWP Class Method",
            "contents": "${1:wpdb}->set_sql_mode( ${2:\\$modes} );"
        },
        {
            "trigger": "wpdb-show_errors\tWP Class Method",
            "contents": "${1:wpdb}->show_errors( ${2:\\$show} );"
        },
        {
            "trigger": "wpdb-strip_invalid_text_for_column\tWP Class Method",
            "contents": "${1:wpdb}->strip_invalid_text_for_column( ${2:\\$table}, ${3:\\$column}, ${4:\\$value} );"
        },
        {
            "trigger": "wpdb-suppress_errors\tWP Class Method",
            "contents": "${1:wpdb}->suppress_errors( ${2:\\$suppress} );"
        },
        {
            "trigger": "wpdb-tables\tWP Class Method",
            "contents": "${1:wpdb}->tables( ${2:\\$scope}, ${3:\\$prefix}, ${4:\\$blog_id} );"
        },
        {
            "trigger": "wpdb-timer_start\tWP Class Method",
            "contents": "${1:wpdb}->timer_start();"
        },
        {
            "trigger": "wpdb-timer_stop\tWP Class Method",
            "contents": "${1:wpdb}->timer_stop();"
        },
        {
            "trigger": "wpdb-update\tWP Class Method",
            "contents": "${1:wpdb}->update( ${2:\\$table}, ${3:\\$data}, ${4:\\$where}, ${5:\\$format}, ${6:\\$where_format} );"
        }
    ]
}